{"id":"25892836f6b6ba5c7d4a9ad5ad3ff45f","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport {IERC1155Receiver} from \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport {IERC1155MetadataURI} from \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\nimport {ContextUpgradeable} from \"../../utils/ContextUpgradeable.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {ERC165Upgradeable} from \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport {Arrays} from \"@openzeppelin/contracts/utils/Arrays.sol\";\nimport {IERC1155Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n */\nabstract contract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155, IERC1155MetadataURI, IERC1155Errors {\n    using Arrays for uint256[];\n    using Arrays for address[];\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155\n    struct ERC1155Storage {\n        mapping(uint256 id => mapping(address account => uint256)) _balances;\n\n        mapping(address account => mapping(address operator => bool)) _operatorApprovals;\n\n        // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n        string _uri;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC1155\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC1155StorageLocation = 0x88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500;\n\n    function _getERC1155Storage() private pure returns (ERC1155Storage storage $) {\n        assembly {\n            $.slot := ERC1155StorageLocation\n        }\n    }\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\n        ERC1155Storage storage $ = _getERC1155Storage();\n        return $._uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     */\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\n        ERC1155Storage storage $ = _getERC1155Storage();\n        return $._balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual returns (uint256[] memory) {\n        if (accounts.length != ids.length) {\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\n        }\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\n        ERC1155Storage storage $ = _getERC1155Storage();\n        return $._operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeTransferFrom(from, to, id, value, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeBatchTransferFrom(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\n     * (or `to`) is the zero address.\n     *\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     *\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\n     */\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\n        ERC1155Storage storage $ = _getERC1155Storage();\n        if (ids.length != values.length) {\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\n        }\n\n        address operator = _msgSender();\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids.unsafeMemoryAccess(i);\n            uint256 value = values.unsafeMemoryAccess(i);\n\n            if (from != address(0)) {\n                uint256 fromBalance = $._balances[id][from];\n                if (fromBalance < value) {\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\n                }\n                unchecked {\n                    // Overflow not possible: value <= fromBalance\n                    $._balances[id][from] = fromBalance - value;\n                }\n            }\n\n            if (to != address(0)) {\n                $._balances[id][to] += value;\n            }\n        }\n\n        if (ids.length == 1) {\n            uint256 id = ids.unsafeMemoryAccess(0);\n            uint256 value = values.unsafeMemoryAccess(0);\n            emit TransferSingle(operator, from, to, id, value);\n        } else {\n            emit TransferBatch(operator, from, to, ids, values);\n        }\n    }\n\n    /**\n     * @dev Version of {_update} that performs the token acceptance check by calling\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\n     * contains code (eg. is a smart contract at the moment of execution).\n     *\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\n     * overriding {_update} instead.\n     */\n    function _updateWithAcceptanceCheck(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal virtual {\n        _update(from, to, ids, values);\n        if (to != address(0)) {\n            address operator = _msgSender();\n            if (ids.length == 1) {\n                uint256 id = ids.unsafeMemoryAccess(0);\n                uint256 value = values.unsafeMemoryAccess(0);\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\n            } else {\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\n            }\n        }\n    }\n\n    /**\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the values in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        ERC1155Storage storage $ = _getERC1155Storage();\n        $._uri = newuri;\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     * - `ids` and `values` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the zero address.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        ERC1155Storage storage $ = _getERC1155Storage();\n        if (operator == address(0)) {\n            revert ERC1155InvalidOperator(address(0));\n        }\n        $._operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Creates an array in memory with only one value for each of the elements provided.\n     */\n    function _asSingletonArrays(\n        uint256 element1,\n        uint256 element2\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Load the free memory pointer\n            array1 := mload(0x40)\n            // Set array length to 1\n            mstore(array1, 1)\n            // Store the single element at the next word after the length (where content starts)\n            mstore(add(array1, 0x20), element1)\n\n            // Repeat for next array locating it right after the first array\n            array2 := add(array1, 0x40)\n            mstore(array2, 1)\n            mstore(add(array2, 0x20), element2)\n\n            // Update the free memory pointer by pointing after the second array\n            mstore(0x40, add(array2, 0x40))\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC1155Upgradeable} from \"../ERC1155Upgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n *\n * NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens\n * that can be minted.\n *\n * CAUTION: This extension should not be added in an upgrade to an already deployed contract.\n */\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155Supply\n    struct ERC1155SupplyStorage {\n        mapping(uint256 id => uint256) _totalSupply;\n        uint256 _totalSupplyAll;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC1155Supply\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC1155SupplyStorageLocation = 0x4a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e2800;\n\n    function _getERC1155SupplyStorage() private pure returns (ERC1155SupplyStorage storage $) {\n        assembly {\n            $.slot := ERC1155SupplyStorageLocation\n        }\n    }\n\n    function __ERC1155Supply_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Total value of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\n        return $._totalSupply[id];\n    }\n\n    /**\n     * @dev Total value of tokens.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\n        return $._totalSupplyAll;\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_update}.\n     */\n    function _update(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) internal virtual override {\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\n        super._update(from, to, ids, values);\n\n        if (from == address(0)) {\n            uint256 totalMintValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values[i];\n                // Overflow check required: The rest of the code assumes that totalSupply never overflows\n                $._totalSupply[ids[i]] += value;\n                totalMintValue += value;\n            }\n            // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\n            $._totalSupplyAll += totalMintValue;\n        }\n\n        if (to == address(0)) {\n            uint256 totalBurnValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values[i];\n\n                unchecked {\n                    // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\n                    $._totalSupply[ids[i]] -= value;\n                    // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                    totalBurnValue += value;\n                }\n            }\n            unchecked {\n                // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                $._totalSupplyAll -= totalBurnValue;\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/interfaces/IERC2981.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n */\nlibrary ERC1967Utils {\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/common/ERC2981.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC2981} from \"../../interfaces/IERC2981.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 tokenId => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev The default royalty set is invalid (eg. (numerator / denominator) >= 1).\n     */\n    error ERC2981InvalidDefaultRoyalty(uint256 numerator, uint256 denominator);\n\n    /**\n     * @dev The default royalty receiver is invalid.\n     */\n    error ERC2981InvalidDefaultRoyaltyReceiver(address receiver);\n\n    /**\n     * @dev The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\n     */\n    error ERC2981InvalidTokenRoyalty(uint256 tokenId, uint256 numerator, uint256 denominator);\n\n    /**\n     * @dev The royalty receiver for `tokenId` is invalid.\n     */\n    error ERC2981InvalidTokenRoyaltyReceiver(uint256 tokenId, address receiver);\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        uint256 denominator = _feeDenominator();\n        if (feeNumerator > denominator) {\n            // Royalty fee will exceed the sale price\n            revert ERC2981InvalidDefaultRoyalty(feeNumerator, denominator);\n        }\n        if (receiver == address(0)) {\n            revert ERC2981InvalidDefaultRoyaltyReceiver(address(0));\n        }\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\n        uint256 denominator = _feeDenominator();\n        if (feeNumerator > denominator) {\n            // Royalty fee will exceed the sale price\n            revert ERC2981InvalidTokenRoyalty(tokenId, feeNumerator, denominator);\n        }\n        if (receiver == address(0)) {\n            revert ERC2981InvalidTokenRoyaltyReceiver(tokenId, address(0));\n        }\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n"},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface that must be implemented by smart contracts in order to receive\n * ERC-1155 token transfers.\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Arrays.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\nimport {Math} from \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    using StorageSlot for bytes32;\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getUint256Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/HoldrArtistsERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts/token/common/ERC2981.sol';\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract HoldrArtistsERC1155 is Initializable, ERC1155SupplyUpgradeable, OwnableUpgradeable, UUPSUpgradeable {\n\n  mapping(address => bool) public admins;\n  mapping(uint256 => address) public artistAddresses;\n  mapping(uint256 => uint256) public tokenSupplyLimits;\n\n  function init(address initialOwner, address[] memory initialAdmins, string memory uri) public initializer {\n    __ERC1155Supply_init();\n    __Ownable_init(initialOwner);\n    __UUPSUpgradeable_init();\n    _setURI(uri);\n\n    for (uint i = 0; i < initialAdmins.length; i++) {\n      admins[initialAdmins[i]] = true;\n    }\n  }\n\n  /**\n     * @dev Update the artist address for a particular token\n\n     * Params:\n     * tokenId: the id of the token being updated\n     * artistAddress: the new address of the artist for this token\n     */\n  function setArtistAddress(uint256 tokenId, address artistAddress) external {\n    require(admins[msg.sender], \"not admin\");\n    require(tokenId != 0, \"0 not allowed\");\n    artistAddresses[tokenId] = artistAddress;\n  }\n\n  /**\n     * @dev Increase the max allowed supply of an artist token\n\n     * Params:\n     * tokenId: the id of the token being updated\n     * extraSupply: the additional supply to be allowed\n     */\n  function increaseTokenSupplyLimit(uint256 tokenId, uint256 extraSupply) external {\n    require(admins[msg.sender], \"not admin\");\n    require(tokenSupplyLimits[tokenId] + extraSupply <= 1000, \"new maximum supply would exceed 1000\");\n    tokenSupplyLimits[tokenId] = tokenSupplyLimits[tokenId] + extraSupply;\n  }\n\n  /**\n     * @dev Update the uri template\n\n     * Params:\n     * _uri: the new uri template\n     */\n  function setURI(string memory uri) external onlyOwner {\n    _setURI(uri);\n  }\n\n  /**\n     * @dev Check address is admin\n\n     * Params:\n     * _address: the address to check\n     */\n  function isAdmin(address adminAddress) view external returns (bool) {\n    return admins[adminAddress] == true;\n  }\n\n  /**\n     * @dev Add an admin\n\n     * Params:\n     * _adminAddress: the new address\n     */\n  function addAdmin(address adminAddress) external onlyOwner {\n    admins[adminAddress] = true;\n  }\n\n  /**\n     * @dev Remove an admin\n\n     * Params:\n     * adminAddress: the address to remove\n     */\n  function removeAdmin(address adminAddress) external onlyOwner {\n    delete admins[adminAddress];\n  }\n\n  /**\n     * @dev The mint function (mints new tokens of a particular id)\n\n     * Params:\n     * tokenId: the token id to be minted\n     * count: the number of new tokens to mint\n     */\n  function mint(uint256 tokenId, uint256 count) external {\n    require(artistAddresses[tokenId] == msg.sender, \"sender is not owner for this token\");\n    require(totalSupply(tokenId) + count <= tokenSupplyLimits[tokenId], \"new supply would exceed max\");\n    _mint(artistAddresses[tokenId], tokenId, count, \"\");\n  }\n\n  /**\n     * @dev The admin mint function (mints new tokens of a particular id)\n\n     * Params:\n     * tokenId: the token id to be minted\n     * count: the number of new tokens to mint\n     */\n  function adminMint(uint256 tokenId, uint256 count) external {\n    require(admins[msg.sender], \"not admin\");\n    require(artistAddresses[tokenId] != address(0), \"artist not set for this token\");\n    require(totalSupply(tokenId) + count <= tokenSupplyLimits[tokenId], \"new supply would exceed max\");\n    _mint(artistAddresses[tokenId], tokenId, count, \"\");\n  }\n\n  /**\n    * @dev The admin burn function for burning a user's token\n\n    * Params:\n    * from: the owner of the token\n    * tokenId: the token id\n    */\n  function adminBurn(address from, uint256 tokenId) external {\n    require(admins[msg.sender], \"not admin\");\n    super._burn(from, tokenId, 1);\n  }\n\n  /**\n    * @dev The admin burn batch function for burning a user's token\n\n    * Params:\n    * from: the owners of the token\n    * tokenIds: the token ids\n    */\n  function adminBurnBatch(address[] memory from, uint256[] memory tokenIds) external {\n    for (uint i = 0; i < from.length; i++) {\n      this.adminBurn(from[i], tokenIds[i]);\n    }\n  }\n\n  function setApprovalForAll(address operator, bool approved) public override {\n    super.setApprovalForAll(operator, approved);\n  }\n\n  function safeTransferFrom(address from, address to, uint256 tokenId, uint256 amount, bytes memory data) public override {\n    require(this.isAdmin(msg.sender), \"not admin\");\n    super.safeTransferFrom(from, to, tokenId, amount, data);\n  }\n\n  function safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual override {\n    require(this.isAdmin(msg.sender), \"not admin\");\n    super.safeBatchTransferFrom(from, to, ids, amounts, data);\n  }\n\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155Upgradeable) returns (bool) {\n    return (\n      interfaceId == type(IERC2981).interfaceId ||\n        super.supportsInterface(interfaceId)\n    );\n  }\n\n  function isApprovedForAll(address owner, address operator) public view override returns (bool) {\n    if (admins[operator]) {\n      return true;\n    }\n    return super.isApprovedForAll(owner, operator);\n  }\n\n  function _authorizeUpgrade(address newImplementation) override internal virtual onlyOwner {\n    // no op\n  }\n\n}\n"},"contracts/HoldrArtistsERC1155UpgradeTest.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./HoldrArtistsERC1155.sol\";\n\ncontract HoldrArtistsERC1155UpgradeTest is HoldrArtistsERC1155 {\n\n  function supportsInterface(bytes4 interfaceId) public view virtual override(HoldrArtistsERC1155) returns (bool) {\n    revert(\"This is a dummy error\");\n  }\n\n}\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n --> contracts/HoldrArtistsERC1155UpgradeTest.sol:8:30:\n  |\n8 |   function supportsInterface(bytes4 interfaceId) public view virtual override(HoldrArtistsERC1155) returns (bool) {\n  |                              ^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":208,"file":"contracts/HoldrArtistsERC1155UpgradeTest.sol","start":190},"type":"Warning"}],"sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[2028],"Initializable":[448],"OwnableUpgradeable":[194]},"id":195,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":195,"sourceUnit":2029,"src":"128:67:0","symbolAliases":[{"foreign":{"id":2,"name":"ContextUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"136:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":195,"sourceUnit":449,"src":"196:63:0","symbolAliases":[{"foreign":{"id":4,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"204:13:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":7,"name":"Initializable","nameLocations":["789:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":448,"src":"789:13:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"789:13:0"},{"baseName":{"id":9,"name":"ContextUpgradeable","nameLocations":["804:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":2028,"src":"804:18:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"804:18:0"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"261:487:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":194,"linearizedBaseContracts":[194,2028,448],"name":"OwnableUpgradeable","nameLocation":"767:18:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"OwnableUpgradeable.OwnableStorage","documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"829:65:0","text":"@custom:storage-location erc7201:openzeppelin.storage.Ownable"},"id":14,"members":[{"constant":false,"id":13,"mutability":"mutable","name":"_owner","nameLocation":"939:6:0","nodeType":"VariableDeclaration","scope":14,"src":"931:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"OwnableStorage","nameLocation":"906:14:0","nodeType":"StructDefinition","scope":194,"src":"899:53:0","visibility":"public"},{"constant":true,"id":17,"mutability":"constant","name":"OwnableStorageLocation","nameLocation":"1094:22:0","nodeType":"VariableDeclaration","scope":194,"src":"1069:116:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":15,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1069:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307839303136643039643732643430666461653266643863656163366236323334633737303632313466643339633163643165363039613035323863313939333030","id":16,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1119:66:0","typeDescriptions":{"typeIdentifier":"t_rational_65173360639460082030725920392146925864023520599682862633725751242436743107328_by_1","typeString":"int_const 6517...(69 digits omitted)...7328"},"value":"0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300"},"visibility":"private"},{"body":{"id":24,"nodeType":"Block","src":"1270:81:0","statements":[{"AST":{"nodeType":"YulBlock","src":"1289:56:0","statements":[{"nodeType":"YulAssignment","src":"1303:32:0","value":{"name":"OwnableStorageLocation","nodeType":"YulIdentifier","src":"1313:22:0"},"variableNames":[{"name":"$.slot","nodeType":"YulIdentifier","src":"1303:6:0"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":21,"isOffset":false,"isSlot":true,"src":"1303:6:0","suffix":"slot","valueSize":1},{"declaration":17,"isOffset":false,"isSlot":false,"src":"1313:22:0","valueSize":1}],"id":23,"nodeType":"InlineAssembly","src":"1280:65:0"}]},"id":25,"implemented":true,"kind":"function","modifiers":[],"name":"_getOwnableStorage","nameLocation":"1201:18:0","nodeType":"FunctionDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"1219:2:0"},"returnParameters":{"id":22,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21,"mutability":"mutable","name":"$","nameLocation":"1267:1:0","nodeType":"VariableDeclaration","scope":25,"src":"1244:24:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$14_storage_ptr","typeString":"struct OwnableUpgradeable.OwnableStorage"},"typeName":{"id":20,"nodeType":"UserDefinedTypeName","pathNode":{"id":19,"name":"OwnableStorage","nameLocations":["1244:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":14,"src":"1244:14:0"},"referencedDeclaration":14,"src":"1244:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$14_storage_ptr","typeString":"struct OwnableUpgradeable.OwnableStorage"}},"visibility":"internal"}],"src":"1243:26:0"},"scope":194,"src":"1192:159:0","stateMutability":"pure","virtual":false,"visibility":"private"},{"documentation":{"id":26,"nodeType":"StructuredDocumentation","src":"1357:85:0","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":30,"name":"OwnableUnauthorizedAccount","nameLocation":"1453:26:0","nodeType":"ErrorDefinition","parameters":{"id":29,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28,"mutability":"mutable","name":"account","nameLocation":"1488:7:0","nodeType":"VariableDeclaration","scope":30,"src":"1480:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":27,"name":"address","nodeType":"ElementaryTypeName","src":"1480:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1479:17:0"},"src":"1447:50:0"},{"documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"1503:82:0","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":35,"name":"OwnableInvalidOwner","nameLocation":"1596:19:0","nodeType":"ErrorDefinition","parameters":{"id":34,"nodeType":"ParameterList","parameters":[{"constant":false,"id":33,"mutability":"mutable","name":"owner","nameLocation":"1624:5:0","nodeType":"VariableDeclaration","scope":35,"src":"1616:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":32,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1615:15:0"},"src":"1590:41:0"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":41,"name":"OwnershipTransferred","nameLocation":"1643:20:0","nodeType":"EventDefinition","parameters":{"id":40,"nodeType":"ParameterList","parameters":[{"constant":false,"id":37,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1680:13:0","nodeType":"VariableDeclaration","scope":41,"src":"1664:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":36,"name":"address","nodeType":"ElementaryTypeName","src":"1664:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":39,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1711:8:0","nodeType":"VariableDeclaration","scope":41,"src":"1695:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":38,"name":"address","nodeType":"ElementaryTypeName","src":"1695:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1663:57:0"},"src":"1637:84:0"},{"body":{"id":53,"nodeType":"Block","src":"1919:55:0","statements":[{"expression":{"arguments":[{"id":50,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"1954:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":49,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"1929:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1929:38:0"}]},"documentation":{"id":42,"nodeType":"StructuredDocumentation","src":"1727:115:0","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":54,"implemented":true,"kind":"function","modifiers":[{"id":47,"kind":"modifierInvocation","modifierName":{"id":46,"name":"onlyInitializing","nameLocations":["1902:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":357,"src":"1902:16:0"},"nodeType":"ModifierInvocation","src":"1902:16:0"}],"name":"__Ownable_init","nameLocation":"1856:14:0","nodeType":"FunctionDefinition","parameters":{"id":45,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44,"mutability":"mutable","name":"initialOwner","nameLocation":"1879:12:0","nodeType":"VariableDeclaration","scope":54,"src":"1871:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":43,"name":"address","nodeType":"ElementaryTypeName","src":"1871:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1870:22:0"},"returnParameters":{"id":48,"nodeType":"ParameterList","parameters":[],"src":"1919:0:0"},"scope":194,"src":"1847:127:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":80,"nodeType":"Block","src":"2062:153:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":66,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":61,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"2076:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2100:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":63,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2092:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":62,"name":"address","nodeType":"ElementaryTypeName","src":"2092:7:0","typeDescriptions":{}}},"id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2092:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2076:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":75,"nodeType":"IfStatement","src":"2072:95:0","trueBody":{"id":74,"nodeType":"Block","src":"2104:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":70,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2153:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":69,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2145:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":68,"name":"address","nodeType":"ElementaryTypeName","src":"2145:7:0","typeDescriptions":{}}},"id":71,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2145:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":67,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"2125:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2125:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":73,"nodeType":"RevertStatement","src":"2118:38:0"}]}},{"expression":{"arguments":[{"id":77,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"2195:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":76,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"2176:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2176:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":79,"nodeType":"ExpressionStatement","src":"2176:32:0"}]},"id":81,"implemented":true,"kind":"function","modifiers":[{"id":59,"kind":"modifierInvocation","modifierName":{"id":58,"name":"onlyInitializing","nameLocations":["2045:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":357,"src":"2045:16:0"},"nodeType":"ModifierInvocation","src":"2045:16:0"}],"name":"__Ownable_init_unchained","nameLocation":"1989:24:0","nodeType":"FunctionDefinition","parameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":56,"mutability":"mutable","name":"initialOwner","nameLocation":"2022:12:0","nodeType":"VariableDeclaration","scope":81,"src":"2014:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":55,"name":"address","nodeType":"ElementaryTypeName","src":"2014:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2013:22:0"},"returnParameters":{"id":60,"nodeType":"ParameterList","parameters":[],"src":"2062:0:0"},"scope":194,"src":"1980:235:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":88,"nodeType":"Block","src":"2324:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":84,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"2334:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":85,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2334:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":86,"nodeType":"ExpressionStatement","src":"2334:13:0"},{"id":87,"nodeType":"PlaceholderStatement","src":"2357:1:0"}]},"documentation":{"id":82,"nodeType":"StructuredDocumentation","src":"2221:77:0","text":" @dev Throws if called by any account other than the owner."},"id":89,"name":"onlyOwner","nameLocation":"2312:9:0","nodeType":"ModifierDefinition","parameters":{"id":83,"nodeType":"ParameterList","parameters":[],"src":"2321:2:0"},"src":"2303:62:0","virtual":false,"visibility":"internal"},{"body":{"id":104,"nodeType":"Block","src":"2496:89:0","statements":[{"assignments":[97],"declarations":[{"constant":false,"id":97,"mutability":"mutable","name":"$","nameLocation":"2529:1:0","nodeType":"VariableDeclaration","scope":104,"src":"2506:24:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$14_storage_ptr","typeString":"struct OwnableUpgradeable.OwnableStorage"},"typeName":{"id":96,"nodeType":"UserDefinedTypeName","pathNode":{"id":95,"name":"OwnableStorage","nameLocations":["2506:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":14,"src":"2506:14:0"},"referencedDeclaration":14,"src":"2506:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$14_storage_ptr","typeString":"struct OwnableUpgradeable.OwnableStorage"}},"visibility":"internal"}],"id":100,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":98,"name":"_getOwnableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"2533:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$14_storage_ptr_$","typeString":"function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"}},"id":99,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2533:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$14_storage_ptr","typeString":"struct OwnableUpgradeable.OwnableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"2506:47:0"},{"expression":{"expression":{"id":101,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"2570:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$14_storage_ptr","typeString":"struct OwnableUpgradeable.OwnableStorage storage pointer"}},"id":102,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2572:6:0","memberName":"_owner","nodeType":"MemberAccess","referencedDeclaration":13,"src":"2570:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":94,"id":103,"nodeType":"Return","src":"2563:15:0"}]},"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"2371:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":105,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"2450:5:0","nodeType":"FunctionDefinition","parameters":{"id":91,"nodeType":"ParameterList","parameters":[],"src":"2455:2:0"},"returnParameters":{"id":94,"nodeType":"ParameterList","parameters":[{"constant":false,"id":93,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":105,"src":"2487:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"2487:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2486:9:0"},"scope":194,"src":"2441:144:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":121,"nodeType":"Block","src":"2703:117:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":109,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"2717:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":111,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"2728:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2717:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":120,"nodeType":"IfStatement","src":"2713:101:0","trueBody":{"id":119,"nodeType":"Block","src":"2742:72:0","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":115,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"2790:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2790:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":114,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"2763:26:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2763:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":118,"nodeType":"RevertStatement","src":"2756:47:0"}]}}]},"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"2591:62:0","text":" @dev Throws if the sender is not the owner."},"id":122,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"2667:11:0","nodeType":"FunctionDefinition","parameters":{"id":107,"nodeType":"ParameterList","parameters":[],"src":"2678:2:0"},"returnParameters":{"id":108,"nodeType":"ParameterList","parameters":[],"src":"2703:0:0"},"scope":194,"src":"2658:162:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":135,"nodeType":"Block","src":"3209:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3246:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":130,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3238:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":129,"name":"address","nodeType":"ElementaryTypeName","src":"3238:7:0","typeDescriptions":{}}},"id":132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3238:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":128,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"3219:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3219:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":134,"nodeType":"ExpressionStatement","src":"3219:30:0"}]},"documentation":{"id":123,"nodeType":"StructuredDocumentation","src":"2826:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":136,"implemented":true,"kind":"function","modifiers":[{"id":126,"kind":"modifierInvocation","modifierName":{"id":125,"name":"onlyOwner","nameLocations":["3199:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":89,"src":"3199:9:0"},"nodeType":"ModifierInvocation","src":"3199:9:0"}],"name":"renounceOwnership","nameLocation":"3164:17:0","nodeType":"FunctionDefinition","parameters":{"id":124,"nodeType":"ParameterList","parameters":[],"src":"3181:2:0"},"returnParameters":{"id":127,"nodeType":"ParameterList","parameters":[],"src":"3209:0:0"},"scope":194,"src":"3155:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":163,"nodeType":"Block","src":"3475:145:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":144,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"3489:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3509:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":146,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3501:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"3501:7:0","typeDescriptions":{}}},"id":148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3501:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3489:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":158,"nodeType":"IfStatement","src":"3485:91:0","trueBody":{"id":157,"nodeType":"Block","src":"3513:63:0","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3562:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":152,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3554:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":151,"name":"address","nodeType":"ElementaryTypeName","src":"3554:7:0","typeDescriptions":{}}},"id":154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3554:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":150,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"3534:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3534:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":156,"nodeType":"RevertStatement","src":"3527:38:0"}]}},{"expression":{"arguments":[{"id":160,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"3604:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":159,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"3585:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3585:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":162,"nodeType":"ExpressionStatement","src":"3585:28:0"}]},"documentation":{"id":137,"nodeType":"StructuredDocumentation","src":"3262:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":164,"implemented":true,"kind":"function","modifiers":[{"id":142,"kind":"modifierInvocation","modifierName":{"id":141,"name":"onlyOwner","nameLocations":["3465:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":89,"src":"3465:9:0"},"nodeType":"ModifierInvocation","src":"3465:9:0"}],"name":"transferOwnership","nameLocation":"3414:17:0","nodeType":"FunctionDefinition","parameters":{"id":140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":139,"mutability":"mutable","name":"newOwner","nameLocation":"3440:8:0","nodeType":"VariableDeclaration","scope":164,"src":"3432:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":138,"name":"address","nodeType":"ElementaryTypeName","src":"3432:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3431:18:0"},"returnParameters":{"id":143,"nodeType":"ParameterList","parameters":[],"src":"3475:0:0"},"scope":194,"src":"3405:215:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":192,"nodeType":"Block","src":"3837:185:0","statements":[{"assignments":[172],"declarations":[{"constant":false,"id":172,"mutability":"mutable","name":"$","nameLocation":"3870:1:0","nodeType":"VariableDeclaration","scope":192,"src":"3847:24:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$14_storage_ptr","typeString":"struct OwnableUpgradeable.OwnableStorage"},"typeName":{"id":171,"nodeType":"UserDefinedTypeName","pathNode":{"id":170,"name":"OwnableStorage","nameLocations":["3847:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":14,"src":"3847:14:0"},"referencedDeclaration":14,"src":"3847:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$14_storage_ptr","typeString":"struct OwnableUpgradeable.OwnableStorage"}},"visibility":"internal"}],"id":175,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":173,"name":"_getOwnableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"3874:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$14_storage_ptr_$","typeString":"function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"}},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3874:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$14_storage_ptr","typeString":"struct OwnableUpgradeable.OwnableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3847:47:0"},{"assignments":[177],"declarations":[{"constant":false,"id":177,"mutability":"mutable","name":"oldOwner","nameLocation":"3912:8:0","nodeType":"VariableDeclaration","scope":192,"src":"3904:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":176,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":180,"initialValue":{"expression":{"id":178,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"3923:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$14_storage_ptr","typeString":"struct OwnableUpgradeable.OwnableStorage storage pointer"}},"id":179,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3925:6:0","memberName":"_owner","nodeType":"MemberAccess","referencedDeclaration":13,"src":"3923:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3904:27:0"},{"expression":{"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":181,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":172,"src":"3941:1:0","typeDescriptions":{"typeIdentifier":"t_struct$_OwnableStorage_$14_storage_ptr","typeString":"struct OwnableUpgradeable.OwnableStorage storage pointer"}},"id":183,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3943:6:0","memberName":"_owner","nodeType":"MemberAccess","referencedDeclaration":13,"src":"3941:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":184,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"3952:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3941:19:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":186,"nodeType":"ExpressionStatement","src":"3941:19:0"},{"eventCall":{"arguments":[{"id":188,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":177,"src":"3996:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":189,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"4006:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":187,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"3975:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3975:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":191,"nodeType":"EmitStatement","src":"3970:45:0"}]},"documentation":{"id":165,"nodeType":"StructuredDocumentation","src":"3626:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":193,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"3783:18:0","nodeType":"FunctionDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"newOwner","nameLocation":"3810:8:0","nodeType":"VariableDeclaration","scope":193,"src":"3802:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"3802:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3801:18:0"},"returnParameters":{"id":169,"nodeType":"ParameterList","parameters":[],"src":"3837:0:0"},"scope":194,"src":"3774:248:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":195,"src":"749:3275:0","usedErrors":[30,35,211,214],"usedEvents":[41,219]}],"src":"102:3923:0"},"id":0},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"Initializable":[448]},"id":449,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":196,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:1"},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":197,"nodeType":"StructuredDocumentation","src":"139:2209:1","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":448,"linearizedBaseContracts":[448],"name":"Initializable","nameLocation":"2367:13:1","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Initializable.InitializableStorage","documentation":{"id":198,"nodeType":"StructuredDocumentation","src":"2387:293:1","text":" @dev Storage of the initializable contract.\n It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n when using with upgradeable contracts.\n @custom:storage-location erc7201:openzeppelin.storage.Initializable"},"id":205,"members":[{"constant":false,"id":201,"mutability":"mutable","name":"_initialized","nameLocation":"2820:12:1","nodeType":"VariableDeclaration","scope":205,"src":"2813:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":200,"name":"uint64","nodeType":"ElementaryTypeName","src":"2813:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":204,"mutability":"mutable","name":"_initializing","nameLocation":"2955:13:1","nodeType":"VariableDeclaration","scope":205,"src":"2950:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":203,"name":"bool","nodeType":"ElementaryTypeName","src":"2950:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"InitializableStorage","nameLocation":"2692:20:1","nodeType":"StructDefinition","scope":448,"src":"2685:290:1","visibility":"public"},{"constant":true,"id":208,"mutability":"constant","name":"INITIALIZABLE_STORAGE","nameLocation":"3123:21:1","nodeType":"VariableDeclaration","scope":448,"src":"3098:115:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":206,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3098:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307866306335376531363834306466303430663135303838646332663831666533393163333932336265633733653233613936363265666339633232396336613030","id":207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3147:66:1","typeDescriptions":{"typeIdentifier":"t_rational_108904022758810753673719992590105913556127789646572562039383141376366747609600_by_1","typeString":"int_const 1089...(70 digits omitted)...9600"},"value":"0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"},"visibility":"private"},{"documentation":{"id":209,"nodeType":"StructuredDocumentation","src":"3220:60:1","text":" @dev The contract is already initialized."},"errorSelector":"f92ee8a9","id":211,"name":"InvalidInitialization","nameLocation":"3291:21:1","nodeType":"ErrorDefinition","parameters":{"id":210,"nodeType":"ParameterList","parameters":[],"src":"3312:2:1"},"src":"3285:30:1"},{"documentation":{"id":212,"nodeType":"StructuredDocumentation","src":"3321:57:1","text":" @dev The contract is not initializing."},"errorSelector":"d7e6bcf8","id":214,"name":"NotInitializing","nameLocation":"3389:15:1","nodeType":"ErrorDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[],"src":"3404:2:1"},"src":"3383:24:1"},{"anonymous":false,"documentation":{"id":215,"nodeType":"StructuredDocumentation","src":"3413:90:1","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"c7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2","id":219,"name":"Initialized","nameLocation":"3514:11:1","nodeType":"EventDefinition","parameters":{"id":218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":217,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"3533:7:1","nodeType":"VariableDeclaration","scope":219,"src":"3526:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":216,"name":"uint64","nodeType":"ElementaryTypeName","src":"3526:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3525:16:1"},"src":"3508:34:1"},{"body":{"id":301,"nodeType":"Block","src":"4092:1081:1","statements":[{"assignments":[224],"declarations":[{"constant":false,"id":224,"mutability":"mutable","name":"$","nameLocation":"4187:1:1","nodeType":"VariableDeclaration","scope":301,"src":"4158:30:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":223,"nodeType":"UserDefinedTypeName","pathNode":{"id":222,"name":"InitializableStorage","nameLocations":["4158:20:1"],"nodeType":"IdentifierPath","referencedDeclaration":205,"src":"4158:20:1"},"referencedDeclaration":205,"src":"4158:20:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"id":227,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":225,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"4191:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4191:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"4158:59:1"},{"assignments":[229],"declarations":[{"constant":false,"id":229,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"4284:14:1","nodeType":"VariableDeclaration","scope":301,"src":"4279:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":228,"name":"bool","nodeType":"ElementaryTypeName","src":"4279:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":233,"initialValue":{"id":232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4301:16:1","subExpression":{"expression":{"id":230,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"4302:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":231,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4304:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":204,"src":"4302:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4279:38:1"},{"assignments":[235],"declarations":[{"constant":false,"id":235,"mutability":"mutable","name":"initialized","nameLocation":"4334:11:1","nodeType":"VariableDeclaration","scope":301,"src":"4327:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":234,"name":"uint64","nodeType":"ElementaryTypeName","src":"4327:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"id":238,"initialValue":{"expression":{"id":236,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"4348:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":237,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4350:12:1","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":201,"src":"4348:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"VariableDeclarationStatement","src":"4327:35:1"},{"assignments":[240],"declarations":[{"constant":false,"id":240,"mutability":"mutable","name":"initialSetup","nameLocation":"4711:12:1","nodeType":"VariableDeclaration","scope":301,"src":"4706:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":239,"name":"bool","nodeType":"ElementaryTypeName","src":"4706:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":246,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":241,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"4726:11:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4741:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4726:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":244,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"4746:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4726:34:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4706:54:1"},{"assignments":[248],"declarations":[{"constant":false,"id":248,"mutability":"mutable","name":"construction","nameLocation":"4775:12:1","nodeType":"VariableDeclaration","scope":301,"src":"4770:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":247,"name":"bool","nodeType":"ElementaryTypeName","src":"4770:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":261,"initialValue":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":249,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"4790:11:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4805:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4790:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":254,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4818:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$448","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$448","typeString":"contract Initializable"}],"id":253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4810:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":252,"name":"address","nodeType":"ElementaryTypeName","src":"4810:7:1","typeDescriptions":{}}},"id":255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4810:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4824:4:1","memberName":"code","nodeType":"MemberAccess","src":"4810:18:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4829:6:1","memberName":"length","nodeType":"MemberAccess","src":"4810:25:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4839:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4810:30:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4790:50:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"4770:70:1"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4855:13:1","subExpression":{"id":262,"name":"initialSetup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"4856:12:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4872:13:1","subExpression":{"id":264,"name":"construction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"4873:12:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4855:30:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":271,"nodeType":"IfStatement","src":"4851:91:1","trueBody":{"id":270,"nodeType":"Block","src":"4887:55:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":267,"name":"InvalidInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"4908:21:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4908:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":269,"nodeType":"RevertStatement","src":"4901:30:1"}]}},{"expression":{"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":272,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"4951:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":274,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4953:12:1","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":201,"src":"4951:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4968:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4951:18:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":277,"nodeType":"ExpressionStatement","src":"4951:18:1"},{"condition":{"id":278,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"4983:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":286,"nodeType":"IfStatement","src":"4979:67:1","trueBody":{"id":285,"nodeType":"Block","src":"4999:47:1","statements":[{"expression":{"id":283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":279,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"5013:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":281,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5015:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":204,"src":"5013:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5031:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5013:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":284,"nodeType":"ExpressionStatement","src":"5013:22:1"}]}},{"id":287,"nodeType":"PlaceholderStatement","src":"5055:1:1"},{"condition":{"id":288,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"5070:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":300,"nodeType":"IfStatement","src":"5066:101:1","trueBody":{"id":299,"nodeType":"Block","src":"5086:81:1","statements":[{"expression":{"id":293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":289,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"5100:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":291,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5102:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":204,"src":"5100:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5118:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5100:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":294,"nodeType":"ExpressionStatement","src":"5100:23:1"},{"eventCall":{"arguments":[{"hexValue":"31","id":296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5154:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":295,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"5142:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5142:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":298,"nodeType":"EmitStatement","src":"5137:19:1"}]}}]},"documentation":{"id":220,"nodeType":"StructuredDocumentation","src":"3548:516:1","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n production.\n Emits an {Initialized} event."},"id":302,"name":"initializer","nameLocation":"4078:11:1","nodeType":"ModifierDefinition","parameters":{"id":221,"nodeType":"ParameterList","parameters":[],"src":"4089:2:1"},"src":"4069:1104:1","virtual":false,"visibility":"internal"},{"body":{"id":348,"nodeType":"Block","src":"6291:392:1","statements":[{"assignments":[309],"declarations":[{"constant":false,"id":309,"mutability":"mutable","name":"$","nameLocation":"6386:1:1","nodeType":"VariableDeclaration","scope":348,"src":"6357:30:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":308,"nodeType":"UserDefinedTypeName","pathNode":{"id":307,"name":"InitializableStorage","nameLocations":["6357:20:1"],"nodeType":"IdentifierPath","referencedDeclaration":205,"src":"6357:20:1"},"referencedDeclaration":205,"src":"6357:20:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"id":312,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":310,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"6390:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"6357:59:1"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":313,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"6431:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":314,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6433:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":204,"src":"6431:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":315,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"6450:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":316,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6452:12:1","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":201,"src":"6450:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":317,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"6468:7:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6450:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6431:44:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":324,"nodeType":"IfStatement","src":"6427:105:1","trueBody":{"id":323,"nodeType":"Block","src":"6477:55:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":320,"name":"InvalidInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"6498:21:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6498:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":322,"nodeType":"RevertStatement","src":"6491:30:1"}]}},{"expression":{"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":325,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"6541:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":327,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6543:12:1","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":201,"src":"6541:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":328,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"6558:7:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6541:24:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":330,"nodeType":"ExpressionStatement","src":"6541:24:1"},{"expression":{"id":335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":331,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"6575:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":333,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6577:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":204,"src":"6575:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6593:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6575:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":336,"nodeType":"ExpressionStatement","src":"6575:22:1"},{"id":337,"nodeType":"PlaceholderStatement","src":"6607:1:1"},{"expression":{"id":342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":338,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"6618:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":340,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6620:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":204,"src":"6618:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6636:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6618:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":343,"nodeType":"ExpressionStatement","src":"6618:23:1"},{"eventCall":{"arguments":[{"id":345,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"6668:7:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":344,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"6656:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6656:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":347,"nodeType":"EmitStatement","src":"6651:25:1"}]},"documentation":{"id":303,"nodeType":"StructuredDocumentation","src":"5179:1068:1","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":349,"name":"reinitializer","nameLocation":"6261:13:1","nodeType":"ModifierDefinition","parameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":305,"mutability":"mutable","name":"version","nameLocation":"6282:7:1","nodeType":"VariableDeclaration","scope":349,"src":"6275:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":304,"name":"uint64","nodeType":"ElementaryTypeName","src":"6275:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6274:16:1"},"src":"6252:431:1","virtual":false,"visibility":"internal"},{"body":{"id":356,"nodeType":"Block","src":"6921:48:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":352,"name":"_checkInitializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"6931:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6931:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":354,"nodeType":"ExpressionStatement","src":"6931:20:1"},{"id":355,"nodeType":"PlaceholderStatement","src":"6961:1:1"}]},"documentation":{"id":350,"nodeType":"StructuredDocumentation","src":"6689:199:1","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":357,"name":"onlyInitializing","nameLocation":"6902:16:1","nodeType":"ModifierDefinition","parameters":{"id":351,"nodeType":"ParameterList","parameters":[],"src":"6918:2:1"},"src":"6893:76:1","virtual":false,"visibility":"internal"},{"body":{"id":369,"nodeType":"Block","src":"7136:89:1","statements":[{"condition":{"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7150:18:1","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":361,"name":"_isInitializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"7151:15:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7151:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":368,"nodeType":"IfStatement","src":"7146:73:1","trueBody":{"id":367,"nodeType":"Block","src":"7170:49:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":364,"name":"NotInitializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"7191:15:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7191:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":366,"nodeType":"RevertStatement","src":"7184:24:1"}]}}]},"documentation":{"id":358,"nodeType":"StructuredDocumentation","src":"6975:104:1","text":" @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}."},"id":370,"implemented":true,"kind":"function","modifiers":[],"name":"_checkInitializing","nameLocation":"7093:18:1","nodeType":"FunctionDefinition","parameters":{"id":359,"nodeType":"ParameterList","parameters":[],"src":"7111:2:1"},"returnParameters":{"id":360,"nodeType":"ParameterList","parameters":[],"src":"7136:0:1"},"scope":448,"src":"7084:141:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":415,"nodeType":"Block","src":"7760:373:1","statements":[{"assignments":[376],"declarations":[{"constant":false,"id":376,"mutability":"mutable","name":"$","nameLocation":"7855:1:1","nodeType":"VariableDeclaration","scope":415,"src":"7826:30:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":375,"nodeType":"UserDefinedTypeName","pathNode":{"id":374,"name":"InitializableStorage","nameLocations":["7826:20:1"],"nodeType":"IdentifierPath","referencedDeclaration":205,"src":"7826:20:1"},"referencedDeclaration":205,"src":"7826:20:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"id":379,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":377,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"7859:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7859:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"7826:59:1"},{"condition":{"expression":{"id":380,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"7900:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":381,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7902:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":204,"src":"7900:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":386,"nodeType":"IfStatement","src":"7896:76:1","trueBody":{"id":385,"nodeType":"Block","src":"7917:55:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":382,"name":"InvalidInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"7938:21:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7938:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":384,"nodeType":"RevertStatement","src":"7931:30:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":387,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"7985:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":388,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7987:12:1","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":201,"src":"7985:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":391,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8008:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":390,"name":"uint64","nodeType":"ElementaryTypeName","src":"8008:6:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":389,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8003:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8003:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8016:3:1","memberName":"max","nodeType":"MemberAccess","src":"8003:16:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"7985:34:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":414,"nodeType":"IfStatement","src":"7981:146:1","trueBody":{"id":413,"nodeType":"Block","src":"8021:106:1","statements":[{"expression":{"id":403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":395,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"8035:1:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":397,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8037:12:1","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":201,"src":"8035:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":400,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8057:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":399,"name":"uint64","nodeType":"ElementaryTypeName","src":"8057:6:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":398,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8052:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8052:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8065:3:1","memberName":"max","nodeType":"MemberAccess","src":"8052:16:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"8035:33:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":404,"nodeType":"ExpressionStatement","src":"8035:33:1"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8104:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":407,"name":"uint64","nodeType":"ElementaryTypeName","src":"8104:6:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"}],"id":406,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"8099:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8099:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint64","typeString":"type(uint64)"}},"id":410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8112:3:1","memberName":"max","nodeType":"MemberAccess","src":"8099:16:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":405,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"8087:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8087:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":412,"nodeType":"EmitStatement","src":"8082:34:1"}]}}]},"documentation":{"id":371,"nodeType":"StructuredDocumentation","src":"7231:475:1","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":416,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"7720:20:1","nodeType":"FunctionDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[],"src":"7740:2:1"},"returnParameters":{"id":373,"nodeType":"ParameterList","parameters":[],"src":"7760:0:1"},"scope":448,"src":"7711:422:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":426,"nodeType":"Block","src":"8308:63:1","statements":[{"expression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":422,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"8325:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8325:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":424,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8352:12:1","memberName":"_initialized","nodeType":"MemberAccess","referencedDeclaration":201,"src":"8325:39:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":421,"id":425,"nodeType":"Return","src":"8318:46:1"}]},"documentation":{"id":417,"nodeType":"StructuredDocumentation","src":"8139:99:1","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":427,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"8252:22:1","nodeType":"FunctionDefinition","parameters":{"id":418,"nodeType":"ParameterList","parameters":[],"src":"8274:2:1"},"returnParameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":420,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":427,"src":"8300:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":419,"name":"uint64","nodeType":"ElementaryTypeName","src":"8300:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"8299:8:1"},"scope":448,"src":"8243:128:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":437,"nodeType":"Block","src":"8543:64:1","statements":[{"expression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":433,"name":"_getInitializableStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"8560:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$","typeString":"function () pure returns (struct Initializable.InitializableStorage storage pointer)"}},"id":434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage storage pointer"}},"id":435,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8587:13:1","memberName":"_initializing","nodeType":"MemberAccess","referencedDeclaration":204,"src":"8560:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":432,"id":436,"nodeType":"Return","src":"8553:47:1"}]},"documentation":{"id":428,"nodeType":"StructuredDocumentation","src":"8377:105:1","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":438,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"8496:15:1","nodeType":"FunctionDefinition","parameters":{"id":429,"nodeType":"ParameterList","parameters":[],"src":"8511:2:1"},"returnParameters":{"id":432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":431,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":438,"src":"8537:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":430,"name":"bool","nodeType":"ElementaryTypeName","src":"8537:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8536:6:1"},"scope":448,"src":"8487:120:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":446,"nodeType":"Block","src":"8827:80:1","statements":[{"AST":{"nodeType":"YulBlock","src":"8846:55:1","statements":[{"nodeType":"YulAssignment","src":"8860:31:1","value":{"name":"INITIALIZABLE_STORAGE","nodeType":"YulIdentifier","src":"8870:21:1"},"variableNames":[{"name":"$.slot","nodeType":"YulIdentifier","src":"8860:6:1"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":443,"isOffset":false,"isSlot":true,"src":"8860:6:1","suffix":"slot","valueSize":1},{"declaration":208,"isOffset":false,"isSlot":false,"src":"8870:21:1","valueSize":1}],"id":445,"nodeType":"InlineAssembly","src":"8837:64:1"}]},"documentation":{"id":439,"nodeType":"StructuredDocumentation","src":"8613:67:1","text":" @dev Returns a pointer to the storage namespace."},"id":447,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializableStorage","nameLocation":"8746:24:1","nodeType":"FunctionDefinition","parameters":{"id":440,"nodeType":"ParameterList","parameters":[],"src":"8770:2:1"},"returnParameters":{"id":444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":443,"mutability":"mutable","name":"$","nameLocation":"8824:1:1","nodeType":"VariableDeclaration","scope":447,"src":"8795:30:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage"},"typeName":{"id":442,"nodeType":"UserDefinedTypeName","pathNode":{"id":441,"name":"InitializableStorage","nameLocations":["8795:20:1"],"nodeType":"IdentifierPath","referencedDeclaration":205,"src":"8795:20:1"},"referencedDeclaration":205,"src":"8795:20:1","typeDescriptions":{"typeIdentifier":"t_struct$_InitializableStorage_$205_storage_ptr","typeString":"struct Initializable.InitializableStorage"}},"visibility":"internal"}],"src":"8794:32:1"},"scope":448,"src":"8737:170:1","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":449,"src":"2349:6560:1","usedErrors":[211,214],"usedEvents":[219]}],"src":"113:8797:1"},"id":1},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","exportedSymbols":{"ERC1967Utils":[2538],"IERC1822Proxiable":[2098],"Initializable":[448],"UUPSUpgradeable":[630]},"id":631,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":450,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:2"},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC1822.sol","file":"@openzeppelin/contracts/interfaces/draft-IERC1822.sol","id":452,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":631,"sourceUnit":2099,"src":"141:88:2","symbolAliases":[{"foreign":{"id":451,"name":"IERC1822Proxiable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2098,"src":"149:17:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol","file":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol","id":454,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":631,"sourceUnit":2539,"src":"230:84:2","symbolAliases":[{"foreign":{"id":453,"name":"ERC1967Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"238:12:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"./Initializable.sol","id":456,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":631,"sourceUnit":449,"src":"315:50:2","symbolAliases":[{"foreign":{"id":455,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"323:13:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":458,"name":"Initializable","nameLocations":["1023:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":448,"src":"1023:13:2"},"id":459,"nodeType":"InheritanceSpecifier","src":"1023:13:2"},{"baseName":{"id":460,"name":"IERC1822Proxiable","nameLocations":["1038:17:2"],"nodeType":"IdentifierPath","referencedDeclaration":2098,"src":"1038:17:2"},"id":461,"nodeType":"InheritanceSpecifier","src":"1038:17:2"}],"canonicalName":"UUPSUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":457,"nodeType":"StructuredDocumentation","src":"367:618:2","text":" @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n `UUPSUpgradeable` with a custom implementation of upgrades.\n The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism."},"fullyImplemented":false,"id":630,"linearizedBaseContracts":[630,2098,448],"name":"UUPSUpgradeable","nameLocation":"1004:15:2","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":462,"nodeType":"StructuredDocumentation","src":"1062:61:2","text":"@custom:oz-upgrades-unsafe-allow state-variable-immutable"},"id":468,"mutability":"immutable","name":"__self","nameLocation":"1154:6:2","nodeType":"VariableDeclaration","scope":630,"src":"1128:48:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":463,"name":"address","nodeType":"ElementaryTypeName","src":"1128:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"id":466,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1171:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$630","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$630","typeString":"contract UUPSUpgradeable"}],"id":465,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1163:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":464,"name":"address","nodeType":"ElementaryTypeName","src":"1163:7:2","typeDescriptions":{}}},"id":467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1163:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":true,"documentation":{"id":469,"nodeType":"StructuredDocumentation","src":"1183:631:2","text":" @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n during an upgrade."},"functionSelector":"ad3cb1cc","id":472,"mutability":"constant","name":"UPGRADE_INTERFACE_VERSION","nameLocation":"1842:25:2","nodeType":"VariableDeclaration","scope":630,"src":"1819:58:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":470,"name":"string","nodeType":"ElementaryTypeName","src":"1819:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"352e302e30","id":471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1870:7:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_2ade050ecfcf8ae20ae1d10a23573f9d7e0bad85e74a2cf8338a65401e64558c","typeString":"literal_string \"5.0.0\""},"value":"5.0.0"},"visibility":"public"},{"documentation":{"id":473,"nodeType":"StructuredDocumentation","src":"1884:65:2","text":" @dev The call is from an unauthorized context."},"errorSelector":"e07c8dba","id":475,"name":"UUPSUnauthorizedCallContext","nameLocation":"1960:27:2","nodeType":"ErrorDefinition","parameters":{"id":474,"nodeType":"ParameterList","parameters":[],"src":"1987:2:2"},"src":"1954:36:2"},{"documentation":{"id":476,"nodeType":"StructuredDocumentation","src":"1996:68:2","text":" @dev The storage `slot` is unsupported as a UUID."},"errorSelector":"aa1d49a4","id":480,"name":"UUPSUnsupportedProxiableUUID","nameLocation":"2075:28:2","nodeType":"ErrorDefinition","parameters":{"id":479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":478,"mutability":"mutable","name":"slot","nameLocation":"2112:4:2","nodeType":"VariableDeclaration","scope":480,"src":"2104:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":477,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2104:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2103:14:2"},"src":"2069:49:2"},{"body":{"id":487,"nodeType":"Block","src":"2643:41:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":483,"name":"_checkProxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"2653:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2653:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":485,"nodeType":"ExpressionStatement","src":"2653:13:2"},{"id":486,"nodeType":"PlaceholderStatement","src":"2676:1:2"}]},"documentation":{"id":481,"nodeType":"StructuredDocumentation","src":"2124:493:2","text":" @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n fail."},"id":488,"name":"onlyProxy","nameLocation":"2631:9:2","nodeType":"ModifierDefinition","parameters":{"id":482,"nodeType":"ParameterList","parameters":[],"src":"2640:2:2"},"src":"2622:62:2","virtual":false,"visibility":"internal"},{"body":{"id":495,"nodeType":"Block","src":"2914:48:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":491,"name":"_checkNotDelegated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"2924:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2924:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":493,"nodeType":"ExpressionStatement","src":"2924:20:2"},{"id":494,"nodeType":"PlaceholderStatement","src":"2954:1:2"}]},"documentation":{"id":489,"nodeType":"StructuredDocumentation","src":"2690:195:2","text":" @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n callable on the implementing contract but not through proxies."},"id":496,"name":"notDelegated","nameLocation":"2899:12:2","nodeType":"ModifierDefinition","parameters":{"id":490,"nodeType":"ParameterList","parameters":[],"src":"2911:2:2"},"src":"2890:72:2","virtual":false,"visibility":"internal"},{"body":{"id":501,"nodeType":"Block","src":"3028:7:2","statements":[]},"id":502,"implemented":true,"kind":"function","modifiers":[{"id":499,"kind":"modifierInvocation","modifierName":{"id":498,"name":"onlyInitializing","nameLocations":["3011:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":357,"src":"3011:16:2"},"nodeType":"ModifierInvocation","src":"3011:16:2"}],"name":"__UUPSUpgradeable_init","nameLocation":"2977:22:2","nodeType":"FunctionDefinition","parameters":{"id":497,"nodeType":"ParameterList","parameters":[],"src":"2999:2:2"},"returnParameters":{"id":500,"nodeType":"ParameterList","parameters":[],"src":"3028:0:2"},"scope":630,"src":"2968:67:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":507,"nodeType":"Block","src":"3111:7:2","statements":[]},"id":508,"implemented":true,"kind":"function","modifiers":[{"id":505,"kind":"modifierInvocation","modifierName":{"id":504,"name":"onlyInitializing","nameLocations":["3094:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":357,"src":"3094:16:2"},"nodeType":"ModifierInvocation","src":"3094:16:2"}],"name":"__UUPSUpgradeable_init_unchained","nameLocation":"3050:32:2","nodeType":"FunctionDefinition","parameters":{"id":503,"nodeType":"ParameterList","parameters":[],"src":"3082:2:2"},"returnParameters":{"id":506,"nodeType":"ParameterList","parameters":[],"src":"3111:0:2"},"scope":630,"src":"3041:77:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2097],"body":{"id":519,"nodeType":"Block","src":"3783:56:2","statements":[{"expression":{"expression":{"id":516,"name":"ERC1967Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"3800:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Utils_$2538_$","typeString":"type(library ERC1967Utils)"}},"id":517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3813:19:2","memberName":"IMPLEMENTATION_SLOT","nodeType":"MemberAccess","referencedDeclaration":2265,"src":"3800:32:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":515,"id":518,"nodeType":"Return","src":"3793:39:2"}]},"documentation":{"id":509,"nodeType":"StructuredDocumentation","src":"3123:577:2","text":" @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"functionSelector":"52d1902d","id":520,"implemented":true,"kind":"function","modifiers":[{"id":512,"kind":"modifierInvocation","modifierName":{"id":511,"name":"notDelegated","nameLocations":["3752:12:2"],"nodeType":"IdentifierPath","referencedDeclaration":496,"src":"3752:12:2"},"nodeType":"ModifierInvocation","src":"3752:12:2"}],"name":"proxiableUUID","nameLocation":"3714:13:2","nodeType":"FunctionDefinition","parameters":{"id":510,"nodeType":"ParameterList","parameters":[],"src":"3727:2:2"},"returnParameters":{"id":515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":514,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":520,"src":"3774:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":513,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3774:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3773:9:2"},"scope":630,"src":"3705:134:2","stateMutability":"view","virtual":true,"visibility":"external"},{"body":{"id":539,"nodeType":"Block","src":"4263:109:2","statements":[{"expression":{"arguments":[{"id":531,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"4291:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":530,"name":"_authorizeUpgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"4273:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4273:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":533,"nodeType":"ExpressionStatement","src":"4273:36:2"},{"expression":{"arguments":[{"id":535,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"4341:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":536,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"4360:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":534,"name":"_upgradeToAndCallUUPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"4319:21:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4319:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":538,"nodeType":"ExpressionStatement","src":"4319:46:2"}]},"documentation":{"id":521,"nodeType":"StructuredDocumentation","src":"3845:308:2","text":" @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n encoded in `data`.\n Calls {_authorizeUpgrade}.\n Emits an {Upgraded} event.\n @custom:oz-upgrades-unsafe-allow-reachable delegatecall"},"functionSelector":"4f1ef286","id":540,"implemented":true,"kind":"function","modifiers":[{"id":528,"kind":"modifierInvocation","modifierName":{"id":527,"name":"onlyProxy","nameLocations":["4253:9:2"],"nodeType":"IdentifierPath","referencedDeclaration":488,"src":"4253:9:2"},"nodeType":"ModifierInvocation","src":"4253:9:2"}],"name":"upgradeToAndCall","nameLocation":"4167:16:2","nodeType":"FunctionDefinition","parameters":{"id":526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"mutability":"mutable","name":"newImplementation","nameLocation":"4192:17:2","nodeType":"VariableDeclaration","scope":540,"src":"4184:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":522,"name":"address","nodeType":"ElementaryTypeName","src":"4184:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":525,"mutability":"mutable","name":"data","nameLocation":"4224:4:2","nodeType":"VariableDeclaration","scope":540,"src":"4211:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":524,"name":"bytes","nodeType":"ElementaryTypeName","src":"4211:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4183:46:2"},"returnParameters":{"id":529,"nodeType":"ParameterList","parameters":[],"src":"4263:0:2"},"scope":630,"src":"4158:214:2","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":561,"nodeType":"Block","src":"4644:267:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":546,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4679:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$630","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$630","typeString":"contract UUPSUpgradeable"}],"id":545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4671:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":544,"name":"address","nodeType":"ElementaryTypeName","src":"4671:7:2","typeDescriptions":{}}},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4671:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":548,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"4688:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4671:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":550,"name":"ERC1967Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"4749:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Utils_$2538_$","typeString":"type(library ERC1967Utils)"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4762:17:2","memberName":"getImplementation","nodeType":"MemberAccess","referencedDeclaration":2296,"src":"4749:30:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4749:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":553,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"4785:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4749:42:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4671:120:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":560,"nodeType":"IfStatement","src":"4654:251:2","trueBody":{"id":559,"nodeType":"Block","src":"4844:61:2","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":556,"name":"UUPSUnauthorizedCallContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"4865:27:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4865:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":558,"nodeType":"RevertStatement","src":"4858:36:2"}]}}]},"documentation":{"id":541,"nodeType":"StructuredDocumentation","src":"4378:216:2","text":" @dev Reverts if the execution is not performed via delegatecall or the execution\n context is not of a proxy with an ERC1967-compliant implementation pointing to self.\n See {_onlyProxy}."},"id":562,"implemented":true,"kind":"function","modifiers":[],"name":"_checkProxy","nameLocation":"4608:11:2","nodeType":"FunctionDefinition","parameters":{"id":542,"nodeType":"ParameterList","parameters":[],"src":"4619:2:2"},"returnParameters":{"id":543,"nodeType":"ParameterList","parameters":[],"src":"4644:0:2"},"scope":630,"src":"4599:312:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":577,"nodeType":"Block","src":"5080:161:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":568,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5102:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_UUPSUpgradeable_$630","typeString":"contract UUPSUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_UUPSUpgradeable_$630","typeString":"contract UUPSUpgradeable"}],"id":567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5094:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":566,"name":"address","nodeType":"ElementaryTypeName","src":"5094:7:2","typeDescriptions":{}}},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5094:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":570,"name":"__self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"5111:6:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5094:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":576,"nodeType":"IfStatement","src":"5090:145:2","trueBody":{"id":575,"nodeType":"Block","src":"5119:116:2","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":572,"name":"UUPSUnauthorizedCallContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"5195:27:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5195:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":574,"nodeType":"RevertStatement","src":"5188:36:2"}]}}]},"documentation":{"id":563,"nodeType":"StructuredDocumentation","src":"4917:106:2","text":" @dev Reverts if the execution is performed via delegatecall.\n See {notDelegated}."},"id":578,"implemented":true,"kind":"function","modifiers":[],"name":"_checkNotDelegated","nameLocation":"5037:18:2","nodeType":"FunctionDefinition","parameters":{"id":564,"nodeType":"ParameterList","parameters":[],"src":"5055:2:2"},"returnParameters":{"id":565,"nodeType":"ParameterList","parameters":[],"src":"5080:0:2"},"scope":630,"src":"5028:213:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"documentation":{"id":579,"nodeType":"StructuredDocumentation","src":"5247:372:2","text":" @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n {upgradeToAndCall}.\n Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n ```solidity\n function _authorizeUpgrade(address) internal onlyOwner {}\n ```"},"id":584,"implemented":false,"kind":"function","modifiers":[],"name":"_authorizeUpgrade","nameLocation":"5633:17:2","nodeType":"FunctionDefinition","parameters":{"id":582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":581,"mutability":"mutable","name":"newImplementation","nameLocation":"5659:17:2","nodeType":"VariableDeclaration","scope":584,"src":"5651:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":580,"name":"address","nodeType":"ElementaryTypeName","src":"5651:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5650:27:2"},"returnParameters":{"id":583,"nodeType":"ParameterList","parameters":[],"src":"5694:0:2"},"scope":630,"src":"5624:71:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":628,"nodeType":"Block","src":"6137:453:2","statements":[{"clauses":[{"block":{"id":617,"nodeType":"Block","src":"6227:212:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":600,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"6245:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":601,"name":"ERC1967Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"6253:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Utils_$2538_$","typeString":"type(library ERC1967Utils)"}},"id":602,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6266:19:2","memberName":"IMPLEMENTATION_SLOT","nodeType":"MemberAccess","referencedDeclaration":2265,"src":"6253:32:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6245:40:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":609,"nodeType":"IfStatement","src":"6241:120:2","trueBody":{"id":608,"nodeType":"Block","src":"6287:74:2","statements":[{"errorCall":{"arguments":[{"id":605,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":598,"src":"6341:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":604,"name":"UUPSUnsupportedProxiableUUID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"6312:28:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6312:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":607,"nodeType":"RevertStatement","src":"6305:41:2"}]}},{"expression":{"arguments":[{"id":613,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"6404:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":614,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"6423:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":610,"name":"ERC1967Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"6374:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Utils_$2538_$","typeString":"type(library ERC1967Utils)"}},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6387:16:2","memberName":"upgradeToAndCall","nodeType":"MemberAccess","referencedDeclaration":2357,"src":"6374:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6374:54:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":616,"nodeType":"ExpressionStatement","src":"6374:54:2"}]},"errorName":"","id":618,"nodeType":"TryCatchClause","parameters":{"id":599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":598,"mutability":"mutable","name":"slot","nameLocation":"6221:4:2","nodeType":"VariableDeclaration","scope":618,"src":"6213:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":597,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6213:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6212:14:2"},"src":"6204:235:2"},{"block":{"id":625,"nodeType":"Block","src":"6446:138:2","statements":[{"errorCall":{"arguments":[{"id":622,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"6555:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":619,"name":"ERC1967Utils","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"6513:12:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Utils_$2538_$","typeString":"type(library ERC1967Utils)"}},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6526:28:2","memberName":"ERC1967InvalidImplementation","nodeType":"MemberAccess","referencedDeclaration":2270,"src":"6513:41:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6513:60:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":624,"nodeType":"RevertStatement","src":"6506:67:2"}]},"errorName":"","id":626,"nodeType":"TryCatchClause","src":"6440:144:2"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":593,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"6169:17:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":592,"name":"IERC1822Proxiable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2098,"src":"6151:17:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822Proxiable_$2098_$","typeString":"type(contract IERC1822Proxiable)"}},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6151:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822Proxiable_$2098","typeString":"contract IERC1822Proxiable"}},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6188:13:2","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":2097,"src":"6151:50:2","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6151:52:2","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":627,"nodeType":"TryStatement","src":"6147:437:2"}]},"documentation":{"id":585,"nodeType":"StructuredDocumentation","src":"5701:346:2","text":" @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n is expected to be the implementation slot in ERC1967.\n Emits an {IERC1967-Upgraded} event."},"id":629,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"6061:21:2","nodeType":"FunctionDefinition","parameters":{"id":590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":587,"mutability":"mutable","name":"newImplementation","nameLocation":"6091:17:2","nodeType":"VariableDeclaration","scope":629,"src":"6083:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":586,"name":"address","nodeType":"ElementaryTypeName","src":"6083:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":589,"mutability":"mutable","name":"data","nameLocation":"6123:4:2","nodeType":"VariableDeclaration","scope":629,"src":"6110:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":588,"name":"bytes","nodeType":"ElementaryTypeName","src":"6110:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6082:46:2"},"returnParameters":{"id":591,"nodeType":"ParameterList","parameters":[],"src":"6137:0:2"},"scope":630,"src":"6052:538:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":631,"src":"986:5606:2","usedErrors":[211,214,475,480,2270,2283,2996,2999],"usedEvents":[219,2249]}],"src":"115:6478:2"},"id":2},"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol","exportedSymbols":{"Arrays":[3419],"ContextUpgradeable":[2028],"ERC1155Upgradeable":[1761],"ERC165Upgradeable":[2068],"IERC1155":[2671],"IERC1155Errors":[2235],"IERC1155MetadataURI":[2729],"IERC1155Receiver":[2713],"IERC165":[3913],"Initializable":[448]},"id":1762,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":632,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","file":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","id":634,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1762,"sourceUnit":2672,"src":"135:76:3","symbolAliases":[{"foreign":{"id":633,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"143:8:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","file":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","id":636,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1762,"sourceUnit":2714,"src":"212:92:3","symbolAliases":[{"foreign":{"id":635,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"220:16:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol","file":"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol","id":638,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1762,"sourceUnit":2730,"src":"305:109:3","symbolAliases":[{"foreign":{"id":637,"name":"IERC1155MetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"313:19:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../../utils/ContextUpgradeable.sol","id":640,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1762,"sourceUnit":2029,"src":"415:70:3","symbolAliases":[{"foreign":{"id":639,"name":"ContextUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"423:18:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":642,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1762,"sourceUnit":3914,"src":"486:80:3","symbolAliases":[{"foreign":{"id":641,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3913,"src":"494:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","file":"../../utils/introspection/ERC165Upgradeable.sol","id":644,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1762,"sourceUnit":2069,"src":"567:82:3","symbolAliases":[{"foreign":{"id":643,"name":"ERC165Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"575:17:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Arrays.sol","file":"@openzeppelin/contracts/utils/Arrays.sol","id":646,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1762,"sourceUnit":3420,"src":"650:64:3","symbolAliases":[{"foreign":{"id":645,"name":"Arrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3419,"src":"658:6:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","id":648,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1762,"sourceUnit":2236,"src":"715:85:3","symbolAliases":[{"foreign":{"id":647,"name":"IERC1155Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"723:14:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":650,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1762,"sourceUnit":449,"src":"801:66:3","symbolAliases":[{"foreign":{"id":649,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"809:13:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":652,"name":"Initializable","nameLocations":["1094:13:3"],"nodeType":"IdentifierPath","referencedDeclaration":448,"src":"1094:13:3"},"id":653,"nodeType":"InheritanceSpecifier","src":"1094:13:3"},{"baseName":{"id":654,"name":"ContextUpgradeable","nameLocations":["1109:18:3"],"nodeType":"IdentifierPath","referencedDeclaration":2028,"src":"1109:18:3"},"id":655,"nodeType":"InheritanceSpecifier","src":"1109:18:3"},{"baseName":{"id":656,"name":"ERC165Upgradeable","nameLocations":["1129:17:3"],"nodeType":"IdentifierPath","referencedDeclaration":2068,"src":"1129:17:3"},"id":657,"nodeType":"InheritanceSpecifier","src":"1129:17:3"},{"baseName":{"id":658,"name":"IERC1155","nameLocations":["1148:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":2671,"src":"1148:8:3"},"id":659,"nodeType":"InheritanceSpecifier","src":"1148:8:3"},{"baseName":{"id":660,"name":"IERC1155MetadataURI","nameLocations":["1158:19:3"],"nodeType":"IdentifierPath","referencedDeclaration":2729,"src":"1158:19:3"},"id":661,"nodeType":"InheritanceSpecifier","src":"1158:19:3"},{"baseName":{"id":662,"name":"IERC1155Errors","nameLocations":["1179:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":2235,"src":"1179:14:3"},"id":663,"nodeType":"InheritanceSpecifier","src":"1179:14:3"}],"canonicalName":"ERC1155Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":651,"nodeType":"StructuredDocumentation","src":"869:184:3","text":" @dev Implementation of the basic standard multi-token.\n See https://eips.ethereum.org/EIPS/eip-1155\n Originally based on code by Enjin: https://github.com/enjin/erc-1155"},"fullyImplemented":true,"id":1761,"linearizedBaseContracts":[1761,2235,2729,2671,2068,3913,2028,448],"name":"ERC1155Upgradeable","nameLocation":"1072:18:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":667,"libraryName":{"id":664,"name":"Arrays","nameLocations":["1206:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":3419,"src":"1206:6:3"},"nodeType":"UsingForDirective","src":"1200:27:3","typeName":{"baseType":{"id":665,"name":"uint256","nodeType":"ElementaryTypeName","src":"1217:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":666,"nodeType":"ArrayTypeName","src":"1217:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},{"global":false,"id":671,"libraryName":{"id":668,"name":"Arrays","nameLocations":["1238:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":3419,"src":"1238:6:3"},"nodeType":"UsingForDirective","src":"1232:27:3","typeName":{"baseType":{"id":669,"name":"address","nodeType":"ElementaryTypeName","src":"1249:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":670,"nodeType":"ArrayTypeName","src":"1249:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},{"canonicalName":"ERC1155Upgradeable.ERC1155Storage","documentation":{"id":672,"nodeType":"StructuredDocumentation","src":"1265:65:3","text":"@custom:storage-location erc7201:openzeppelin.storage.ERC1155"},"id":687,"members":[{"constant":false,"id":678,"mutability":"mutable","name":"_balances","nameLocation":"1426:9:3","nodeType":"VariableDeclaration","scope":687,"src":"1367:68:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":677,"keyName":"id","keyNameLocation":"1383:2:3","keyType":{"id":673,"name":"uint256","nodeType":"ElementaryTypeName","src":"1375:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1367:58:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":676,"keyName":"account","keyNameLocation":"1405:7:3","keyType":{"id":674,"name":"address","nodeType":"ElementaryTypeName","src":"1397:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1389:35:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":675,"name":"uint256","nodeType":"ElementaryTypeName","src":"1416:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1508:18:3","nodeType":"VariableDeclaration","scope":687,"src":"1446:80:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":683,"keyName":"account","keyNameLocation":"1462:7:3","keyType":{"id":679,"name":"address","nodeType":"ElementaryTypeName","src":"1454:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1446:61:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":682,"keyName":"operator","keyNameLocation":"1489:8:3","keyType":{"id":680,"name":"address","nodeType":"ElementaryTypeName","src":"1481:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1473:33:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":681,"name":"bool","nodeType":"ElementaryTypeName","src":"1501:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"},{"constant":false,"id":686,"mutability":"mutable","name":"_uri","nameLocation":"1662:4:3","nodeType":"VariableDeclaration","scope":687,"src":"1655:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":685,"name":"string","nodeType":"ElementaryTypeName","src":"1655:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"ERC1155Storage","nameLocation":"1342:14:3","nodeType":"StructDefinition","scope":1761,"src":"1335:338:3","visibility":"public"},{"constant":true,"id":690,"mutability":"constant","name":"ERC1155StorageLocation","nameLocation":"1815:22:3","nodeType":"VariableDeclaration","scope":1761,"src":"1790:116:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":688,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1790:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307838386265353336643532343063323734613362316433613162653534343832666439636161323934663038633632613763646535363966343961336334353030","id":689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1840:66:3","typeDescriptions":{"typeIdentifier":"t_rational_61850824141875340645484003952679861077730695310785076753205161524670616061184_by_1","typeString":"int_const 6185...(69 digits omitted)...1184"},"value":"0x88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500"},"visibility":"private"},{"body":{"id":697,"nodeType":"Block","src":"1991:81:3","statements":[{"AST":{"nodeType":"YulBlock","src":"2010:56:3","statements":[{"nodeType":"YulAssignment","src":"2024:32:3","value":{"name":"ERC1155StorageLocation","nodeType":"YulIdentifier","src":"2034:22:3"},"variableNames":[{"name":"$.slot","nodeType":"YulIdentifier","src":"2024:6:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":694,"isOffset":false,"isSlot":true,"src":"2024:6:3","suffix":"slot","valueSize":1},{"declaration":690,"isOffset":false,"isSlot":false,"src":"2034:22:3","valueSize":1}],"id":696,"nodeType":"InlineAssembly","src":"2001:65:3"}]},"id":698,"implemented":true,"kind":"function","modifiers":[],"name":"_getERC1155Storage","nameLocation":"1922:18:3","nodeType":"FunctionDefinition","parameters":{"id":691,"nodeType":"ParameterList","parameters":[],"src":"1940:2:3"},"returnParameters":{"id":695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":694,"mutability":"mutable","name":"$","nameLocation":"1988:1:3","nodeType":"VariableDeclaration","scope":698,"src":"1965:24:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage"},"typeName":{"id":693,"nodeType":"UserDefinedTypeName","pathNode":{"id":692,"name":"ERC1155Storage","nameLocations":["1965:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":687,"src":"1965:14:3"},"referencedDeclaration":687,"src":"1965:14:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage"}},"visibility":"internal"}],"src":"1964:26:3"},"scope":1761,"src":"1913:159:3","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":710,"nodeType":"Block","src":"2191:47:3","statements":[{"expression":{"arguments":[{"id":707,"name":"uri_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"2226:4:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":706,"name":"__ERC1155_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"2201:24:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2201:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":709,"nodeType":"ExpressionStatement","src":"2201:30:3"}]},"documentation":{"id":699,"nodeType":"StructuredDocumentation","src":"2078:38:3","text":" @dev See {_setURI}."},"id":711,"implemented":true,"kind":"function","modifiers":[{"id":704,"kind":"modifierInvocation","modifierName":{"id":703,"name":"onlyInitializing","nameLocations":["2174:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":357,"src":"2174:16:3"},"nodeType":"ModifierInvocation","src":"2174:16:3"}],"name":"__ERC1155_init","nameLocation":"2130:14:3","nodeType":"FunctionDefinition","parameters":{"id":702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":701,"mutability":"mutable","name":"uri_","nameLocation":"2159:4:3","nodeType":"VariableDeclaration","scope":711,"src":"2145:18:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":700,"name":"string","nodeType":"ElementaryTypeName","src":"2145:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2144:20:3"},"returnParameters":{"id":705,"nodeType":"ParameterList","parameters":[],"src":"2191:0:3"},"scope":1761,"src":"2121:117:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":722,"nodeType":"Block","src":"2324:30:3","statements":[{"expression":{"arguments":[{"id":719,"name":"uri_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"2342:4:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":718,"name":"_setURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"2334:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2334:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":721,"nodeType":"ExpressionStatement","src":"2334:13:3"}]},"id":723,"implemented":true,"kind":"function","modifiers":[{"id":716,"kind":"modifierInvocation","modifierName":{"id":715,"name":"onlyInitializing","nameLocations":["2307:16:3"],"nodeType":"IdentifierPath","referencedDeclaration":357,"src":"2307:16:3"},"nodeType":"ModifierInvocation","src":"2307:16:3"}],"name":"__ERC1155_init_unchained","nameLocation":"2253:24:3","nodeType":"FunctionDefinition","parameters":{"id":714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":713,"mutability":"mutable","name":"uri_","nameLocation":"2292:4:3","nodeType":"VariableDeclaration","scope":723,"src":"2278:18:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":712,"name":"string","nodeType":"ElementaryTypeName","src":"2278:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2277:20:3"},"returnParameters":{"id":717,"nodeType":"ParameterList","parameters":[],"src":"2324:0:3"},"scope":1761,"src":"2244:110:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2067,3912],"body":{"id":753,"nodeType":"Block","src":"2540:197:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":734,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"2569:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":736,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2589:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155_$2671_$","typeString":"type(contract IERC1155)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155_$2671_$","typeString":"type(contract IERC1155)"}],"id":735,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2584:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2584:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155_$2671","typeString":"type(contract IERC1155)"}},"id":738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2599:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"2584:26:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2569:41:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":740,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"2626:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":742,"name":"IERC1155MetadataURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2729,"src":"2646:19:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURI_$2729_$","typeString":"type(contract IERC1155MetadataURI)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155MetadataURI_$2729_$","typeString":"type(contract IERC1155MetadataURI)"}],"id":741,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2641:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2641:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155MetadataURI_$2729","typeString":"type(contract IERC1155MetadataURI)"}},"id":744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2667:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"2641:37:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2626:52:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2569:109:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":749,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"2718:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":747,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2694:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC1155Upgradeable_$1761_$","typeString":"type(contract super ERC1155Upgradeable)"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2700:17:3","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2067,"src":"2694:23:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2694:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2569:161:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":733,"id":752,"nodeType":"Return","src":"2550:180:3"}]},"documentation":{"id":724,"nodeType":"StructuredDocumentation","src":"2360:56:3","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":754,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2430:17:3","nodeType":"FunctionDefinition","overrides":{"id":730,"nodeType":"OverrideSpecifier","overrides":[{"id":728,"name":"ERC165Upgradeable","nameLocations":["2497:17:3"],"nodeType":"IdentifierPath","referencedDeclaration":2068,"src":"2497:17:3"},{"id":729,"name":"IERC165","nameLocations":["2516:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":3913,"src":"2516:7:3"}],"src":"2488:36:3"},"parameters":{"id":727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":726,"mutability":"mutable","name":"interfaceId","nameLocation":"2455:11:3","nodeType":"VariableDeclaration","scope":754,"src":"2448:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":725,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2448:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2447:20:3"},"returnParameters":{"id":733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":732,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":754,"src":"2534:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":731,"name":"bool","nodeType":"ElementaryTypeName","src":"2534:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2533:6:3"},"scope":1761,"src":"2421:316:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2728],"body":{"id":771,"nodeType":"Block","src":"3211:87:3","statements":[{"assignments":[764],"declarations":[{"constant":false,"id":764,"mutability":"mutable","name":"$","nameLocation":"3244:1:3","nodeType":"VariableDeclaration","scope":771,"src":"3221:24:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage"},"typeName":{"id":763,"nodeType":"UserDefinedTypeName","pathNode":{"id":762,"name":"ERC1155Storage","nameLocations":["3221:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":687,"src":"3221:14:3"},"referencedDeclaration":687,"src":"3221:14:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage"}},"visibility":"internal"}],"id":767,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":765,"name":"_getERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"3248:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC1155Storage_$687_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Upgradeable.ERC1155Storage storage pointer)"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3248:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3221:47:3"},{"expression":{"expression":{"id":768,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"3285:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage storage pointer"}},"id":769,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3287:4:3","memberName":"_uri","nodeType":"MemberAccess","referencedDeclaration":686,"src":"3285:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":761,"id":770,"nodeType":"Return","src":"3278:13:3"}]},"documentation":{"id":755,"nodeType":"StructuredDocumentation","src":"2743:388:3","text":" @dev See {IERC1155MetadataURI-uri}.\n This implementation returns the same URI for *all* token types. It relies\n on the token type ID substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n Clients calling this function must replace the `\\{id\\}` substring with the\n actual token type ID."},"functionSelector":"0e89341c","id":772,"implemented":true,"kind":"function","modifiers":[],"name":"uri","nameLocation":"3145:3:3","nodeType":"FunctionDefinition","parameters":{"id":758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":772,"src":"3149:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":756,"name":"uint256","nodeType":"ElementaryTypeName","src":"3149:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3148:18:3"},"returnParameters":{"id":761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":760,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":772,"src":"3196:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":759,"name":"string","nodeType":"ElementaryTypeName","src":"3196:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3195:15:3"},"scope":1761,"src":"3136:162:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2609],"body":{"id":795,"nodeType":"Block","src":"3444:105:3","statements":[{"assignments":[784],"declarations":[{"constant":false,"id":784,"mutability":"mutable","name":"$","nameLocation":"3477:1:3","nodeType":"VariableDeclaration","scope":795,"src":"3454:24:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage"},"typeName":{"id":783,"nodeType":"UserDefinedTypeName","pathNode":{"id":782,"name":"ERC1155Storage","nameLocations":["3454:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":687,"src":"3454:14:3"},"referencedDeclaration":687,"src":"3454:14:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage"}},"visibility":"internal"}],"id":787,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":785,"name":"_getERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"3481:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC1155Storage_$687_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Upgradeable.ERC1155Storage storage pointer)"}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3481:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"3454:47:3"},{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":788,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"3518:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage storage pointer"}},"id":789,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3520:9:3","memberName":"_balances","nodeType":"MemberAccess","referencedDeclaration":678,"src":"3518:11:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":791,"indexExpression":{"id":790,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"3530:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3518:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":793,"indexExpression":{"id":792,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"3534:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3518:24:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":781,"id":794,"nodeType":"Return","src":"3511:31:3"}]},"documentation":{"id":773,"nodeType":"StructuredDocumentation","src":"3304:49:3","text":" @dev See {IERC1155-balanceOf}."},"functionSelector":"00fdd58e","id":796,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3367:9:3","nodeType":"FunctionDefinition","parameters":{"id":778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":775,"mutability":"mutable","name":"account","nameLocation":"3385:7:3","nodeType":"VariableDeclaration","scope":796,"src":"3377:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":774,"name":"address","nodeType":"ElementaryTypeName","src":"3377:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"id","nameLocation":"3402:2:3","nodeType":"VariableDeclaration","scope":796,"src":"3394:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"3394:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3376:29:3"},"returnParameters":{"id":781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":780,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":796,"src":"3435:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":779,"name":"uint256","nodeType":"ElementaryTypeName","src":"3435:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3434:9:3"},"scope":1761,"src":"3358:191:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2622],"body":{"id":865,"nodeType":"Block","src":"3848:410:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":809,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"3862:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3871:6:3","memberName":"length","nodeType":"MemberAccess","src":"3862:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":811,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"3881:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3885:6:3","memberName":"length","nodeType":"MemberAccess","src":"3881:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3862:29:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":822,"nodeType":"IfStatement","src":"3858:121:3","trueBody":{"id":821,"nodeType":"Block","src":"3893:86:3","statements":[{"errorCall":{"arguments":[{"expression":{"id":815,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"3940:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3944:6:3","memberName":"length","nodeType":"MemberAccess","src":"3940:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":817,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"3952:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3961:6:3","memberName":"length","nodeType":"MemberAccess","src":"3952:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":814,"name":"ERC1155InvalidArrayLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2234,"src":"3914:25:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3914:54:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":820,"nodeType":"RevertStatement","src":"3907:61:3"}]}},{"assignments":[827],"declarations":[{"constant":false,"id":827,"mutability":"mutable","name":"batchBalances","nameLocation":"4006:13:3","nodeType":"VariableDeclaration","scope":865,"src":"3989:30:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":825,"name":"uint256","nodeType":"ElementaryTypeName","src":"3989:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":826,"nodeType":"ArrayTypeName","src":"3989:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":834,"initialValue":{"arguments":[{"expression":{"id":831,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"4036:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4045:6:3","memberName":"length","nodeType":"MemberAccess","src":"4036:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":830,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4022:13:3","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":828,"name":"uint256","nodeType":"ElementaryTypeName","src":"4026:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":829,"nodeType":"ArrayTypeName","src":"4026:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4022:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3989:63:3"},{"body":{"id":861,"nodeType":"Block","src":"4109:112:3","statements":[{"expression":{"id":859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":846,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"4123:13:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":848,"indexExpression":{"id":847,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"4137:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4123:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":852,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"4180:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":850,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"4152:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4161:18:3","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":3418,"src":"4152:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_address_$dyn_memory_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (address[] memory,uint256) pure returns (address)"}},"id":853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4152:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":856,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"4207:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":854,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"4184:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4188:18:3","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":3405,"src":"4184:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256[] memory,uint256) pure returns (uint256)"}},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4184:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":849,"name":"balanceOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"4142:9:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4142:68:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4123:87:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":860,"nodeType":"ExpressionStatement","src":"4123:87:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":839,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"4083:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":840,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"4087:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:6:3","memberName":"length","nodeType":"MemberAccess","src":"4087:15:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4083:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":862,"initializationExpression":{"assignments":[836],"declarations":[{"constant":false,"id":836,"mutability":"mutable","name":"i","nameLocation":"4076:1:3","nodeType":"VariableDeclaration","scope":862,"src":"4068:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":835,"name":"uint256","nodeType":"ElementaryTypeName","src":"4068:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":838,"initialValue":{"hexValue":"30","id":837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4080:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4068:13:3"},"loopExpression":{"expression":{"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4104:3:3","subExpression":{"id":843,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"4106:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":845,"nodeType":"ExpressionStatement","src":"4104:3:3"},"nodeType":"ForStatement","src":"4063:158:3"},{"expression":{"id":863,"name":"batchBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":827,"src":"4238:13:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":808,"id":864,"nodeType":"Return","src":"4231:20:3"}]},"documentation":{"id":797,"nodeType":"StructuredDocumentation","src":"3555:146:3","text":" @dev See {IERC1155-balanceOfBatch}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":866,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"3715:14:3","nodeType":"FunctionDefinition","parameters":{"id":804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":800,"mutability":"mutable","name":"accounts","nameLocation":"3756:8:3","nodeType":"VariableDeclaration","scope":866,"src":"3739:25:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":798,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":799,"nodeType":"ArrayTypeName","src":"3739:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":803,"mutability":"mutable","name":"ids","nameLocation":"3791:3:3","nodeType":"VariableDeclaration","scope":866,"src":"3774:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":801,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":802,"nodeType":"ArrayTypeName","src":"3774:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3729:71:3"},"returnParameters":{"id":808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":866,"src":"3830:16:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":805,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":806,"nodeType":"ArrayTypeName","src":"3830:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3829:18:3"},"scope":1761,"src":"3706:552:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2630],"body":{"id":881,"nodeType":"Block","src":"4401:69:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":875,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"4430:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4430:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":877,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"4444:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":878,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"4454:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":874,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"4411:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4411:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":880,"nodeType":"ExpressionStatement","src":"4411:52:3"}]},"documentation":{"id":867,"nodeType":"StructuredDocumentation","src":"4264:57:3","text":" @dev See {IERC1155-setApprovalForAll}."},"functionSelector":"a22cb465","id":882,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4335:17:3","nodeType":"FunctionDefinition","parameters":{"id":872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":869,"mutability":"mutable","name":"operator","nameLocation":"4361:8:3","nodeType":"VariableDeclaration","scope":882,"src":"4353:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":868,"name":"address","nodeType":"ElementaryTypeName","src":"4353:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":871,"mutability":"mutable","name":"approved","nameLocation":"4376:8:3","nodeType":"VariableDeclaration","scope":882,"src":"4371:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":870,"name":"bool","nodeType":"ElementaryTypeName","src":"4371:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4352:33:3"},"returnParameters":{"id":873,"nodeType":"ParameterList","parameters":[],"src":"4401:0:3"},"scope":1761,"src":"4326:144:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2640],"body":{"id":905,"nodeType":"Block","src":"4633:120:3","statements":[{"assignments":[894],"declarations":[{"constant":false,"id":894,"mutability":"mutable","name":"$","nameLocation":"4666:1:3","nodeType":"VariableDeclaration","scope":905,"src":"4643:24:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage"},"typeName":{"id":893,"nodeType":"UserDefinedTypeName","pathNode":{"id":892,"name":"ERC1155Storage","nameLocations":["4643:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":687,"src":"4643:14:3"},"referencedDeclaration":687,"src":"4643:14:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage"}},"visibility":"internal"}],"id":897,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":895,"name":"_getERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"4670:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC1155Storage_$687_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Upgradeable.ERC1155Storage storage pointer)"}},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4670:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"4643:47:3"},{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":898,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"4707:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage storage pointer"}},"id":899,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4709:18:3","memberName":"_operatorApprovals","nodeType":"MemberAccess","referencedDeclaration":684,"src":"4707:20:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":901,"indexExpression":{"id":900,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"4728:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4707:29:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":903,"indexExpression":{"id":902,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"4737:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4707:39:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":891,"id":904,"nodeType":"Return","src":"4700:46:3"}]},"documentation":{"id":883,"nodeType":"StructuredDocumentation","src":"4476:56:3","text":" @dev See {IERC1155-isApprovedForAll}."},"functionSelector":"e985e9c5","id":906,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4546:16:3","nodeType":"FunctionDefinition","parameters":{"id":888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":885,"mutability":"mutable","name":"account","nameLocation":"4571:7:3","nodeType":"VariableDeclaration","scope":906,"src":"4563:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":884,"name":"address","nodeType":"ElementaryTypeName","src":"4563:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":887,"mutability":"mutable","name":"operator","nameLocation":"4588:8:3","nodeType":"VariableDeclaration","scope":906,"src":"4580:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":886,"name":"address","nodeType":"ElementaryTypeName","src":"4580:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4562:35:3"},"returnParameters":{"id":891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":906,"src":"4627:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":889,"name":"bool","nodeType":"ElementaryTypeName","src":"4627:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4626:6:3"},"scope":1761,"src":"4537:216:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2654],"body":{"id":949,"nodeType":"Block","src":"4933:238:3","statements":[{"assignments":[921],"declarations":[{"constant":false,"id":921,"mutability":"mutable","name":"sender","nameLocation":"4951:6:3","nodeType":"VariableDeclaration","scope":949,"src":"4943:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":920,"name":"address","nodeType":"ElementaryTypeName","src":"4943:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":924,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":922,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"4960:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4960:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4943:29:3"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":925,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"4986:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":926,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"4994:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4986:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5004:31:3","subExpression":{"arguments":[{"id":929,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"5022:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":930,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"5028:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":928,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":906,"src":"5005:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5005:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4986:49:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":940,"nodeType":"IfStatement","src":"4982:129:3","trueBody":{"id":939,"nodeType":"Block","src":"5037:74:3","statements":[{"errorCall":{"arguments":[{"id":935,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"5087:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":936,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"5095:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":934,"name":"ERC1155MissingApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"5058:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5058:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":938,"nodeType":"RevertStatement","src":"5051:49:3"}]}},{"expression":{"arguments":[{"id":942,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"5138:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":943,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"5144:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":944,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"5148:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":945,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"5152:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":946,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"5159:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":941,"name":"_safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"5120:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes memory)"}},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5120:44:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":948,"nodeType":"ExpressionStatement","src":"5120:44:3"}]},"documentation":{"id":907,"nodeType":"StructuredDocumentation","src":"4759:56:3","text":" @dev See {IERC1155-safeTransferFrom}."},"functionSelector":"f242432a","id":950,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4829:16:3","nodeType":"FunctionDefinition","parameters":{"id":918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":909,"mutability":"mutable","name":"from","nameLocation":"4854:4:3","nodeType":"VariableDeclaration","scope":950,"src":"4846:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":908,"name":"address","nodeType":"ElementaryTypeName","src":"4846:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":911,"mutability":"mutable","name":"to","nameLocation":"4868:2:3","nodeType":"VariableDeclaration","scope":950,"src":"4860:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":910,"name":"address","nodeType":"ElementaryTypeName","src":"4860:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":913,"mutability":"mutable","name":"id","nameLocation":"4880:2:3","nodeType":"VariableDeclaration","scope":950,"src":"4872:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":912,"name":"uint256","nodeType":"ElementaryTypeName","src":"4872:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":915,"mutability":"mutable","name":"value","nameLocation":"4892:5:3","nodeType":"VariableDeclaration","scope":950,"src":"4884:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":914,"name":"uint256","nodeType":"ElementaryTypeName","src":"4884:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":917,"mutability":"mutable","name":"data","nameLocation":"4912:4:3","nodeType":"VariableDeclaration","scope":950,"src":"4899:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":916,"name":"bytes","nodeType":"ElementaryTypeName","src":"4899:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4845:72:3"},"returnParameters":{"id":919,"nodeType":"ParameterList","parameters":[],"src":"4933:0:3"},"scope":1761,"src":"4820:351:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2670],"body":{"id":995,"nodeType":"Block","src":"5427:245:3","statements":[{"assignments":[967],"declarations":[{"constant":false,"id":967,"mutability":"mutable","name":"sender","nameLocation":"5445:6:3","nodeType":"VariableDeclaration","scope":995,"src":"5437:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":966,"name":"address","nodeType":"ElementaryTypeName","src":"5437:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":970,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":968,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"5454:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5454:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5437:29:3"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":971,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"5480:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":972,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"5488:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5480:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5498:31:3","subExpression":{"arguments":[{"id":975,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"5516:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":976,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"5522:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":974,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":906,"src":"5499:16:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5499:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5480:49:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":986,"nodeType":"IfStatement","src":"5476:129:3","trueBody":{"id":985,"nodeType":"Block","src":"5531:74:3","statements":[{"errorCall":{"arguments":[{"id":981,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"5581:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":982,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"5589:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":980,"name":"ERC1155MissingApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"5552:28:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5552:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":984,"nodeType":"RevertStatement","src":"5545:49:3"}]}},{"expression":{"arguments":[{"id":988,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"5637:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":989,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":955,"src":"5643:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":990,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"5647:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":991,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"5652:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":992,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"5660:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":987,"name":"_safeBatchTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"5614:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5614:51:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":994,"nodeType":"ExpressionStatement","src":"5614:51:3"}]},"documentation":{"id":951,"nodeType":"StructuredDocumentation","src":"5177:61:3","text":" @dev See {IERC1155-safeBatchTransferFrom}."},"functionSelector":"2eb2c2d6","id":996,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"5252:21:3","nodeType":"FunctionDefinition","parameters":{"id":964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":953,"mutability":"mutable","name":"from","nameLocation":"5291:4:3","nodeType":"VariableDeclaration","scope":996,"src":"5283:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":952,"name":"address","nodeType":"ElementaryTypeName","src":"5283:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":955,"mutability":"mutable","name":"to","nameLocation":"5313:2:3","nodeType":"VariableDeclaration","scope":996,"src":"5305:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":954,"name":"address","nodeType":"ElementaryTypeName","src":"5305:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":958,"mutability":"mutable","name":"ids","nameLocation":"5342:3:3","nodeType":"VariableDeclaration","scope":996,"src":"5325:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":956,"name":"uint256","nodeType":"ElementaryTypeName","src":"5325:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":957,"nodeType":"ArrayTypeName","src":"5325:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":961,"mutability":"mutable","name":"values","nameLocation":"5372:6:3","nodeType":"VariableDeclaration","scope":996,"src":"5355:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":959,"name":"uint256","nodeType":"ElementaryTypeName","src":"5355:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":960,"nodeType":"ArrayTypeName","src":"5355:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":963,"mutability":"mutable","name":"data","nameLocation":"5401:4:3","nodeType":"VariableDeclaration","scope":996,"src":"5388:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":962,"name":"bytes","nodeType":"ElementaryTypeName","src":"5388:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5273:138:3"},"returnParameters":{"id":965,"nodeType":"ParameterList","parameters":[],"src":"5427:0:3"},"scope":1761,"src":"5243:429:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1159,"nodeType":"Block","src":"6480:1237:3","statements":[{"assignments":[1012],"declarations":[{"constant":false,"id":1012,"mutability":"mutable","name":"$","nameLocation":"6513:1:3","nodeType":"VariableDeclaration","scope":1159,"src":"6490:24:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage"},"typeName":{"id":1011,"nodeType":"UserDefinedTypeName","pathNode":{"id":1010,"name":"ERC1155Storage","nameLocations":["6490:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":687,"src":"6490:14:3"},"referencedDeclaration":687,"src":"6490:14:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage"}},"visibility":"internal"}],"id":1015,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1013,"name":"_getERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"6517:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC1155Storage_$687_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Upgradeable.ERC1155Storage storage pointer)"}},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6517:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"6490:47:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1016,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"6551:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6555:6:3","memberName":"length","nodeType":"MemberAccess","src":"6551:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1018,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"6565:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6572:6:3","memberName":"length","nodeType":"MemberAccess","src":"6565:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6551:27:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1029,"nodeType":"IfStatement","src":"6547:117:3","trueBody":{"id":1028,"nodeType":"Block","src":"6580:84:3","statements":[{"errorCall":{"arguments":[{"expression":{"id":1022,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"6627:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6631:6:3","memberName":"length","nodeType":"MemberAccess","src":"6627:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1024,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"6639:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6646:6:3","memberName":"length","nodeType":"MemberAccess","src":"6639:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1021,"name":"ERC1155InvalidArrayLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2234,"src":"6601:25:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6601:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1027,"nodeType":"RevertStatement","src":"6594:59:3"}]}},{"assignments":[1031],"declarations":[{"constant":false,"id":1031,"mutability":"mutable","name":"operator","nameLocation":"6682:8:3","nodeType":"VariableDeclaration","scope":1159,"src":"6674:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1030,"name":"address","nodeType":"ElementaryTypeName","src":"6674:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1034,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1032,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"6693:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6693:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6674:31:3"},{"body":{"id":1120,"nodeType":"Block","src":"6757:656:3","statements":[{"assignments":[1047],"declarations":[{"constant":false,"id":1047,"mutability":"mutable","name":"id","nameLocation":"6779:2:3","nodeType":"VariableDeclaration","scope":1120,"src":"6771:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1046,"name":"uint256","nodeType":"ElementaryTypeName","src":"6771:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1052,"initialValue":{"arguments":[{"id":1050,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"6807:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1048,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"6784:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6788:18:3","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":3405,"src":"6784:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256[] memory,uint256) pure returns (uint256)"}},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6784:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6771:38:3"},{"assignments":[1054],"declarations":[{"constant":false,"id":1054,"mutability":"mutable","name":"value","nameLocation":"6831:5:3","nodeType":"VariableDeclaration","scope":1120,"src":"6823:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1053,"name":"uint256","nodeType":"ElementaryTypeName","src":"6823:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1059,"initialValue":{"arguments":[{"id":1057,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"6865:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1055,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"6839:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6846:18:3","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":3405,"src":"6839:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256[] memory,uint256) pure returns (uint256)"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6839:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6823:44:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1060,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"6886:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6902:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1062,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6894:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1061,"name":"address","nodeType":"ElementaryTypeName","src":"6894:7:3","typeDescriptions":{}}},"id":1064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6894:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6886:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1101,"nodeType":"IfStatement","src":"6882:424:3","trueBody":{"id":1100,"nodeType":"Block","src":"6906:400:3","statements":[{"assignments":[1067],"declarations":[{"constant":false,"id":1067,"mutability":"mutable","name":"fromBalance","nameLocation":"6932:11:3","nodeType":"VariableDeclaration","scope":1100,"src":"6924:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1066,"name":"uint256","nodeType":"ElementaryTypeName","src":"6924:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1074,"initialValue":{"baseExpression":{"baseExpression":{"expression":{"id":1068,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"6946:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage storage pointer"}},"id":1069,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6948:9:3","memberName":"_balances","nodeType":"MemberAccess","referencedDeclaration":678,"src":"6946:11:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1071,"indexExpression":{"id":1070,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"6958:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6946:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1073,"indexExpression":{"id":1072,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"6962:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6946:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6924:43:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1075,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"6989:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1076,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"7003:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6989:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1086,"nodeType":"IfStatement","src":"6985:129:3","trueBody":{"id":1085,"nodeType":"Block","src":"7010:104:3","statements":[{"errorCall":{"arguments":[{"id":1079,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"7066:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1080,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"7072:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1081,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"7085:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1082,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"7092:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1078,"name":"ERC1155InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2200,"src":"7039:26:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256) pure"}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7039:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1084,"nodeType":"RevertStatement","src":"7032:63:3"}]}},{"id":1099,"nodeType":"UncheckedBlock","src":"7131:161:3","statements":[{"expression":{"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":1087,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"7230:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage storage pointer"}},"id":1091,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7232:9:3","memberName":"_balances","nodeType":"MemberAccess","referencedDeclaration":678,"src":"7230:11:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1092,"indexExpression":{"id":1089,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"7242:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7230:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1093,"indexExpression":{"id":1090,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"7246:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7230:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1094,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"7254:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1095,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"7268:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7254:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7230:43:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1098,"nodeType":"ExpressionStatement","src":"7230:43:3"}]}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1102,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"7324:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7330:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1103,"name":"address","nodeType":"ElementaryTypeName","src":"7330:7:3","typeDescriptions":{}}},"id":1106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7330:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7324:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1119,"nodeType":"IfStatement","src":"7320:83:3","trueBody":{"id":1118,"nodeType":"Block","src":"7342:61:3","statements":[{"expression":{"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":1108,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"7360:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage storage pointer"}},"id":1112,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7362:9:3","memberName":"_balances","nodeType":"MemberAccess","referencedDeclaration":678,"src":"7360:11:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1113,"indexExpression":{"id":1110,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"7372:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7360:15:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1114,"indexExpression":{"id":1111,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"7376:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7360:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1115,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"7383:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7360:28:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1117,"nodeType":"ExpressionStatement","src":"7360:28:3"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1039,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"6736:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1040,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"6740:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6744:6:3","memberName":"length","nodeType":"MemberAccess","src":"6740:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6736:14:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1121,"initializationExpression":{"assignments":[1036],"declarations":[{"constant":false,"id":1036,"mutability":"mutable","name":"i","nameLocation":"6729:1:3","nodeType":"VariableDeclaration","scope":1121,"src":"6721:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1035,"name":"uint256","nodeType":"ElementaryTypeName","src":"6721:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1038,"initialValue":{"hexValue":"30","id":1037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6733:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6721:13:3"},"loopExpression":{"expression":{"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"6752:3:3","subExpression":{"id":1043,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"6754:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1045,"nodeType":"ExpressionStatement","src":"6752:3:3"},"nodeType":"ForStatement","src":"6716:697:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1122,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"7427:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7431:6:3","memberName":"length","nodeType":"MemberAccess","src":"7427:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7441:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7427:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1157,"nodeType":"Block","src":"7635:76:3","statements":[{"eventCall":{"arguments":[{"id":1150,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"7668:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1151,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"7678:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1152,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"7684:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1153,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"7688:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1154,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"7693:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1149,"name":"TransferBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"7654:13:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory)"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7654:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1156,"nodeType":"EmitStatement","src":"7649:51:3"}]},"id":1158,"nodeType":"IfStatement","src":"7423:288:3","trueBody":{"id":1148,"nodeType":"Block","src":"7444:185:3","statements":[{"assignments":[1127],"declarations":[{"constant":false,"id":1127,"mutability":"mutable","name":"id","nameLocation":"7466:2:3","nodeType":"VariableDeclaration","scope":1148,"src":"7458:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1126,"name":"uint256","nodeType":"ElementaryTypeName","src":"7458:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1132,"initialValue":{"arguments":[{"hexValue":"30","id":1130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7494:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1128,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"7471:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7475:18:3","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":3405,"src":"7471:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256[] memory,uint256) pure returns (uint256)"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7471:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7458:38:3"},{"assignments":[1134],"declarations":[{"constant":false,"id":1134,"mutability":"mutable","name":"value","nameLocation":"7518:5:3","nodeType":"VariableDeclaration","scope":1148,"src":"7510:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1133,"name":"uint256","nodeType":"ElementaryTypeName","src":"7510:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1139,"initialValue":{"arguments":[{"hexValue":"30","id":1137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7552:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1135,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"7526:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7533:18:3","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":3405,"src":"7526:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256[] memory,uint256) pure returns (uint256)"}},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7526:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7510:44:3"},{"eventCall":{"arguments":[{"id":1141,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"7588:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1142,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"7598:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1143,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"7604:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1144,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"7608:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1145,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"7612:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1140,"name":"TransferSingle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"7573:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256)"}},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7573:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1147,"nodeType":"EmitStatement","src":"7568:50:3"}]}}]},"documentation":{"id":997,"nodeType":"StructuredDocumentation","src":"5678:690:3","text":" @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\n (or `to`) is the zero address.\n Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\n Requirements:\n - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\n   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\n - `ids` and `values` must have the same length.\n NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead."},"id":1160,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"6382:7:3","nodeType":"FunctionDefinition","parameters":{"id":1008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":999,"mutability":"mutable","name":"from","nameLocation":"6398:4:3","nodeType":"VariableDeclaration","scope":1160,"src":"6390:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":998,"name":"address","nodeType":"ElementaryTypeName","src":"6390:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1001,"mutability":"mutable","name":"to","nameLocation":"6412:2:3","nodeType":"VariableDeclaration","scope":1160,"src":"6404:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1000,"name":"address","nodeType":"ElementaryTypeName","src":"6404:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1004,"mutability":"mutable","name":"ids","nameLocation":"6433:3:3","nodeType":"VariableDeclaration","scope":1160,"src":"6416:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1002,"name":"uint256","nodeType":"ElementaryTypeName","src":"6416:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1003,"nodeType":"ArrayTypeName","src":"6416:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1007,"mutability":"mutable","name":"values","nameLocation":"6455:6:3","nodeType":"VariableDeclaration","scope":1160,"src":"6438:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1005,"name":"uint256","nodeType":"ElementaryTypeName","src":"6438:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1006,"nodeType":"ArrayTypeName","src":"6438:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6389:73:3"},"returnParameters":{"id":1009,"nodeType":"ParameterList","parameters":[],"src":"6480:0:3"},"scope":1761,"src":"6373:1344:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1235,"nodeType":"Block","src":"8487:499:3","statements":[{"expression":{"arguments":[{"id":1177,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"8505:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1178,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"8511:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1179,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"8515:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1180,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8520:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1176,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"8497:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory)"}},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8497:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1182,"nodeType":"ExpressionStatement","src":"8497:30:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1183,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"8541:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8555:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1185,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8547:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1184,"name":"address","nodeType":"ElementaryTypeName","src":"8547:7:3","typeDescriptions":{}}},"id":1187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8547:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8541:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1234,"nodeType":"IfStatement","src":"8537:443:3","trueBody":{"id":1233,"nodeType":"Block","src":"8559:421:3","statements":[{"assignments":[1190],"declarations":[{"constant":false,"id":1190,"mutability":"mutable","name":"operator","nameLocation":"8581:8:3","nodeType":"VariableDeclaration","scope":1233,"src":"8573:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1189,"name":"address","nodeType":"ElementaryTypeName","src":"8573:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1193,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1191,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"8592:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8592:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8573:31:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1194,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"8622:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8626:6:3","memberName":"length","nodeType":"MemberAccess","src":"8622:10:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8622:15:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1231,"nodeType":"Block","src":"8863:107:3","statements":[{"expression":{"arguments":[{"id":1223,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"8917:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1224,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"8927:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1225,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"8933:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1226,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"8937:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1227,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8942:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1228,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"8950:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1222,"name":"_doSafeBatchTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1744,"src":"8881:35:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8881:74:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1230,"nodeType":"ExpressionStatement","src":"8881:74:3"}]},"id":1232,"nodeType":"IfStatement","src":"8618:352:3","trueBody":{"id":1221,"nodeType":"Block","src":"8639:218:3","statements":[{"assignments":[1199],"declarations":[{"constant":false,"id":1199,"mutability":"mutable","name":"id","nameLocation":"8665:2:3","nodeType":"VariableDeclaration","scope":1221,"src":"8657:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1198,"name":"uint256","nodeType":"ElementaryTypeName","src":"8657:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1204,"initialValue":{"arguments":[{"hexValue":"30","id":1202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8693:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1200,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"8670:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8674:18:3","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":3405,"src":"8670:22:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256[] memory,uint256) pure returns (uint256)"}},"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8670:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8657:38:3"},{"assignments":[1206],"declarations":[{"constant":false,"id":1206,"mutability":"mutable","name":"value","nameLocation":"8721:5:3","nodeType":"VariableDeclaration","scope":1221,"src":"8713:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1205,"name":"uint256","nodeType":"ElementaryTypeName","src":"8713:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1211,"initialValue":{"arguments":[{"hexValue":"30","id":1209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8755:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1207,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"8729:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8736:18:3","memberName":"unsafeMemoryAccess","nodeType":"MemberAccess","referencedDeclaration":3405,"src":"8729:25:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$_t_uint256_$attached_to$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256[] memory,uint256) pure returns (uint256)"}},"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8729:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8713:44:3"},{"expression":{"arguments":[{"id":1213,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"8806:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1214,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"8816:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1215,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"8822:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1216,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1199,"src":"8826:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1217,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"8830:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1218,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"8837:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1212,"name":"_doSafeTransferAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"8775:30:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,uint256,bytes memory)"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8775:67:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1220,"nodeType":"ExpressionStatement","src":"8775:67:3"}]}}]}}]},"documentation":{"id":1161,"nodeType":"StructuredDocumentation","src":"7723:568:3","text":" @dev Version of {_update} that performs the token acceptance check by calling\n {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\n contains code (eg. is a smart contract at the moment of execution).\n IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\n update to the contract state after this function would break the check-effect-interaction pattern. Consider\n overriding {_update} instead."},"id":1236,"implemented":true,"kind":"function","modifiers":[],"name":"_updateWithAcceptanceCheck","nameLocation":"8305:26:3","nodeType":"FunctionDefinition","parameters":{"id":1174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1163,"mutability":"mutable","name":"from","nameLocation":"8349:4:3","nodeType":"VariableDeclaration","scope":1236,"src":"8341:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1162,"name":"address","nodeType":"ElementaryTypeName","src":"8341:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1165,"mutability":"mutable","name":"to","nameLocation":"8371:2:3","nodeType":"VariableDeclaration","scope":1236,"src":"8363:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1164,"name":"address","nodeType":"ElementaryTypeName","src":"8363:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1168,"mutability":"mutable","name":"ids","nameLocation":"8400:3:3","nodeType":"VariableDeclaration","scope":1236,"src":"8383:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1166,"name":"uint256","nodeType":"ElementaryTypeName","src":"8383:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1167,"nodeType":"ArrayTypeName","src":"8383:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1171,"mutability":"mutable","name":"values","nameLocation":"8430:6:3","nodeType":"VariableDeclaration","scope":1236,"src":"8413:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1169,"name":"uint256","nodeType":"ElementaryTypeName","src":"8413:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1170,"nodeType":"ArrayTypeName","src":"8413:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1173,"mutability":"mutable","name":"data","nameLocation":"8459:4:3","nodeType":"VariableDeclaration","scope":1236,"src":"8446:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1172,"name":"bytes","nodeType":"ElementaryTypeName","src":"8446:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8331:138:3"},"returnParameters":{"id":1175,"nodeType":"ParameterList","parameters":[],"src":"8487:0:3"},"scope":1761,"src":"8296:690:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1301,"nodeType":"Block","src":"9551:355:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1250,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"9565:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9579:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1252,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9571:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1251,"name":"address","nodeType":"ElementaryTypeName","src":"9571:7:3","typeDescriptions":{}}},"id":1254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9571:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9565:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1264,"nodeType":"IfStatement","src":"9561:88:3","trueBody":{"id":1263,"nodeType":"Block","src":"9583:66:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9635:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9627:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1257,"name":"address","nodeType":"ElementaryTypeName","src":"9627:7:3","typeDescriptions":{}}},"id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9627:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1256,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"9604:22:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9604:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1262,"nodeType":"RevertStatement","src":"9597:41:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1265,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"9662:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9678:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9670:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1266,"name":"address","nodeType":"ElementaryTypeName","src":"9670:7:3","typeDescriptions":{}}},"id":1269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9670:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9662:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1279,"nodeType":"IfStatement","src":"9658:88:3","trueBody":{"id":1278,"nodeType":"Block","src":"9682:64:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9732:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9724:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1272,"name":"address","nodeType":"ElementaryTypeName","src":"9724:7:3","typeDescriptions":{}}},"id":1275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9724:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1271,"name":"ERC1155InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"9703:20:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9703:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1277,"nodeType":"RevertStatement","src":"9696:39:3"}]}},{"assignments":[1284,1287],"declarations":[{"constant":false,"id":1284,"mutability":"mutable","name":"ids","nameLocation":"9773:3:3","nodeType":"VariableDeclaration","scope":1301,"src":"9756:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1282,"name":"uint256","nodeType":"ElementaryTypeName","src":"9756:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1283,"nodeType":"ArrayTypeName","src":"9756:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1287,"mutability":"mutable","name":"values","nameLocation":"9795:6:3","nodeType":"VariableDeclaration","scope":1301,"src":"9778:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1285,"name":"uint256","nodeType":"ElementaryTypeName","src":"9778:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1286,"nodeType":"ArrayTypeName","src":"9778:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1292,"initialValue":{"arguments":[{"id":1289,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"9824:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1290,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"9828:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1288,"name":"_asSingletonArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"9805:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (uint256[] memory,uint256[] memory)"}},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9805:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(uint256[] memory,uint256[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"9755:79:3"},{"expression":{"arguments":[{"id":1294,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"9871:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1295,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"9877:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1296,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1284,"src":"9881:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1297,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"9886:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1298,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1247,"src":"9894:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1293,"name":"_updateWithAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"9844:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9844:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1300,"nodeType":"ExpressionStatement","src":"9844:55:3"}]},"documentation":{"id":1237,"nodeType":"StructuredDocumentation","src":"8992:446:3","text":" @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - `from` must have a balance of tokens of type `id` of at least `value` amount.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":1302,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransferFrom","nameLocation":"9452:17:3","nodeType":"FunctionDefinition","parameters":{"id":1248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1239,"mutability":"mutable","name":"from","nameLocation":"9478:4:3","nodeType":"VariableDeclaration","scope":1302,"src":"9470:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1238,"name":"address","nodeType":"ElementaryTypeName","src":"9470:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1241,"mutability":"mutable","name":"to","nameLocation":"9492:2:3","nodeType":"VariableDeclaration","scope":1302,"src":"9484:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1240,"name":"address","nodeType":"ElementaryTypeName","src":"9484:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1243,"mutability":"mutable","name":"id","nameLocation":"9504:2:3","nodeType":"VariableDeclaration","scope":1302,"src":"9496:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1242,"name":"uint256","nodeType":"ElementaryTypeName","src":"9496:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1245,"mutability":"mutable","name":"value","nameLocation":"9516:5:3","nodeType":"VariableDeclaration","scope":1302,"src":"9508:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1244,"name":"uint256","nodeType":"ElementaryTypeName","src":"9508:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1247,"mutability":"mutable","name":"data","nameLocation":"9536:4:3","nodeType":"VariableDeclaration","scope":1302,"src":"9523:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1246,"name":"bytes","nodeType":"ElementaryTypeName","src":"9523:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9469:72:3"},"returnParameters":{"id":1249,"nodeType":"ParameterList","parameters":[],"src":"9551:0:3"},"scope":1761,"src":"9443:463:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1356,"nodeType":"Block","src":"10486:266:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1318,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"10500:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10506:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1319,"name":"address","nodeType":"ElementaryTypeName","src":"10506:7:3","typeDescriptions":{}}},"id":1322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10506:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10500:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1332,"nodeType":"IfStatement","src":"10496:88:3","trueBody":{"id":1331,"nodeType":"Block","src":"10518:66:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10570:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1326,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10562:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1325,"name":"address","nodeType":"ElementaryTypeName","src":"10562:7:3","typeDescriptions":{}}},"id":1328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10562:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1324,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"10539:22:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10539:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1330,"nodeType":"RevertStatement","src":"10532:41:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1333,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"10597:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10613:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1335,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10605:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1334,"name":"address","nodeType":"ElementaryTypeName","src":"10605:7:3","typeDescriptions":{}}},"id":1337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10605:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10597:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1347,"nodeType":"IfStatement","src":"10593:88:3","trueBody":{"id":1346,"nodeType":"Block","src":"10617:64:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10667:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1341,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10659:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1340,"name":"address","nodeType":"ElementaryTypeName","src":"10659:7:3","typeDescriptions":{}}},"id":1343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10659:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1339,"name":"ERC1155InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"10638:20:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10638:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1345,"nodeType":"RevertStatement","src":"10631:39:3"}]}},{"expression":{"arguments":[{"id":1349,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"10717:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1350,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"10723:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1351,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"10727:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1352,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"10732:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1353,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"10740:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1348,"name":"_updateWithAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"10690:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10690:55:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1355,"nodeType":"ExpressionStatement","src":"10690:55:3"}]},"documentation":{"id":1303,"nodeType":"StructuredDocumentation","src":"9912:390:3","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n Emits a {TransferBatch} event.\n Requirements:\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value.\n - `ids` and `values` must have the same length."},"id":1357,"implemented":true,"kind":"function","modifiers":[],"name":"_safeBatchTransferFrom","nameLocation":"10316:22:3","nodeType":"FunctionDefinition","parameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1305,"mutability":"mutable","name":"from","nameLocation":"10356:4:3","nodeType":"VariableDeclaration","scope":1357,"src":"10348:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1304,"name":"address","nodeType":"ElementaryTypeName","src":"10348:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1307,"mutability":"mutable","name":"to","nameLocation":"10378:2:3","nodeType":"VariableDeclaration","scope":1357,"src":"10370:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1306,"name":"address","nodeType":"ElementaryTypeName","src":"10370:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1310,"mutability":"mutable","name":"ids","nameLocation":"10407:3:3","nodeType":"VariableDeclaration","scope":1357,"src":"10390:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1308,"name":"uint256","nodeType":"ElementaryTypeName","src":"10390:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1309,"nodeType":"ArrayTypeName","src":"10390:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1313,"mutability":"mutable","name":"values","nameLocation":"10437:6:3","nodeType":"VariableDeclaration","scope":1357,"src":"10420:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1311,"name":"uint256","nodeType":"ElementaryTypeName","src":"10420:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1312,"nodeType":"ArrayTypeName","src":"10420:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1315,"mutability":"mutable","name":"data","nameLocation":"10466:4:3","nodeType":"VariableDeclaration","scope":1357,"src":"10453:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1314,"name":"bytes","nodeType":"ElementaryTypeName","src":"10453:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10338:138:3"},"returnParameters":{"id":1317,"nodeType":"ParameterList","parameters":[],"src":"10486:0:3"},"scope":1761,"src":"10307:445:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1375,"nodeType":"Block","src":"11630:89:3","statements":[{"assignments":[1365],"declarations":[{"constant":false,"id":1365,"mutability":"mutable","name":"$","nameLocation":"11663:1:3","nodeType":"VariableDeclaration","scope":1375,"src":"11640:24:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage"},"typeName":{"id":1364,"nodeType":"UserDefinedTypeName","pathNode":{"id":1363,"name":"ERC1155Storage","nameLocations":["11640:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":687,"src":"11640:14:3"},"referencedDeclaration":687,"src":"11640:14:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage"}},"visibility":"internal"}],"id":1368,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1366,"name":"_getERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"11667:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC1155Storage_$687_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Upgradeable.ERC1155Storage storage pointer)"}},"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11667:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"11640:47:3"},{"expression":{"id":1373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1369,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1365,"src":"11697:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage storage pointer"}},"id":1371,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11699:4:3","memberName":"_uri","nodeType":"MemberAccess","referencedDeclaration":686,"src":"11697:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1372,"name":"newuri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"11706:6:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"11697:15:3","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1374,"nodeType":"ExpressionStatement","src":"11697:15:3"}]},"documentation":{"id":1358,"nodeType":"StructuredDocumentation","src":"10758:811:3","text":" @dev Sets a new URI for all token types, by relying on the token type ID\n substitution mechanism\n https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n URI or any of the values in the JSON file at said URI will be replaced by\n clients with the token type ID.\n For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n interpreted by clients as\n `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n for token type ID 0x4cce0.\n See {uri}.\n Because these URIs cannot be meaningfully represented by the {URI} event,\n this function emits no events."},"id":1376,"implemented":true,"kind":"function","modifiers":[],"name":"_setURI","nameLocation":"11583:7:3","nodeType":"FunctionDefinition","parameters":{"id":1361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1360,"mutability":"mutable","name":"newuri","nameLocation":"11605:6:3","nodeType":"VariableDeclaration","scope":1376,"src":"11591:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1359,"name":"string","nodeType":"ElementaryTypeName","src":"11591:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"11590:22:3"},"returnParameters":{"id":1362,"nodeType":"ParameterList","parameters":[],"src":"11630:0:3"},"scope":1761,"src":"11574:145:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1427,"nodeType":"Block","src":"12179:264:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1388,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"12193:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12207:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1390,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12199:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1389,"name":"address","nodeType":"ElementaryTypeName","src":"12199:7:3","typeDescriptions":{}}},"id":1392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12199:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12193:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1402,"nodeType":"IfStatement","src":"12189:88:3","trueBody":{"id":1401,"nodeType":"Block","src":"12211:66:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12263:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12255:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1395,"name":"address","nodeType":"ElementaryTypeName","src":"12255:7:3","typeDescriptions":{}}},"id":1398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12255:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1394,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"12232:22:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12232:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1400,"nodeType":"RevertStatement","src":"12225:41:3"}]}},{"assignments":[1407,1410],"declarations":[{"constant":false,"id":1407,"mutability":"mutable","name":"ids","nameLocation":"12304:3:3","nodeType":"VariableDeclaration","scope":1427,"src":"12287:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1405,"name":"uint256","nodeType":"ElementaryTypeName","src":"12287:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1406,"nodeType":"ArrayTypeName","src":"12287:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1410,"mutability":"mutable","name":"values","nameLocation":"12326:6:3","nodeType":"VariableDeclaration","scope":1427,"src":"12309:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1408,"name":"uint256","nodeType":"ElementaryTypeName","src":"12309:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1409,"nodeType":"ArrayTypeName","src":"12309:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1415,"initialValue":{"arguments":[{"id":1412,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"12355:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1413,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"12359:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1411,"name":"_asSingletonArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"12336:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (uint256[] memory,uint256[] memory)"}},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12336:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(uint256[] memory,uint256[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"12286:79:3"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12410:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12402:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1417,"name":"address","nodeType":"ElementaryTypeName","src":"12402:7:3","typeDescriptions":{}}},"id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12402:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1421,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"12414:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1422,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"12418:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1423,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"12423:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1424,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"12431:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1416,"name":"_updateWithAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"12375:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12375:61:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1426,"nodeType":"ExpressionStatement","src":"12375:61:3"}]},"documentation":{"id":1377,"nodeType":"StructuredDocumentation","src":"11725:367:3","text":" @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"id":1428,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"12106:5:3","nodeType":"FunctionDefinition","parameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1379,"mutability":"mutable","name":"to","nameLocation":"12120:2:3","nodeType":"VariableDeclaration","scope":1428,"src":"12112:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1378,"name":"address","nodeType":"ElementaryTypeName","src":"12112:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1381,"mutability":"mutable","name":"id","nameLocation":"12132:2:3","nodeType":"VariableDeclaration","scope":1428,"src":"12124:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1380,"name":"uint256","nodeType":"ElementaryTypeName","src":"12124:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1383,"mutability":"mutable","name":"value","nameLocation":"12144:5:3","nodeType":"VariableDeclaration","scope":1428,"src":"12136:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1382,"name":"uint256","nodeType":"ElementaryTypeName","src":"12136:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1385,"mutability":"mutable","name":"data","nameLocation":"12164:4:3","nodeType":"VariableDeclaration","scope":1428,"src":"12151:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1384,"name":"bytes","nodeType":"ElementaryTypeName","src":"12151:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12111:58:3"},"returnParameters":{"id":1387,"nodeType":"ParameterList","parameters":[],"src":"12179:0:3"},"scope":1761,"src":"12097:346:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1468,"nodeType":"Block","src":"12981:175:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1442,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"12995:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13009:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13001:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1443,"name":"address","nodeType":"ElementaryTypeName","src":"13001:7:3","typeDescriptions":{}}},"id":1446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13001:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12995:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1456,"nodeType":"IfStatement","src":"12991:88:3","trueBody":{"id":1455,"nodeType":"Block","src":"13013:66:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13065:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1450,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13057:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1449,"name":"address","nodeType":"ElementaryTypeName","src":"13057:7:3","typeDescriptions":{}}},"id":1452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13057:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1448,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"13034:22:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13034:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1454,"nodeType":"RevertStatement","src":"13027:41:3"}]}},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13123:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1459,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13115:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1458,"name":"address","nodeType":"ElementaryTypeName","src":"13115:7:3","typeDescriptions":{}}},"id":1461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13115:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1462,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"13127:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1463,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"13131:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1464,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"13136:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1465,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"13144:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1457,"name":"_updateWithAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"13088:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13088:61:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1467,"nodeType":"ExpressionStatement","src":"13088:61:3"}]},"documentation":{"id":1429,"nodeType":"StructuredDocumentation","src":"12449:420:3","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `values` must have the same length.\n - `to` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"id":1469,"implemented":true,"kind":"function","modifiers":[],"name":"_mintBatch","nameLocation":"12883:10:3","nodeType":"FunctionDefinition","parameters":{"id":1440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1431,"mutability":"mutable","name":"to","nameLocation":"12902:2:3","nodeType":"VariableDeclaration","scope":1469,"src":"12894:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1430,"name":"address","nodeType":"ElementaryTypeName","src":"12894:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1434,"mutability":"mutable","name":"ids","nameLocation":"12923:3:3","nodeType":"VariableDeclaration","scope":1469,"src":"12906:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1432,"name":"uint256","nodeType":"ElementaryTypeName","src":"12906:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1433,"nodeType":"ArrayTypeName","src":"12906:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1437,"mutability":"mutable","name":"values","nameLocation":"12945:6:3","nodeType":"VariableDeclaration","scope":1469,"src":"12928:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1435,"name":"uint256","nodeType":"ElementaryTypeName","src":"12928:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1436,"nodeType":"ArrayTypeName","src":"12928:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1439,"mutability":"mutable","name":"data","nameLocation":"12966:4:3","nodeType":"VariableDeclaration","scope":1469,"src":"12953:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1438,"name":"bytes","nodeType":"ElementaryTypeName","src":"12953:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12893:78:3"},"returnParameters":{"id":1441,"nodeType":"ParameterList","parameters":[],"src":"12981:0:3"},"scope":1761,"src":"12874:282:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1518,"nodeType":"Block","src":"13515:264:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1479,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"13529:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13545:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13537:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1480,"name":"address","nodeType":"ElementaryTypeName","src":"13537:7:3","typeDescriptions":{}}},"id":1483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13537:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13529:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1493,"nodeType":"IfStatement","src":"13525:88:3","trueBody":{"id":1492,"nodeType":"Block","src":"13549:64:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13599:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13591:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1486,"name":"address","nodeType":"ElementaryTypeName","src":"13591:7:3","typeDescriptions":{}}},"id":1489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13591:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1485,"name":"ERC1155InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"13570:20:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13570:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1491,"nodeType":"RevertStatement","src":"13563:39:3"}]}},{"assignments":[1498,1501],"declarations":[{"constant":false,"id":1498,"mutability":"mutable","name":"ids","nameLocation":"13640:3:3","nodeType":"VariableDeclaration","scope":1518,"src":"13623:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1496,"name":"uint256","nodeType":"ElementaryTypeName","src":"13623:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1497,"nodeType":"ArrayTypeName","src":"13623:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1501,"mutability":"mutable","name":"values","nameLocation":"13662:6:3","nodeType":"VariableDeclaration","scope":1518,"src":"13645:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1499,"name":"uint256","nodeType":"ElementaryTypeName","src":"13645:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1500,"nodeType":"ArrayTypeName","src":"13645:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":1506,"initialValue":{"arguments":[{"id":1503,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"13691:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1504,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"13695:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1502,"name":"_asSingletonArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"13672:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (uint256[] memory,uint256[] memory)"}},"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13672:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(uint256[] memory,uint256[] memory)"}},"nodeType":"VariableDeclarationStatement","src":"13622:79:3"},{"expression":{"arguments":[{"id":1508,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"13738:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13752:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1510,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13744:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1509,"name":"address","nodeType":"ElementaryTypeName","src":"13744:7:3","typeDescriptions":{}}},"id":1512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13744:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1513,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"13756:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1514,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"13761:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13769:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1507,"name":"_updateWithAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"13711:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13711:61:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1517,"nodeType":"ExpressionStatement","src":"13711:61:3"}]},"documentation":{"id":1470,"nodeType":"StructuredDocumentation","src":"13162:283:3","text":" @dev Destroys a `value` amount of tokens of type `id` from `from`\n Emits a {TransferSingle} event.\n Requirements:\n - `from` cannot be the zero address.\n - `from` must have at least `value` amount of tokens of type `id`."},"id":1519,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"13459:5:3","nodeType":"FunctionDefinition","parameters":{"id":1477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1472,"mutability":"mutable","name":"from","nameLocation":"13473:4:3","nodeType":"VariableDeclaration","scope":1519,"src":"13465:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1471,"name":"address","nodeType":"ElementaryTypeName","src":"13465:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1474,"mutability":"mutable","name":"id","nameLocation":"13487:2:3","nodeType":"VariableDeclaration","scope":1519,"src":"13479:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1473,"name":"uint256","nodeType":"ElementaryTypeName","src":"13479:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1476,"mutability":"mutable","name":"value","nameLocation":"13499:5:3","nodeType":"VariableDeclaration","scope":1519,"src":"13491:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1475,"name":"uint256","nodeType":"ElementaryTypeName","src":"13491:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13464:41:3"},"returnParameters":{"id":1478,"nodeType":"ParameterList","parameters":[],"src":"13515:0:3"},"scope":1761,"src":"13450:329:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1557,"nodeType":"Block","src":"14225:175:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1531,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"14239:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14255:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14247:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1532,"name":"address","nodeType":"ElementaryTypeName","src":"14247:7:3","typeDescriptions":{}}},"id":1535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14247:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14239:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1545,"nodeType":"IfStatement","src":"14235:88:3","trueBody":{"id":1544,"nodeType":"Block","src":"14259:64:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14309:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1539,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14301:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1538,"name":"address","nodeType":"ElementaryTypeName","src":"14301:7:3","typeDescriptions":{}}},"id":1541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14301:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1537,"name":"ERC1155InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"14280:20:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14280:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1543,"nodeType":"RevertStatement","src":"14273:39:3"}]}},{"expression":{"arguments":[{"id":1547,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"14359:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14373:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14365:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1548,"name":"address","nodeType":"ElementaryTypeName","src":"14365:7:3","typeDescriptions":{}}},"id":1551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14365:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1552,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"14377:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1553,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"14382:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"","id":1554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14390:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1546,"name":"_updateWithAcceptanceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"14332:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14332:61:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1556,"nodeType":"ExpressionStatement","src":"14332:61:3"}]},"documentation":{"id":1520,"nodeType":"StructuredDocumentation","src":"13785:345:3","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n Emits a {TransferBatch} event.\n Requirements:\n - `from` cannot be the zero address.\n - `from` must have at least `value` amount of tokens of type `id`.\n - `ids` and `values` must have the same length."},"id":1558,"implemented":true,"kind":"function","modifiers":[],"name":"_burnBatch","nameLocation":"14144:10:3","nodeType":"FunctionDefinition","parameters":{"id":1529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1522,"mutability":"mutable","name":"from","nameLocation":"14163:4:3","nodeType":"VariableDeclaration","scope":1558,"src":"14155:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1521,"name":"address","nodeType":"ElementaryTypeName","src":"14155:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1525,"mutability":"mutable","name":"ids","nameLocation":"14186:3:3","nodeType":"VariableDeclaration","scope":1558,"src":"14169:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1523,"name":"uint256","nodeType":"ElementaryTypeName","src":"14169:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1524,"nodeType":"ArrayTypeName","src":"14169:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1528,"mutability":"mutable","name":"values","nameLocation":"14208:6:3","nodeType":"VariableDeclaration","scope":1558,"src":"14191:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1526,"name":"uint256","nodeType":"ElementaryTypeName","src":"14191:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1527,"nodeType":"ArrayTypeName","src":"14191:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"14154:61:3"},"returnParameters":{"id":1530,"nodeType":"ParameterList","parameters":[],"src":"14225:0:3"},"scope":1761,"src":"14135:265:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1605,"nodeType":"Block","src":"14712:281:3","statements":[{"assignments":[1570],"declarations":[{"constant":false,"id":1570,"mutability":"mutable","name":"$","nameLocation":"14745:1:3","nodeType":"VariableDeclaration","scope":1605,"src":"14722:24:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage"},"typeName":{"id":1569,"nodeType":"UserDefinedTypeName","pathNode":{"id":1568,"name":"ERC1155Storage","nameLocations":["14722:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":687,"src":"14722:14:3"},"referencedDeclaration":687,"src":"14722:14:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage"}},"visibility":"internal"}],"id":1573,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1571,"name":"_getERC1155Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"14749:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC1155Storage_$687_storage_ptr_$","typeString":"function () pure returns (struct ERC1155Upgradeable.ERC1155Storage storage pointer)"}},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14749:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"14722:47:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1574,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"14783:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14803:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1576,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14795:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1575,"name":"address","nodeType":"ElementaryTypeName","src":"14795:7:3","typeDescriptions":{}}},"id":1578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14795:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14783:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1588,"nodeType":"IfStatement","src":"14779:94:3","trueBody":{"id":1587,"nodeType":"Block","src":"14807:66:3","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14859:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14851:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1581,"name":"address","nodeType":"ElementaryTypeName","src":"14851:7:3","typeDescriptions":{}}},"id":1584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14851:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1580,"name":"ERC1155InvalidOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"14828:22:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14828:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1586,"nodeType":"RevertStatement","src":"14821:41:3"}]}},{"expression":{"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":1589,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"14882:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155Storage_$687_storage_ptr","typeString":"struct ERC1155Upgradeable.ERC1155Storage storage pointer"}},"id":1593,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14884:18:3","memberName":"_operatorApprovals","nodeType":"MemberAccess","referencedDeclaration":684,"src":"14882:20:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1594,"indexExpression":{"id":1591,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1561,"src":"14903:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14882:27:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1595,"indexExpression":{"id":1592,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"14910:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14882:37:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1596,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"14922:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14882:48:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1598,"nodeType":"ExpressionStatement","src":"14882:48:3"},{"eventCall":{"arguments":[{"id":1600,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1561,"src":"14960:5:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1601,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"14967:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1602,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"14977:8:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1599,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2592,"src":"14945:14:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14945:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1604,"nodeType":"EmitStatement","src":"14940:46:3"}]},"documentation":{"id":1559,"nodeType":"StructuredDocumentation","src":"14406:208:3","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event.\n Requirements:\n - `operator` cannot be the zero address."},"id":1606,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"14628:18:3","nodeType":"FunctionDefinition","parameters":{"id":1566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1561,"mutability":"mutable","name":"owner","nameLocation":"14655:5:3","nodeType":"VariableDeclaration","scope":1606,"src":"14647:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1560,"name":"address","nodeType":"ElementaryTypeName","src":"14647:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1563,"mutability":"mutable","name":"operator","nameLocation":"14670:8:3","nodeType":"VariableDeclaration","scope":1606,"src":"14662:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1562,"name":"address","nodeType":"ElementaryTypeName","src":"14662:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1565,"mutability":"mutable","name":"approved","nameLocation":"14685:8:3","nodeType":"VariableDeclaration","scope":1606,"src":"14680:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1564,"name":"bool","nodeType":"ElementaryTypeName","src":"14680:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14646:48:3"},"returnParameters":{"id":1567,"nodeType":"ParameterList","parameters":[],"src":"14712:0:3"},"scope":1761,"src":"14619:374:3","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1673,"nodeType":"Block","src":"15363:782:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1622,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"15377:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15380:4:3","memberName":"code","nodeType":"MemberAccess","src":"15377:7:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15385:6:3","memberName":"length","nodeType":"MemberAccess","src":"15377:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15394:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15377:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1672,"nodeType":"IfStatement","src":"15373:766:3","trueBody":{"id":1671,"nodeType":"Block","src":"15397:742:3","statements":[{"clauses":[{"block":{"id":1651,"nodeType":"Block","src":"15513:206:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1640,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1638,"src":"15535:8:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1641,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"15547:16:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$2713_$","typeString":"type(contract IERC1155Receiver)"}},"id":1642,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15564:17:3","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":2694,"src":"15547:34:3","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155Receiver.onERC1155Received(address,address,uint256,uint256,bytes calldata) returns (bytes4)"}},"id":1643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"15582:8:3","memberName":"selector","nodeType":"MemberAccess","src":"15547:43:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"15535:55:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1650,"nodeType":"IfStatement","src":"15531:174:3","trueBody":{"id":1649,"nodeType":"Block","src":"15592:113:3","statements":[{"errorCall":{"arguments":[{"id":1646,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"15683:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1645,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"15660:22:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15660:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1648,"nodeType":"RevertStatement","src":"15653:33:3"}]}}]},"errorName":"","id":1652,"nodeType":"TryCatchClause","parameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1638,"mutability":"mutable","name":"response","nameLocation":"15503:8:3","nodeType":"VariableDeclaration","scope":1652,"src":"15496:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1637,"name":"bytes4","nodeType":"ElementaryTypeName","src":"15496:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"15495:17:3"},"src":"15487:232:3"},{"block":{"id":1668,"nodeType":"Block","src":"15748:381:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1656,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"15770:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15777:6:3","memberName":"length","nodeType":"MemberAccess","src":"15770:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15787:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15770:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1666,"nodeType":"Block","src":"15925:190:3","statements":[{"AST":{"nodeType":"YulBlock","src":"16011:86:3","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16048:2:3","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"16052:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16044:3:3"},"nodeType":"YulFunctionCall","src":"16044:15:3"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"16067:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16061:5:3"},"nodeType":"YulFunctionCall","src":"16061:13:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16037:6:3"},"nodeType":"YulFunctionCall","src":"16037:38:3"},"nodeType":"YulExpressionStatement","src":"16037:38:3"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1654,"isOffset":false,"isSlot":false,"src":"16052:6:3","valueSize":1},{"declaration":1654,"isOffset":false,"isSlot":false,"src":"16067:6:3","valueSize":1}],"id":1665,"nodeType":"InlineAssembly","src":"16002:95:3"}]},"id":1667,"nodeType":"IfStatement","src":"15766:349:3","trueBody":{"id":1664,"nodeType":"Block","src":"15790:129:3","statements":[{"errorCall":{"arguments":[{"id":1661,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"15897:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1660,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"15874:22:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15874:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1663,"nodeType":"RevertStatement","src":"15867:33:3"}]}}]},"errorName":"","id":1669,"nodeType":"TryCatchClause","parameters":{"id":1655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1654,"mutability":"mutable","name":"reason","nameLocation":"15740:6:3","nodeType":"VariableDeclaration","scope":1669,"src":"15727:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1653,"name":"bytes","nodeType":"ElementaryTypeName","src":"15727:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15726:21:3"},"src":"15720:409:3"}],"externalCall":{"arguments":[{"id":1631,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"15454:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1632,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"15464:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1633,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"15470:2:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1634,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"15474:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1635,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"15481:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1628,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"15432:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1627,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"15415:16:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$2713_$","typeString":"type(contract IERC1155Receiver)"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15415:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Receiver_$2713","typeString":"contract IERC1155Receiver"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15436:17:3","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":2694,"src":"15415:38:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15415:71:3","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1670,"nodeType":"TryStatement","src":"15411:718:3"}]}}]},"documentation":{"id":1607,"nodeType":"StructuredDocumentation","src":"14999:167:3","text":" @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\n if it contains code at the moment of execution."},"id":1674,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeTransferAcceptanceCheck","nameLocation":"15180:30:3","nodeType":"FunctionDefinition","parameters":{"id":1620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1609,"mutability":"mutable","name":"operator","nameLocation":"15228:8:3","nodeType":"VariableDeclaration","scope":1674,"src":"15220:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1608,"name":"address","nodeType":"ElementaryTypeName","src":"15220:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1611,"mutability":"mutable","name":"from","nameLocation":"15254:4:3","nodeType":"VariableDeclaration","scope":1674,"src":"15246:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1610,"name":"address","nodeType":"ElementaryTypeName","src":"15246:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1613,"mutability":"mutable","name":"to","nameLocation":"15276:2:3","nodeType":"VariableDeclaration","scope":1674,"src":"15268:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1612,"name":"address","nodeType":"ElementaryTypeName","src":"15268:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1615,"mutability":"mutable","name":"id","nameLocation":"15296:2:3","nodeType":"VariableDeclaration","scope":1674,"src":"15288:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1614,"name":"uint256","nodeType":"ElementaryTypeName","src":"15288:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1617,"mutability":"mutable","name":"value","nameLocation":"15316:5:3","nodeType":"VariableDeclaration","scope":1674,"src":"15308:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1616,"name":"uint256","nodeType":"ElementaryTypeName","src":"15308:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1619,"mutability":"mutable","name":"data","nameLocation":"15344:4:3","nodeType":"VariableDeclaration","scope":1674,"src":"15331:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1618,"name":"bytes","nodeType":"ElementaryTypeName","src":"15331:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15210:144:3"},"returnParameters":{"id":1621,"nodeType":"ParameterList","parameters":[],"src":"15363:0:3"},"scope":1761,"src":"15171:974:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1743,"nodeType":"Block","src":"16550:824:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1692,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"16564:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16567:4:3","memberName":"code","nodeType":"MemberAccess","src":"16564:7:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16572:6:3","memberName":"length","nodeType":"MemberAccess","src":"16564:14:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16581:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16564:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1742,"nodeType":"IfStatement","src":"16560:808:3","trueBody":{"id":1741,"nodeType":"Block","src":"16584:784:3","statements":[{"clauses":[{"block":{"id":1721,"nodeType":"Block","src":"16737:211:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1710,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"16759:8:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":1711,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"16771:16:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$2713_$","typeString":"type(contract IERC1155Receiver)"}},"id":1712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16788:22:3","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":2712,"src":"16771:39:3","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC1155Receiver.onERC1155BatchReceived(address,address,uint256[] calldata,uint256[] calldata,bytes calldata) returns (bytes4)"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16811:8:3","memberName":"selector","nodeType":"MemberAccess","src":"16771:48:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"16759:60:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1720,"nodeType":"IfStatement","src":"16755:179:3","trueBody":{"id":1719,"nodeType":"Block","src":"16821:113:3","statements":[{"errorCall":{"arguments":[{"id":1716,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"16912:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1715,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"16889:22:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16889:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1718,"nodeType":"RevertStatement","src":"16882:33:3"}]}}]},"errorName":"","id":1722,"nodeType":"TryCatchClause","parameters":{"id":1709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1708,"mutability":"mutable","name":"response","nameLocation":"16714:8:3","nodeType":"VariableDeclaration","scope":1722,"src":"16707:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1707,"name":"bytes4","nodeType":"ElementaryTypeName","src":"16707:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"16689:47:3"},"src":"16681:267:3"},{"block":{"id":1738,"nodeType":"Block","src":"16977:381:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1726,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"16999:6:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17006:6:3","memberName":"length","nodeType":"MemberAccess","src":"16999:13:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17016:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16999:18:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1736,"nodeType":"Block","src":"17154:190:3","statements":[{"AST":{"nodeType":"YulBlock","src":"17240:86:3","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17277:2:3","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"17281:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17273:3:3"},"nodeType":"YulFunctionCall","src":"17273:15:3"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"17296:6:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17290:5:3"},"nodeType":"YulFunctionCall","src":"17290:13:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17266:6:3"},"nodeType":"YulFunctionCall","src":"17266:38:3"},"nodeType":"YulExpressionStatement","src":"17266:38:3"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1724,"isOffset":false,"isSlot":false,"src":"17281:6:3","valueSize":1},{"declaration":1724,"isOffset":false,"isSlot":false,"src":"17296:6:3","valueSize":1}],"id":1735,"nodeType":"InlineAssembly","src":"17231:95:3"}]},"id":1737,"nodeType":"IfStatement","src":"16995:349:3","trueBody":{"id":1734,"nodeType":"Block","src":"17019:129:3","statements":[{"errorCall":{"arguments":[{"id":1731,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"17126:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1730,"name":"ERC1155InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"17103:22:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17103:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1733,"nodeType":"RevertStatement","src":"17096:33:3"}]}}]},"errorName":"","id":1739,"nodeType":"TryCatchClause","parameters":{"id":1725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1724,"mutability":"mutable","name":"reason","nameLocation":"16969:6:3","nodeType":"VariableDeclaration","scope":1739,"src":"16956:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1723,"name":"bytes","nodeType":"ElementaryTypeName","src":"16956:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16955:21:3"},"src":"16949:409:3"}],"externalCall":{"arguments":[{"id":1701,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"16646:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1702,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"16656:4:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1703,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"16662:3:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1704,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"16667:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1705,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1689,"src":"16675:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1698,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"16619:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1697,"name":"IERC1155Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"16602:16:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Receiver_$2713_$","typeString":"type(contract IERC1155Receiver)"}},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16602:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Receiver_$2713","typeString":"contract IERC1155Receiver"}},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16623:22:3","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":2712,"src":"16602:43:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16602:78:3","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1740,"nodeType":"TryStatement","src":"16598:760:3"}]}}]},"documentation":{"id":1675,"nodeType":"StructuredDocumentation","src":"16151:177:3","text":" @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\n if it contains code at the moment of execution."},"id":1744,"implemented":true,"kind":"function","modifiers":[],"name":"_doSafeBatchTransferAcceptanceCheck","nameLocation":"16342:35:3","nodeType":"FunctionDefinition","parameters":{"id":1690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1677,"mutability":"mutable","name":"operator","nameLocation":"16395:8:3","nodeType":"VariableDeclaration","scope":1744,"src":"16387:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1676,"name":"address","nodeType":"ElementaryTypeName","src":"16387:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1679,"mutability":"mutable","name":"from","nameLocation":"16421:4:3","nodeType":"VariableDeclaration","scope":1744,"src":"16413:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1678,"name":"address","nodeType":"ElementaryTypeName","src":"16413:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1681,"mutability":"mutable","name":"to","nameLocation":"16443:2:3","nodeType":"VariableDeclaration","scope":1744,"src":"16435:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1680,"name":"address","nodeType":"ElementaryTypeName","src":"16435:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1684,"mutability":"mutable","name":"ids","nameLocation":"16472:3:3","nodeType":"VariableDeclaration","scope":1744,"src":"16455:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1682,"name":"uint256","nodeType":"ElementaryTypeName","src":"16455:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1683,"nodeType":"ArrayTypeName","src":"16455:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1687,"mutability":"mutable","name":"values","nameLocation":"16502:6:3","nodeType":"VariableDeclaration","scope":1744,"src":"16485:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1685,"name":"uint256","nodeType":"ElementaryTypeName","src":"16485:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1686,"nodeType":"ArrayTypeName","src":"16485:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1689,"mutability":"mutable","name":"data","nameLocation":"16531:4:3","nodeType":"VariableDeclaration","scope":1744,"src":"16518:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1688,"name":"bytes","nodeType":"ElementaryTypeName","src":"16518:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16377:164:3"},"returnParameters":{"id":1691,"nodeType":"ParameterList","parameters":[],"src":"16550:0:3"},"scope":1761,"src":"16333:1041:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1759,"nodeType":"Block","src":"17648:691:3","statements":[{"AST":{"nodeType":"YulBlock","src":"17710:623:3","statements":[{"nodeType":"YulAssignment","src":"17768:21:3","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17784:4:3","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17778:5:3"},"nodeType":"YulFunctionCall","src":"17778:11:3"},"variableNames":[{"name":"array1","nodeType":"YulIdentifier","src":"17768:6:3"}]},{"expression":{"arguments":[{"name":"array1","nodeType":"YulIdentifier","src":"17846:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"17854:1:3","type":"","value":"1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17839:6:3"},"nodeType":"YulFunctionCall","src":"17839:17:3"},"nodeType":"YulExpressionStatement","src":"17839:17:3"},{"expression":{"arguments":[{"arguments":[{"name":"array1","nodeType":"YulIdentifier","src":"17977:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"17985:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17973:3:3"},"nodeType":"YulFunctionCall","src":"17973:17:3"},{"name":"element1","nodeType":"YulIdentifier","src":"17992:8:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17966:6:3"},"nodeType":"YulFunctionCall","src":"17966:35:3"},"nodeType":"YulExpressionStatement","src":"17966:35:3"},{"nodeType":"YulAssignment","src":"18092:27:3","value":{"arguments":[{"name":"array1","nodeType":"YulIdentifier","src":"18106:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"18114:4:3","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18102:3:3"},"nodeType":"YulFunctionCall","src":"18102:17:3"},"variableNames":[{"name":"array2","nodeType":"YulIdentifier","src":"18092:6:3"}]},{"expression":{"arguments":[{"name":"array2","nodeType":"YulIdentifier","src":"18139:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"18147:1:3","type":"","value":"1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18132:6:3"},"nodeType":"YulFunctionCall","src":"18132:17:3"},"nodeType":"YulExpressionStatement","src":"18132:17:3"},{"expression":{"arguments":[{"arguments":[{"name":"array2","nodeType":"YulIdentifier","src":"18173:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"18181:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18169:3:3"},"nodeType":"YulFunctionCall","src":"18169:17:3"},{"name":"element2","nodeType":"YulIdentifier","src":"18188:8:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18162:6:3"},"nodeType":"YulFunctionCall","src":"18162:35:3"},"nodeType":"YulExpressionStatement","src":"18162:35:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18299:4:3","type":"","value":"0x40"},{"arguments":[{"name":"array2","nodeType":"YulIdentifier","src":"18309:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"18317:4:3","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18305:3:3"},"nodeType":"YulFunctionCall","src":"18305:17:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18292:6:3"},"nodeType":"YulFunctionCall","src":"18292:31:3"},"nodeType":"YulExpressionStatement","src":"18292:31:3"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1753,"isOffset":false,"isSlot":false,"src":"17768:6:3","valueSize":1},{"declaration":1753,"isOffset":false,"isSlot":false,"src":"17846:6:3","valueSize":1},{"declaration":1753,"isOffset":false,"isSlot":false,"src":"17977:6:3","valueSize":1},{"declaration":1753,"isOffset":false,"isSlot":false,"src":"18106:6:3","valueSize":1},{"declaration":1756,"isOffset":false,"isSlot":false,"src":"18092:6:3","valueSize":1},{"declaration":1756,"isOffset":false,"isSlot":false,"src":"18139:6:3","valueSize":1},{"declaration":1756,"isOffset":false,"isSlot":false,"src":"18173:6:3","valueSize":1},{"declaration":1756,"isOffset":false,"isSlot":false,"src":"18309:6:3","valueSize":1},{"declaration":1747,"isOffset":false,"isSlot":false,"src":"17992:8:3","valueSize":1},{"declaration":1749,"isOffset":false,"isSlot":false,"src":"18188:8:3","valueSize":1}],"id":1758,"nodeType":"InlineAssembly","src":"17701:632:3"}]},"documentation":{"id":1745,"nodeType":"StructuredDocumentation","src":"17380:105:3","text":" @dev Creates an array in memory with only one value for each of the elements provided."},"id":1760,"implemented":true,"kind":"function","modifiers":[],"name":"_asSingletonArrays","nameLocation":"17499:18:3","nodeType":"FunctionDefinition","parameters":{"id":1750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1747,"mutability":"mutable","name":"element1","nameLocation":"17535:8:3","nodeType":"VariableDeclaration","scope":1760,"src":"17527:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"17527:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1749,"mutability":"mutable","name":"element2","nameLocation":"17561:8:3","nodeType":"VariableDeclaration","scope":1760,"src":"17553:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1748,"name":"uint256","nodeType":"ElementaryTypeName","src":"17553:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17517:58:3"},"returnParameters":{"id":1757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1753,"mutability":"mutable","name":"array1","nameLocation":"17615:6:3","nodeType":"VariableDeclaration","scope":1760,"src":"17598:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1751,"name":"uint256","nodeType":"ElementaryTypeName","src":"17598:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1752,"nodeType":"ArrayTypeName","src":"17598:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1756,"mutability":"mutable","name":"array2","nameLocation":"17640:6:3","nodeType":"VariableDeclaration","scope":1760,"src":"17623:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1754,"name":"uint256","nodeType":"ElementaryTypeName","src":"17623:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1755,"nodeType":"ArrayTypeName","src":"17623:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"17597:50:3"},"scope":1761,"src":"17490:849:3","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1762,"src":"1054:17287:3","usedErrors":[211,214,2200,2205,2210,2217,2222,2227,2234],"usedEvents":[219,2568,2583,2592,2599]}],"src":"109:18233:3"},"id":3},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol","exportedSymbols":{"ERC1155SupplyUpgradeable":[1990],"ERC1155Upgradeable":[1761],"Initializable":[448]},"id":1991,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1763,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"126:24:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol","file":"../ERC1155Upgradeable.sol","id":1765,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1991,"sourceUnit":1762,"src":"152:61:4","symbolAliases":[{"foreign":{"id":1764,"name":"ERC1155Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"160:18:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../../proxy/utils/Initializable.sol","id":1767,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1991,"sourceUnit":449,"src":"214:69:4","symbolAliases":[{"foreign":{"id":1766,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"222:13:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1769,"name":"Initializable","nameLocations":["883:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":448,"src":"883:13:4"},"id":1770,"nodeType":"InheritanceSpecifier","src":"883:13:4"},{"baseName":{"id":1771,"name":"ERC1155Upgradeable","nameLocations":["898:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":1761,"src":"898:18:4"},"id":1772,"nodeType":"InheritanceSpecifier","src":"898:18:4"}],"canonicalName":"ERC1155SupplyUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1768,"nodeType":"StructuredDocumentation","src":"285:551:4","text":" @dev Extension of ERC1155 that adds tracking of total supply per id.\n Useful for scenarios where Fungible and Non-fungible tokens have to be\n clearly identified. Note: While a totalSupply of 1 might mean the\n corresponding is an NFT, there is no guarantees that no other token with the\n same id are not going to be minted.\n NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens\n that can be minted.\n CAUTION: This extension should not be added in an upgrade to an already deployed contract."},"fullyImplemented":true,"id":1990,"linearizedBaseContracts":[1990,1761,2235,2729,2671,2068,3913,2028,448],"name":"ERC1155SupplyUpgradeable","nameLocation":"855:24:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ERC1155SupplyUpgradeable.ERC1155SupplyStorage","documentation":{"id":1773,"nodeType":"StructuredDocumentation","src":"923:71:4","text":"@custom:storage-location erc7201:openzeppelin.storage.ERC1155Supply"},"id":1780,"members":[{"constant":false,"id":1777,"mutability":"mutable","name":"_totalSupply","nameLocation":"1068:12:4","nodeType":"VariableDeclaration","scope":1780,"src":"1037:43:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1776,"keyName":"id","keyNameLocation":"1053:2:4","keyType":{"id":1774,"name":"uint256","nodeType":"ElementaryTypeName","src":"1045:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1037:30:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1775,"name":"uint256","nodeType":"ElementaryTypeName","src":"1059:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":1779,"mutability":"mutable","name":"_totalSupplyAll","nameLocation":"1098:15:4","nodeType":"VariableDeclaration","scope":1780,"src":"1090:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1778,"name":"uint256","nodeType":"ElementaryTypeName","src":"1090:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ERC1155SupplyStorage","nameLocation":"1006:20:4","nodeType":"StructDefinition","scope":1990,"src":"999:121:4","visibility":"public"},{"constant":true,"id":1783,"mutability":"constant","name":"ERC1155SupplyStorageLocation","nameLocation":"1268:28:4","nodeType":"VariableDeclaration","scope":1990,"src":"1243:122:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1781,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1243:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834613539333636326565303464323762366130306562623331626537666530633130326332616465383261376335643736346632646630356463346532383030","id":1782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1299:66:4","typeDescriptions":{"typeIdentifier":"t_rational_33628775545370798169512062789505411687485904666574391101151478347969820764160_by_1","typeString":"int_const 3362...(69 digits omitted)...4160"},"value":"0x4a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e2800"},"visibility":"private"},{"body":{"id":1790,"nodeType":"Block","src":"1462:87:4","statements":[{"AST":{"nodeType":"YulBlock","src":"1481:62:4","statements":[{"nodeType":"YulAssignment","src":"1495:38:4","value":{"name":"ERC1155SupplyStorageLocation","nodeType":"YulIdentifier","src":"1505:28:4"},"variableNames":[{"name":"$.slot","nodeType":"YulIdentifier","src":"1495:6:4"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1787,"isOffset":false,"isSlot":true,"src":"1495:6:4","suffix":"slot","valueSize":1},{"declaration":1783,"isOffset":false,"isSlot":false,"src":"1505:28:4","valueSize":1}],"id":1789,"nodeType":"InlineAssembly","src":"1472:71:4"}]},"id":1791,"implemented":true,"kind":"function","modifiers":[],"name":"_getERC1155SupplyStorage","nameLocation":"1381:24:4","nodeType":"FunctionDefinition","parameters":{"id":1784,"nodeType":"ParameterList","parameters":[],"src":"1405:2:4"},"returnParameters":{"id":1788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1787,"mutability":"mutable","name":"$","nameLocation":"1459:1:4","nodeType":"VariableDeclaration","scope":1791,"src":"1430:30:4","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage"},"typeName":{"id":1786,"nodeType":"UserDefinedTypeName","pathNode":{"id":1785,"name":"ERC1155SupplyStorage","nameLocations":["1430:20:4"],"nodeType":"IdentifierPath","referencedDeclaration":1780,"src":"1430:20:4"},"referencedDeclaration":1780,"src":"1430:20:4","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage"}},"visibility":"internal"}],"src":"1429:32:4"},"scope":1990,"src":"1372:177:4","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1796,"nodeType":"Block","src":"1613:7:4","statements":[]},"id":1797,"implemented":true,"kind":"function","modifiers":[{"id":1794,"kind":"modifierInvocation","modifierName":{"id":1793,"name":"onlyInitializing","nameLocations":["1596:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":357,"src":"1596:16:4"},"nodeType":"ModifierInvocation","src":"1596:16:4"}],"name":"__ERC1155Supply_init","nameLocation":"1564:20:4","nodeType":"FunctionDefinition","parameters":{"id":1792,"nodeType":"ParameterList","parameters":[],"src":"1584:2:4"},"returnParameters":{"id":1795,"nodeType":"ParameterList","parameters":[],"src":"1613:0:4"},"scope":1990,"src":"1555:65:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1802,"nodeType":"Block","src":"1694:7:4","statements":[]},"id":1803,"implemented":true,"kind":"function","modifiers":[{"id":1800,"kind":"modifierInvocation","modifierName":{"id":1799,"name":"onlyInitializing","nameLocations":["1677:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":357,"src":"1677:16:4"},"nodeType":"ModifierInvocation","src":"1677:16:4"}],"name":"__ERC1155Supply_init_unchained","nameLocation":"1635:30:4","nodeType":"FunctionDefinition","parameters":{"id":1798,"nodeType":"ParameterList","parameters":[],"src":"1665:2:4"},"returnParameters":{"id":1801,"nodeType":"ParameterList","parameters":[],"src":"1694:0:4"},"scope":1990,"src":"1626:75:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1822,"nodeType":"Block","src":"1847:111:4","statements":[{"assignments":[1813],"declarations":[{"constant":false,"id":1813,"mutability":"mutable","name":"$","nameLocation":"1886:1:4","nodeType":"VariableDeclaration","scope":1822,"src":"1857:30:4","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage"},"typeName":{"id":1812,"nodeType":"UserDefinedTypeName","pathNode":{"id":1811,"name":"ERC1155SupplyStorage","nameLocations":["1857:20:4"],"nodeType":"IdentifierPath","referencedDeclaration":1780,"src":"1857:20:4"},"referencedDeclaration":1780,"src":"1857:20:4","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage"}},"visibility":"internal"}],"id":1816,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1814,"name":"_getERC1155SupplyStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"1890:24:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC1155SupplyStorage_$1780_storage_ptr_$","typeString":"function () pure returns (struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage storage pointer)"}},"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1890:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"1857:59:4"},{"expression":{"baseExpression":{"expression":{"id":1817,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"1933:1:4","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage storage pointer"}},"id":1818,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1935:12:4","memberName":"_totalSupply","nodeType":"MemberAccess","referencedDeclaration":1777,"src":"1933:14:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1820,"indexExpression":{"id":1819,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"1948:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1933:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1810,"id":1821,"nodeType":"Return","src":"1926:25:4"}]},"documentation":{"id":1804,"nodeType":"StructuredDocumentation","src":"1706:65:4","text":" @dev Total value of tokens in with a given id."},"functionSelector":"bd85b039","id":1823,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"1785:11:4","nodeType":"FunctionDefinition","parameters":{"id":1807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1806,"mutability":"mutable","name":"id","nameLocation":"1805:2:4","nodeType":"VariableDeclaration","scope":1823,"src":"1797:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1805,"name":"uint256","nodeType":"ElementaryTypeName","src":"1797:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1796:12:4"},"returnParameters":{"id":1810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1809,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1823,"src":"1838:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1808,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1837:9:4"},"scope":1990,"src":"1776:182:4","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1838,"nodeType":"Block","src":"2076:110:4","statements":[{"assignments":[1831],"declarations":[{"constant":false,"id":1831,"mutability":"mutable","name":"$","nameLocation":"2115:1:4","nodeType":"VariableDeclaration","scope":1838,"src":"2086:30:4","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage"},"typeName":{"id":1830,"nodeType":"UserDefinedTypeName","pathNode":{"id":1829,"name":"ERC1155SupplyStorage","nameLocations":["2086:20:4"],"nodeType":"IdentifierPath","referencedDeclaration":1780,"src":"2086:20:4"},"referencedDeclaration":1780,"src":"2086:20:4","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage"}},"visibility":"internal"}],"id":1834,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1832,"name":"_getERC1155SupplyStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"2119:24:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC1155SupplyStorage_$1780_storage_ptr_$","typeString":"function () pure returns (struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage storage pointer)"}},"id":1833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2119:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"2086:59:4"},{"expression":{"expression":{"id":1835,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"2162:1:4","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage storage pointer"}},"id":1836,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2164:15:4","memberName":"_totalSupplyAll","nodeType":"MemberAccess","referencedDeclaration":1779,"src":"2162:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1828,"id":1837,"nodeType":"Return","src":"2155:24:4"}]},"documentation":{"id":1824,"nodeType":"StructuredDocumentation","src":"1964:46:4","text":" @dev Total value of tokens."},"functionSelector":"18160ddd","id":1839,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"2024:11:4","nodeType":"FunctionDefinition","parameters":{"id":1825,"nodeType":"ParameterList","parameters":[],"src":"2035:2:4"},"returnParameters":{"id":1828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1827,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1839,"src":"2067:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1826,"name":"uint256","nodeType":"ElementaryTypeName","src":"2067:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2066:9:4"},"scope":1990,"src":"2015:171:4","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1853,"nodeType":"Block","src":"2342:43:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1848,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"2371:2:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1847,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[1823,1839],"referencedDeclaration":1823,"src":"2359:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2359:15:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2377:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2359:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1846,"id":1852,"nodeType":"Return","src":"2352:26:4"}]},"documentation":{"id":1840,"nodeType":"StructuredDocumentation","src":"2192:82:4","text":" @dev Indicates whether any token exist with a given id, or not."},"functionSelector":"4f558e79","id":1854,"implemented":true,"kind":"function","modifiers":[],"name":"exists","nameLocation":"2288:6:4","nodeType":"FunctionDefinition","parameters":{"id":1843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1842,"mutability":"mutable","name":"id","nameLocation":"2303:2:4","nodeType":"VariableDeclaration","scope":1854,"src":"2295:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1841,"name":"uint256","nodeType":"ElementaryTypeName","src":"2295:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2294:12:4"},"returnParameters":{"id":1846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1845,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1854,"src":"2336:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1844,"name":"bool","nodeType":"ElementaryTypeName","src":"2336:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2335:6:4"},"scope":1990,"src":"2279:106:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1160],"body":{"id":1988,"nodeType":"Block","src":"2596:1441:4","statements":[{"assignments":[1871],"declarations":[{"constant":false,"id":1871,"mutability":"mutable","name":"$","nameLocation":"2635:1:4","nodeType":"VariableDeclaration","scope":1988,"src":"2606:30:4","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage"},"typeName":{"id":1870,"nodeType":"UserDefinedTypeName","pathNode":{"id":1869,"name":"ERC1155SupplyStorage","nameLocations":["2606:20:4"],"nodeType":"IdentifierPath","referencedDeclaration":1780,"src":"2606:20:4"},"referencedDeclaration":1780,"src":"2606:20:4","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage"}},"visibility":"internal"}],"id":1874,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1872,"name":"_getERC1155SupplyStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"2639:24:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_ERC1155SupplyStorage_$1780_storage_ptr_$","typeString":"function () pure returns (struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage storage pointer)"}},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"2606:59:4"},{"expression":{"arguments":[{"id":1878,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1857,"src":"2689:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1879,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"2695:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1880,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"2699:3:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":1881,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"2704:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"expression":{"id":1875,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2675:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC1155SupplyUpgradeable_$1990_$","typeString":"type(contract super ERC1155SupplyUpgradeable)"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2681:7:4","memberName":"_update","nodeType":"MemberAccess","referencedDeclaration":1160,"src":"2675:13:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory)"}},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2675:36:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1883,"nodeType":"ExpressionStatement","src":"2675:36:4"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1884,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1857,"src":"2726:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2742:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1886,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2734:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1885,"name":"address","nodeType":"ElementaryTypeName","src":"2734:7:4","typeDescriptions":{}}},"id":1888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2734:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2726:18:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1934,"nodeType":"IfStatement","src":"2722:537:4","trueBody":{"id":1933,"nodeType":"Block","src":"2746:513:4","statements":[{"assignments":[1891],"declarations":[{"constant":false,"id":1891,"mutability":"mutable","name":"totalMintValue","nameLocation":"2768:14:4","nodeType":"VariableDeclaration","scope":1933,"src":"2760:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1890,"name":"uint256","nodeType":"ElementaryTypeName","src":"2760:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1893,"initialValue":{"hexValue":"30","id":1892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2785:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2760:26:4"},{"body":{"id":1925,"nodeType":"Block","src":"2841:254:4","statements":[{"assignments":[1906],"declarations":[{"constant":false,"id":1906,"mutability":"mutable","name":"value","nameLocation":"2867:5:4","nodeType":"VariableDeclaration","scope":1925,"src":"2859:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1905,"name":"uint256","nodeType":"ElementaryTypeName","src":"2859:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1910,"initialValue":{"baseExpression":{"id":1907,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"2875:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1909,"indexExpression":{"id":1908,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"2882:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2875:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2859:25:4"},{"expression":{"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1911,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"3008:1:4","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage storage pointer"}},"id":1916,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3010:12:4","memberName":"_totalSupply","nodeType":"MemberAccess","referencedDeclaration":1777,"src":"3008:14:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1917,"indexExpression":{"baseExpression":{"id":1913,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"3023:3:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1915,"indexExpression":{"id":1914,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"3027:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3023:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3008:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1918,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"3034:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3008:31:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1920,"nodeType":"ExpressionStatement","src":"3008:31:4"},{"expression":{"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1921,"name":"totalMintValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"3057:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1922,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"3075:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3057:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1924,"nodeType":"ExpressionStatement","src":"3057:23:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1898,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"2820:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1899,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"2824:3:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2828:6:4","memberName":"length","nodeType":"MemberAccess","src":"2824:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2820:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1926,"initializationExpression":{"assignments":[1895],"declarations":[{"constant":false,"id":1895,"mutability":"mutable","name":"i","nameLocation":"2813:1:4","nodeType":"VariableDeclaration","scope":1926,"src":"2805:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1894,"name":"uint256","nodeType":"ElementaryTypeName","src":"2805:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1897,"initialValue":{"hexValue":"30","id":1896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2817:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2805:13:4"},"loopExpression":{"expression":{"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2836:3:4","subExpression":{"id":1902,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"2838:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1904,"nodeType":"ExpressionStatement","src":"2836:3:4"},"nodeType":"ForStatement","src":"2800:295:4"},{"expression":{"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1927,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"3213:1:4","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage storage pointer"}},"id":1929,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3215:15:4","memberName":"_totalSupplyAll","nodeType":"MemberAccess","referencedDeclaration":1779,"src":"3213:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1930,"name":"totalMintValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"3234:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3213:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1932,"nodeType":"ExpressionStatement","src":"3213:35:4"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1935,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"3273:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3287:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3279:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1936,"name":"address","nodeType":"ElementaryTypeName","src":"3279:7:4","typeDescriptions":{}}},"id":1939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3279:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3273:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1987,"nodeType":"IfStatement","src":"3269:762:4","trueBody":{"id":1986,"nodeType":"Block","src":"3291:740:4","statements":[{"assignments":[1942],"declarations":[{"constant":false,"id":1942,"mutability":"mutable","name":"totalBurnValue","nameLocation":"3313:14:4","nodeType":"VariableDeclaration","scope":1986,"src":"3305:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1941,"name":"uint256","nodeType":"ElementaryTypeName","src":"3305:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1944,"initialValue":{"hexValue":"30","id":1943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3330:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3305:26:4"},{"body":{"id":1977,"nodeType":"Block","src":"3386:420:4","statements":[{"assignments":[1957],"declarations":[{"constant":false,"id":1957,"mutability":"mutable","name":"value","nameLocation":"3412:5:4","nodeType":"VariableDeclaration","scope":1977,"src":"3404:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1956,"name":"uint256","nodeType":"ElementaryTypeName","src":"3404:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1961,"initialValue":{"baseExpression":{"id":1958,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"3420:6:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1960,"indexExpression":{"id":1959,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"3427:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3420:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3404:25:4"},{"id":1976,"nodeType":"UncheckedBlock","src":"3448:344:4","statements":[{"expression":{"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1962,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"3586:1:4","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage storage pointer"}},"id":1967,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3588:12:4","memberName":"_totalSupply","nodeType":"MemberAccess","referencedDeclaration":1777,"src":"3586:14:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1968,"indexExpression":{"baseExpression":{"id":1964,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"3601:3:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1966,"indexExpression":{"id":1965,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"3605:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3601:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3586:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1969,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"3612:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3586:31:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1971,"nodeType":"ExpressionStatement","src":"3586:31:4"},{"expression":{"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1972,"name":"totalBurnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"3750:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1973,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"3768:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3750:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1975,"nodeType":"ExpressionStatement","src":"3750:23:4"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1949,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"3365:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1950,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"3369:3:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3373:6:4","memberName":"length","nodeType":"MemberAccess","src":"3369:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3365:14:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1978,"initializationExpression":{"assignments":[1946],"declarations":[{"constant":false,"id":1946,"mutability":"mutable","name":"i","nameLocation":"3358:1:4","nodeType":"VariableDeclaration","scope":1978,"src":"3350:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1945,"name":"uint256","nodeType":"ElementaryTypeName","src":"3350:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1948,"initialValue":{"hexValue":"30","id":1947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3362:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3350:13:4"},"loopExpression":{"expression":{"id":1954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3381:3:4","subExpression":{"id":1953,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1946,"src":"3383:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1955,"nodeType":"ExpressionStatement","src":"3381:3:4"},"nodeType":"ForStatement","src":"3345:461:4"},{"id":1985,"nodeType":"UncheckedBlock","src":"3819:202:4","statements":[{"expression":{"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1979,"name":"$","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"3971:1:4","typeDescriptions":{"typeIdentifier":"t_struct$_ERC1155SupplyStorage_$1780_storage_ptr","typeString":"struct ERC1155SupplyUpgradeable.ERC1155SupplyStorage storage pointer"}},"id":1981,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3973:15:4","memberName":"_totalSupplyAll","nodeType":"MemberAccess","referencedDeclaration":1779,"src":"3971:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1982,"name":"totalBurnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"3992:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3971:35:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1984,"nodeType":"ExpressionStatement","src":"3971:35:4"}]}]}}]},"documentation":{"id":1855,"nodeType":"StructuredDocumentation","src":"2391:46:4","text":" @dev See {ERC1155-_update}."},"id":1989,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"2451:7:4","nodeType":"FunctionDefinition","overrides":{"id":1867,"nodeType":"OverrideSpecifier","overrides":[],"src":"2587:8:4"},"parameters":{"id":1866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1857,"mutability":"mutable","name":"from","nameLocation":"2476:4:4","nodeType":"VariableDeclaration","scope":1989,"src":"2468:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1856,"name":"address","nodeType":"ElementaryTypeName","src":"2468:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1859,"mutability":"mutable","name":"to","nameLocation":"2498:2:4","nodeType":"VariableDeclaration","scope":1989,"src":"2490:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1858,"name":"address","nodeType":"ElementaryTypeName","src":"2490:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1862,"mutability":"mutable","name":"ids","nameLocation":"2527:3:4","nodeType":"VariableDeclaration","scope":1989,"src":"2510:20:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1860,"name":"uint256","nodeType":"ElementaryTypeName","src":"2510:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1861,"nodeType":"ArrayTypeName","src":"2510:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1865,"mutability":"mutable","name":"values","nameLocation":"2557:6:4","nodeType":"VariableDeclaration","scope":1989,"src":"2540:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1863,"name":"uint256","nodeType":"ElementaryTypeName","src":"2540:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1864,"nodeType":"ArrayTypeName","src":"2540:9:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2458:111:4"},"returnParameters":{"id":1868,"nodeType":"ParameterList","parameters":[],"src":"2596:0:4"},"scope":1990,"src":"2442:1595:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1991,"src":"837:3202:4","usedErrors":[211,214,2200,2205,2210,2217,2222,2227,2234],"usedEvents":[219,2568,2583,2592,2599]}],"src":"126:3914:4"},"id":4},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"ContextUpgradeable":[2028],"Initializable":[448]},"id":2029,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1992,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1994,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2029,"sourceUnit":449,"src":"126:63:5","symbolAliases":[{"foreign":{"id":1993,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"134:13:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1996,"name":"Initializable","nameLocations":["728:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":448,"src":"728:13:5"},"id":1997,"nodeType":"InheritanceSpecifier","src":"728:13:5"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1995,"nodeType":"StructuredDocumentation","src":"191:496:5","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2028,"linearizedBaseContracts":[2028,448],"name":"ContextUpgradeable","nameLocation":"706:18:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":2002,"nodeType":"Block","src":"800:7:5","statements":[]},"id":2003,"implemented":true,"kind":"function","modifiers":[{"id":2000,"kind":"modifierInvocation","modifierName":{"id":1999,"name":"onlyInitializing","nameLocations":["783:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":357,"src":"783:16:5"},"nodeType":"ModifierInvocation","src":"783:16:5"}],"name":"__Context_init","nameLocation":"757:14:5","nodeType":"FunctionDefinition","parameters":{"id":1998,"nodeType":"ParameterList","parameters":[],"src":"771:2:5"},"returnParameters":{"id":2001,"nodeType":"ParameterList","parameters":[],"src":"800:0:5"},"scope":2028,"src":"748:59:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2008,"nodeType":"Block","src":"875:7:5","statements":[]},"id":2009,"implemented":true,"kind":"function","modifiers":[{"id":2006,"kind":"modifierInvocation","modifierName":{"id":2005,"name":"onlyInitializing","nameLocations":["858:16:5"],"nodeType":"IdentifierPath","referencedDeclaration":357,"src":"858:16:5"},"nodeType":"ModifierInvocation","src":"858:16:5"}],"name":"__Context_init_unchained","nameLocation":"822:24:5","nodeType":"FunctionDefinition","parameters":{"id":2004,"nodeType":"ParameterList","parameters":[],"src":"846:2:5"},"returnParameters":{"id":2007,"nodeType":"ParameterList","parameters":[],"src":"875:0:5"},"scope":2028,"src":"813:69:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2017,"nodeType":"Block","src":"949:34:5","statements":[{"expression":{"expression":{"id":2014,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"966:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"970:6:5","memberName":"sender","nodeType":"MemberAccess","src":"966:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2013,"id":2016,"nodeType":"Return","src":"959:17:5"}]},"id":2018,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"896:10:5","nodeType":"FunctionDefinition","parameters":{"id":2010,"nodeType":"ParameterList","parameters":[],"src":"906:2:5"},"returnParameters":{"id":2013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2012,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2018,"src":"940:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2011,"name":"address","nodeType":"ElementaryTypeName","src":"940:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"939:9:5"},"scope":2028,"src":"887:96:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2026,"nodeType":"Block","src":"1056:32:5","statements":[{"expression":{"expression":{"id":2023,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1073:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1077:4:5","memberName":"data","nodeType":"MemberAccess","src":"1073:8:5","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2022,"id":2025,"nodeType":"Return","src":"1066:15:5"}]},"id":2027,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"998:8:5","nodeType":"FunctionDefinition","parameters":{"id":2019,"nodeType":"ParameterList","parameters":[],"src":"1006:2:5"},"returnParameters":{"id":2022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2021,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2027,"src":"1040:14:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2020,"name":"bytes","nodeType":"ElementaryTypeName","src":"1040:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1039:16:5"},"scope":2028,"src":"989:99:5","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2029,"src":"688:402:5","usedErrors":[211,214],"usedEvents":[219]}],"src":"101:990:5"},"id":5},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol","exportedSymbols":{"ERC165Upgradeable":[2068],"IERC165":[3913],"Initializable":[448]},"id":2069,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2030,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:6"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"@openzeppelin/contracts/utils/introspection/IERC165.sol","id":2032,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2069,"sourceUnit":3914,"src":"140:80:6","symbolAliases":[{"foreign":{"id":2031,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3913,"src":"148:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../../proxy/utils/Initializable.sol","id":2034,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2069,"sourceUnit":449,"src":"221:66:6","symbolAliases":[{"foreign":{"id":2033,"name":"Initializable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"229:13:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2036,"name":"Initializable","nameLocations":["807:13:6"],"nodeType":"IdentifierPath","referencedDeclaration":448,"src":"807:13:6"},"id":2037,"nodeType":"InheritanceSpecifier","src":"807:13:6"},{"baseName":{"id":2038,"name":"IERC165","nameLocations":["822:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":3913,"src":"822:7:6"},"id":2039,"nodeType":"InheritanceSpecifier","src":"822:7:6"}],"canonicalName":"ERC165Upgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2035,"nodeType":"StructuredDocumentation","src":"289:478:6","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":2068,"linearizedBaseContracts":[2068,3913,448],"name":"ERC165Upgradeable","nameLocation":"786:17:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":2044,"nodeType":"Block","src":"887:7:6","statements":[]},"id":2045,"implemented":true,"kind":"function","modifiers":[{"id":2042,"kind":"modifierInvocation","modifierName":{"id":2041,"name":"onlyInitializing","nameLocations":["870:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":357,"src":"870:16:6"},"nodeType":"ModifierInvocation","src":"870:16:6"}],"name":"__ERC165_init","nameLocation":"845:13:6","nodeType":"FunctionDefinition","parameters":{"id":2040,"nodeType":"ParameterList","parameters":[],"src":"858:2:6"},"returnParameters":{"id":2043,"nodeType":"ParameterList","parameters":[],"src":"887:0:6"},"scope":2068,"src":"836:58:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2050,"nodeType":"Block","src":"961:7:6","statements":[]},"id":2051,"implemented":true,"kind":"function","modifiers":[{"id":2048,"kind":"modifierInvocation","modifierName":{"id":2047,"name":"onlyInitializing","nameLocations":["944:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":357,"src":"944:16:6"},"nodeType":"ModifierInvocation","src":"944:16:6"}],"name":"__ERC165_init_unchained","nameLocation":"909:23:6","nodeType":"FunctionDefinition","parameters":{"id":2046,"nodeType":"ParameterList","parameters":[],"src":"932:2:6"},"returnParameters":{"id":2049,"nodeType":"ParameterList","parameters":[],"src":"961:0:6"},"scope":2068,"src":"900:68:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3912],"body":{"id":2066,"nodeType":"Block","src":"1116:64:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2059,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"1133:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2061,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3913,"src":"1153:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3913_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3913_$","typeString":"type(contract IERC165)"}],"id":2060,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1148:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1148:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3913","typeString":"type(contract IERC165)"}},"id":2063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1162:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1148:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1133:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2058,"id":2065,"nodeType":"Return","src":"1126:47:6"}]},"documentation":{"id":2052,"nodeType":"StructuredDocumentation","src":"973:56:6","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2067,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1043:17:6","nodeType":"FunctionDefinition","parameters":{"id":2055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2054,"mutability":"mutable","name":"interfaceId","nameLocation":"1068:11:6","nodeType":"VariableDeclaration","scope":2067,"src":"1061:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2053,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1061:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1060:20:6"},"returnParameters":{"id":2058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2057,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2067,"src":"1110:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2056,"name":"bool","nodeType":"ElementaryTypeName","src":"1110:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1109:6:6"},"scope":2068,"src":"1034:146:6","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2069,"src":"768:414:6","usedErrors":[211,214],"usedEvents":[219]}],"src":"114:1069:6"},"id":6},"@openzeppelin/contracts/interfaces/IERC2981.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC2981.sol","exportedSymbols":{"IERC165":[3913],"IERC2981":[2088]},"id":2089,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2070,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:7"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../utils/introspection/IERC165.sol","id":2072,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2089,"sourceUnit":3914,"src":"133:59:7","symbolAliases":[{"foreign":{"id":2071,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3913,"src":"141:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2074,"name":"IERC165","nameLocations":["476:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":3913,"src":"476:7:7"},"id":2075,"nodeType":"InheritanceSpecifier","src":"476:7:7"}],"canonicalName":"IERC2981","contractDependencies":[],"contractKind":"interface","documentation":{"id":2073,"nodeType":"StructuredDocumentation","src":"194:259:7","text":" @dev Interface for the NFT Royalty Standard.\n A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n support for royalty payments across all NFT marketplaces and ecosystem participants."},"fullyImplemented":false,"id":2088,"linearizedBaseContracts":[2088,3913],"name":"IERC2981","nameLocation":"464:8:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2076,"nodeType":"StructuredDocumentation","src":"490:231:7","text":" @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n exchange. The royalty amount is denominated and should be paid in that same unit of exchange."},"functionSelector":"2a55205a","id":2087,"implemented":false,"kind":"function","modifiers":[],"name":"royaltyInfo","nameLocation":"735:11:7","nodeType":"FunctionDefinition","parameters":{"id":2081,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2078,"mutability":"mutable","name":"tokenId","nameLocation":"764:7:7","nodeType":"VariableDeclaration","scope":2087,"src":"756:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2077,"name":"uint256","nodeType":"ElementaryTypeName","src":"756:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2080,"mutability":"mutable","name":"salePrice","nameLocation":"789:9:7","nodeType":"VariableDeclaration","scope":2087,"src":"781:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2079,"name":"uint256","nodeType":"ElementaryTypeName","src":"781:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"746:58:7"},"returnParameters":{"id":2086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2083,"mutability":"mutable","name":"receiver","nameLocation":"836:8:7","nodeType":"VariableDeclaration","scope":2087,"src":"828:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2082,"name":"address","nodeType":"ElementaryTypeName","src":"828:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2085,"mutability":"mutable","name":"royaltyAmount","nameLocation":"854:13:7","nodeType":"VariableDeclaration","scope":2087,"src":"846:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2084,"name":"uint256","nodeType":"ElementaryTypeName","src":"846:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"827:41:7"},"scope":2088,"src":"726:143:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2089,"src":"454:417:7","usedErrors":[],"usedEvents":[]}],"src":"107:765:7"},"id":7},"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC1822.sol","exportedSymbols":{"IERC1822Proxiable":[2098]},"id":2099,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2090,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822Proxiable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2091,"nodeType":"StructuredDocumentation","src":"139:203:8","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":2098,"linearizedBaseContracts":[2098],"name":"IERC1822Proxiable","nameLocation":"353:17:8","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2092,"nodeType":"StructuredDocumentation","src":"377:438:8","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":2097,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"829:13:8","nodeType":"FunctionDefinition","parameters":{"id":2093,"nodeType":"ParameterList","parameters":[],"src":"842:2:8"},"returnParameters":{"id":2096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2095,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2097,"src":"868:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2094,"name":"bytes32","nodeType":"ElementaryTypeName","src":"868:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"867:9:8"},"scope":2098,"src":"820:57:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2099,"src":"343:536:8","usedErrors":[],"usedEvents":[]}],"src":"113:767:8"},"id":8},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[2235],"IERC20Errors":[2140],"IERC721Errors":[2188]},"id":2236,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2100,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":2101,"nodeType":"StructuredDocumentation","src":"138:139:9","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":2140,"linearizedBaseContracts":[2140],"name":"IERC20Errors","nameLocation":"288:12:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2102,"nodeType":"StructuredDocumentation","src":"307:309:9","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":2110,"name":"ERC20InsufficientBalance","nameLocation":"627:24:9","nodeType":"ErrorDefinition","parameters":{"id":2109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2104,"mutability":"mutable","name":"sender","nameLocation":"660:6:9","nodeType":"VariableDeclaration","scope":2110,"src":"652:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2103,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2106,"mutability":"mutable","name":"balance","nameLocation":"676:7:9","nodeType":"VariableDeclaration","scope":2110,"src":"668:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2105,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2108,"mutability":"mutable","name":"needed","nameLocation":"693:6:9","nodeType":"VariableDeclaration","scope":2110,"src":"685:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2107,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:9"},"src":"621:80:9"},{"documentation":{"id":2111,"nodeType":"StructuredDocumentation","src":"707:152:9","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":2115,"name":"ERC20InvalidSender","nameLocation":"870:18:9","nodeType":"ErrorDefinition","parameters":{"id":2114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2113,"mutability":"mutable","name":"sender","nameLocation":"897:6:9","nodeType":"VariableDeclaration","scope":2115,"src":"889:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2112,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:9"},"src":"864:41:9"},{"documentation":{"id":2116,"nodeType":"StructuredDocumentation","src":"911:159:9","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":2120,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:9","nodeType":"ErrorDefinition","parameters":{"id":2119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2118,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:9","nodeType":"VariableDeclaration","scope":2120,"src":"1102:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2117,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:9"},"src":"1075:45:9"},{"documentation":{"id":2121,"nodeType":"StructuredDocumentation","src":"1126:345:9","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":2129,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:9","nodeType":"ErrorDefinition","parameters":{"id":2128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2123,"mutability":"mutable","name":"spender","nameLocation":"1517:7:9","nodeType":"VariableDeclaration","scope":2129,"src":"1509:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2122,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2125,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:9","nodeType":"VariableDeclaration","scope":2129,"src":"1526:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2124,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2127,"mutability":"mutable","name":"needed","nameLocation":"1553:6:9","nodeType":"VariableDeclaration","scope":2129,"src":"1545:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2126,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:9"},"src":"1476:85:9"},{"documentation":{"id":2130,"nodeType":"StructuredDocumentation","src":"1567:174:9","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":2134,"name":"ERC20InvalidApprover","nameLocation":"1752:20:9","nodeType":"ErrorDefinition","parameters":{"id":2133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2132,"mutability":"mutable","name":"approver","nameLocation":"1781:8:9","nodeType":"VariableDeclaration","scope":2134,"src":"1773:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2131,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:9"},"src":"1746:45:9"},{"documentation":{"id":2135,"nodeType":"StructuredDocumentation","src":"1797:195:9","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":2139,"name":"ERC20InvalidSpender","nameLocation":"2003:19:9","nodeType":"ErrorDefinition","parameters":{"id":2138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2137,"mutability":"mutable","name":"spender","nameLocation":"2031:7:9","nodeType":"VariableDeclaration","scope":2139,"src":"2023:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2136,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:9"},"src":"1997:43:9"}],"scope":2236,"src":"278:1764:9","usedErrors":[2110,2115,2120,2129,2134,2139],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":2141,"nodeType":"StructuredDocumentation","src":"2044:141:9","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":2188,"linearizedBaseContracts":[2188],"name":"IERC721Errors","nameLocation":"2196:13:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2142,"nodeType":"StructuredDocumentation","src":"2216:219:9","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":2146,"name":"ERC721InvalidOwner","nameLocation":"2446:18:9","nodeType":"ErrorDefinition","parameters":{"id":2145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2144,"mutability":"mutable","name":"owner","nameLocation":"2473:5:9","nodeType":"VariableDeclaration","scope":2146,"src":"2465:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2143,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:9"},"src":"2440:40:9"},{"documentation":{"id":2147,"nodeType":"StructuredDocumentation","src":"2486:132:9","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":2151,"name":"ERC721NonexistentToken","nameLocation":"2629:22:9","nodeType":"ErrorDefinition","parameters":{"id":2150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2149,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:9","nodeType":"VariableDeclaration","scope":2151,"src":"2652:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2148,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:9"},"src":"2623:46:9"},{"documentation":{"id":2152,"nodeType":"StructuredDocumentation","src":"2675:289:9","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":2160,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:9","nodeType":"ErrorDefinition","parameters":{"id":2159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2154,"mutability":"mutable","name":"sender","nameLocation":"3004:6:9","nodeType":"VariableDeclaration","scope":2160,"src":"2996:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2153,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2156,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:9","nodeType":"VariableDeclaration","scope":2160,"src":"3012:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2155,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2158,"mutability":"mutable","name":"owner","nameLocation":"3037:5:9","nodeType":"VariableDeclaration","scope":2160,"src":"3029:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2157,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:9"},"src":"2969:75:9"},{"documentation":{"id":2161,"nodeType":"StructuredDocumentation","src":"3050:152:9","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":2165,"name":"ERC721InvalidSender","nameLocation":"3213:19:9","nodeType":"ErrorDefinition","parameters":{"id":2164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2163,"mutability":"mutable","name":"sender","nameLocation":"3241:6:9","nodeType":"VariableDeclaration","scope":2165,"src":"3233:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2162,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:9"},"src":"3207:42:9"},{"documentation":{"id":2166,"nodeType":"StructuredDocumentation","src":"3255:159:9","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":2170,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:9","nodeType":"ErrorDefinition","parameters":{"id":2169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2168,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:9","nodeType":"VariableDeclaration","scope":2170,"src":"3447:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2167,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:9"},"src":"3419:46:9"},{"documentation":{"id":2171,"nodeType":"StructuredDocumentation","src":"3471:247:9","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":2177,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:9","nodeType":"ErrorDefinition","parameters":{"id":2176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2173,"mutability":"mutable","name":"operator","nameLocation":"3764:8:9","nodeType":"VariableDeclaration","scope":2177,"src":"3756:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2172,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2175,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:9","nodeType":"VariableDeclaration","scope":2177,"src":"3774:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2174,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:9"},"src":"3723:68:9"},{"documentation":{"id":2178,"nodeType":"StructuredDocumentation","src":"3797:174:9","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":2182,"name":"ERC721InvalidApprover","nameLocation":"3982:21:9","nodeType":"ErrorDefinition","parameters":{"id":2181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2180,"mutability":"mutable","name":"approver","nameLocation":"4012:8:9","nodeType":"VariableDeclaration","scope":2182,"src":"4004:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2179,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:9"},"src":"3976:46:9"},{"documentation":{"id":2183,"nodeType":"StructuredDocumentation","src":"4028:197:9","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":2187,"name":"ERC721InvalidOperator","nameLocation":"4236:21:9","nodeType":"ErrorDefinition","parameters":{"id":2186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2185,"mutability":"mutable","name":"operator","nameLocation":"4266:8:9","nodeType":"VariableDeclaration","scope":2187,"src":"4258:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2184,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:9"},"src":"4230:46:9"}],"scope":2236,"src":"2186:2092:9","usedErrors":[2146,2151,2160,2165,2170,2177,2182,2187],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":2189,"nodeType":"StructuredDocumentation","src":"4280:143:9","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":2235,"linearizedBaseContracts":[2235],"name":"IERC1155Errors","nameLocation":"4434:14:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2190,"nodeType":"StructuredDocumentation","src":"4455:361:9","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":2200,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:9","nodeType":"ErrorDefinition","parameters":{"id":2199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2192,"mutability":"mutable","name":"sender","nameLocation":"4862:6:9","nodeType":"VariableDeclaration","scope":2200,"src":"4854:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2191,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2194,"mutability":"mutable","name":"balance","nameLocation":"4878:7:9","nodeType":"VariableDeclaration","scope":2200,"src":"4870:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2193,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2196,"mutability":"mutable","name":"needed","nameLocation":"4895:6:9","nodeType":"VariableDeclaration","scope":2200,"src":"4887:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2195,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2198,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:9","nodeType":"VariableDeclaration","scope":2200,"src":"4903:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2197,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:9"},"src":"4821:99:9"},{"documentation":{"id":2201,"nodeType":"StructuredDocumentation","src":"4926:152:9","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":2205,"name":"ERC1155InvalidSender","nameLocation":"5089:20:9","nodeType":"ErrorDefinition","parameters":{"id":2204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2203,"mutability":"mutable","name":"sender","nameLocation":"5118:6:9","nodeType":"VariableDeclaration","scope":2205,"src":"5110:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2202,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:9"},"src":"5083:43:9"},{"documentation":{"id":2206,"nodeType":"StructuredDocumentation","src":"5132:159:9","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":2210,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:9","nodeType":"ErrorDefinition","parameters":{"id":2209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2208,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:9","nodeType":"VariableDeclaration","scope":2210,"src":"5325:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2207,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:9"},"src":"5296:47:9"},{"documentation":{"id":2211,"nodeType":"StructuredDocumentation","src":"5349:256:9","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":2217,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:9","nodeType":"ErrorDefinition","parameters":{"id":2216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2213,"mutability":"mutable","name":"operator","nameLocation":"5653:8:9","nodeType":"VariableDeclaration","scope":2217,"src":"5645:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2212,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2215,"mutability":"mutable","name":"owner","nameLocation":"5671:5:9","nodeType":"VariableDeclaration","scope":2217,"src":"5663:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2214,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:9"},"src":"5610:68:9"},{"documentation":{"id":2218,"nodeType":"StructuredDocumentation","src":"5684:174:9","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":2222,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:9","nodeType":"ErrorDefinition","parameters":{"id":2221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2220,"mutability":"mutable","name":"approver","nameLocation":"5900:8:9","nodeType":"VariableDeclaration","scope":2222,"src":"5892:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2219,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:9"},"src":"5863:47:9"},{"documentation":{"id":2223,"nodeType":"StructuredDocumentation","src":"5916:197:9","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":2227,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:9","nodeType":"ErrorDefinition","parameters":{"id":2226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2225,"mutability":"mutable","name":"operator","nameLocation":"6155:8:9","nodeType":"VariableDeclaration","scope":2227,"src":"6147:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2224,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:9"},"src":"6118:47:9"},{"documentation":{"id":2228,"nodeType":"StructuredDocumentation","src":"6171:280:9","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":2234,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:9","nodeType":"ErrorDefinition","parameters":{"id":2233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2230,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:9","nodeType":"VariableDeclaration","scope":2234,"src":"6488:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2229,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2232,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:9","nodeType":"VariableDeclaration","scope":2234,"src":"6507:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2231,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:9"},"src":"6456:73:9"}],"scope":2236,"src":"4424:2107:9","usedErrors":[2200,2205,2210,2217,2222,2227,2234],"usedEvents":[]}],"src":"112:6420:9"},"id":9},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol","exportedSymbols":{"Address":[3236],"ERC1967Utils":[2538],"IBeacon":[2548],"StorageSlot":[3529]},"id":2539,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2237,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:10"},{"absolutePath":"@openzeppelin/contracts/proxy/beacon/IBeacon.sol","file":"../beacon/IBeacon.sol","id":2239,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2539,"sourceUnit":2549,"src":"140:46:10","symbolAliases":[{"foreign":{"id":2238,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2548,"src":"148:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":2241,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2539,"sourceUnit":3237,"src":"187:48:10","symbolAliases":[{"foreign":{"id":2240,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"195:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"../../utils/StorageSlot.sol","id":2243,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2539,"sourceUnit":3530,"src":"236:56:10","symbolAliases":[{"foreign":{"id":2242,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"244:11:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC1967Utils","contractDependencies":[],"contractKind":"library","documentation":{"id":2244,"nodeType":"StructuredDocumentation","src":"294:154:10","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots."},"fullyImplemented":true,"id":2538,"linearizedBaseContracts":[2538],"name":"ERC1967Utils","nameLocation":"457:12:10","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2245,"nodeType":"StructuredDocumentation","src":"660:68:10","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":2249,"name":"Upgraded","nameLocation":"739:8:10","nodeType":"EventDefinition","parameters":{"id":2248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2247,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"764:14:10","nodeType":"VariableDeclaration","scope":2249,"src":"748:30:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2246,"name":"address","nodeType":"ElementaryTypeName","src":"748:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"747:32:10"},"src":"733:47:10"},{"anonymous":false,"documentation":{"id":2250,"nodeType":"StructuredDocumentation","src":"786:67:10","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":2256,"name":"AdminChanged","nameLocation":"864:12:10","nodeType":"EventDefinition","parameters":{"id":2255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2252,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"885:13:10","nodeType":"VariableDeclaration","scope":2256,"src":"877:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2251,"name":"address","nodeType":"ElementaryTypeName","src":"877:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2254,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"908:8:10","nodeType":"VariableDeclaration","scope":2256,"src":"900:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2253,"name":"address","nodeType":"ElementaryTypeName","src":"900:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"876:41:10"},"src":"858:60:10"},{"anonymous":false,"documentation":{"id":2257,"nodeType":"StructuredDocumentation","src":"924:59:10","text":" @dev Emitted when the beacon is changed."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":2261,"name":"BeaconUpgraded","nameLocation":"994:14:10","nodeType":"EventDefinition","parameters":{"id":2260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2259,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"1025:6:10","nodeType":"VariableDeclaration","scope":2261,"src":"1009:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2258,"name":"address","nodeType":"ElementaryTypeName","src":"1009:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1008:24:10"},"src":"988:45:10"},{"constant":true,"documentation":{"id":2262,"nodeType":"StructuredDocumentation","src":"1039:170:10","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1."},"id":2265,"mutability":"constant","name":"IMPLEMENTATION_SLOT","nameLocation":"1305:19:10","nodeType":"VariableDeclaration","scope":2538,"src":"1279:114:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2263,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1279:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":2264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1327:66:10","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"documentation":{"id":2266,"nodeType":"StructuredDocumentation","src":"1400:69:10","text":" @dev The `implementation` of the proxy is invalid."},"errorSelector":"4c9c8ce3","id":2270,"name":"ERC1967InvalidImplementation","nameLocation":"1480:28:10","nodeType":"ErrorDefinition","parameters":{"id":2269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2268,"mutability":"mutable","name":"implementation","nameLocation":"1517:14:10","nodeType":"VariableDeclaration","scope":2270,"src":"1509:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2267,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1508:24:10"},"src":"1474:59:10"},{"documentation":{"id":2271,"nodeType":"StructuredDocumentation","src":"1539:60:10","text":" @dev The `admin` of the proxy is invalid."},"errorSelector":"62e77ba2","id":2275,"name":"ERC1967InvalidAdmin","nameLocation":"1610:19:10","nodeType":"ErrorDefinition","parameters":{"id":2274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2273,"mutability":"mutable","name":"admin","nameLocation":"1638:5:10","nodeType":"VariableDeclaration","scope":2275,"src":"1630:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2272,"name":"address","nodeType":"ElementaryTypeName","src":"1630:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1629:15:10"},"src":"1604:41:10"},{"documentation":{"id":2276,"nodeType":"StructuredDocumentation","src":"1651:61:10","text":" @dev The `beacon` of the proxy is invalid."},"errorSelector":"64ced0ec","id":2280,"name":"ERC1967InvalidBeacon","nameLocation":"1723:20:10","nodeType":"ErrorDefinition","parameters":{"id":2279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2278,"mutability":"mutable","name":"beacon","nameLocation":"1752:6:10","nodeType":"VariableDeclaration","scope":2280,"src":"1744:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2277,"name":"address","nodeType":"ElementaryTypeName","src":"1744:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1743:16:10"},"src":"1717:43:10"},{"documentation":{"id":2281,"nodeType":"StructuredDocumentation","src":"1766:82:10","text":" @dev An upgrade function sees `msg.value > 0` that may be lost."},"errorSelector":"b398979f","id":2283,"name":"ERC1967NonPayable","nameLocation":"1859:17:10","nodeType":"ErrorDefinition","parameters":{"id":2282,"nodeType":"ParameterList","parameters":[],"src":"1876:2:10"},"src":"1853:26:10"},{"body":{"id":2295,"nodeType":"Block","src":"2018:77:10","statements":[{"expression":{"expression":{"arguments":[{"id":2291,"name":"IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2265,"src":"2062:19:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2289,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"2035:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$3529_$","typeString":"type(library StorageSlot)"}},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2047:14:10","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3451,"src":"2035:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3425_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2035:47:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3425_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":2293,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2083:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3424,"src":"2035:53:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2288,"id":2294,"nodeType":"Return","src":"2028:60:10"}]},"documentation":{"id":2284,"nodeType":"StructuredDocumentation","src":"1885:67:10","text":" @dev Returns the current implementation address."},"id":2296,"implemented":true,"kind":"function","modifiers":[],"name":"getImplementation","nameLocation":"1966:17:10","nodeType":"FunctionDefinition","parameters":{"id":2285,"nodeType":"ParameterList","parameters":[],"src":"1983:2:10"},"returnParameters":{"id":2288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2296,"src":"2009:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2286,"name":"address","nodeType":"ElementaryTypeName","src":"2009:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2008:9:10"},"scope":2538,"src":"1957:138:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2322,"nodeType":"Block","src":"2249:218:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2302,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"2263:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2281:4:10","memberName":"code","nodeType":"MemberAccess","src":"2263:22:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2286:6:10","memberName":"length","nodeType":"MemberAccess","src":"2263:29:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2296:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2263:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2312,"nodeType":"IfStatement","src":"2259:119:10","trueBody":{"id":2311,"nodeType":"Block","src":"2299:79:10","statements":[{"errorCall":{"arguments":[{"id":2308,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"2349:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2307,"name":"ERC1967InvalidImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2270,"src":"2320:28:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2320:47:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2310,"nodeType":"RevertStatement","src":"2313:54:10"}]}},{"expression":{"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":2316,"name":"IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2265,"src":"2414:19:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2313,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"2387:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$3529_$","typeString":"type(library StorageSlot)"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2399:14:10","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3451,"src":"2387:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3425_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2387:47:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3425_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":2318,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2435:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3424,"src":"2387:53:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2319,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"2443:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2387:73:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2321,"nodeType":"ExpressionStatement","src":"2387:73:10"}]},"documentation":{"id":2297,"nodeType":"StructuredDocumentation","src":"2101:80:10","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":2323,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"2195:18:10","nodeType":"FunctionDefinition","parameters":{"id":2300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2299,"mutability":"mutable","name":"newImplementation","nameLocation":"2222:17:10","nodeType":"VariableDeclaration","scope":2323,"src":"2214:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2298,"name":"address","nodeType":"ElementaryTypeName","src":"2214:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2213:27:10"},"returnParameters":{"id":2301,"nodeType":"ParameterList","parameters":[],"src":"2249:0:10"},"scope":2538,"src":"2186:281:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2356,"nodeType":"Block","src":"2860:254:10","statements":[{"expression":{"arguments":[{"id":2332,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"2889:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2331,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2323,"src":"2870:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2870:37:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2334,"nodeType":"ExpressionStatement","src":"2870:37:10"},{"eventCall":{"arguments":[{"id":2336,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"2931:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2335,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2249,"src":"2922:8:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2922:27:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2338,"nodeType":"EmitStatement","src":"2917:32:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2339,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2328,"src":"2964:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2969:6:10","memberName":"length","nodeType":"MemberAccess","src":"2964:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2978:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2964:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2354,"nodeType":"Block","src":"3065:43:10","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2351,"name":"_checkNonPayable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"3079:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3079:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2353,"nodeType":"ExpressionStatement","src":"3079:18:10"}]},"id":2355,"nodeType":"IfStatement","src":"2960:148:10","trueBody":{"id":2350,"nodeType":"Block","src":"2981:78:10","statements":[{"expression":{"arguments":[{"id":2346,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"3024:17:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2347,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2328,"src":"3043:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2343,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"2995:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$3236_$","typeString":"type(library Address)"}},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3003:20:10","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":3155,"src":"2995:28:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2995:53:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2349,"nodeType":"ExpressionStatement","src":"2995:53:10"}]}}]},"documentation":{"id":2324,"nodeType":"StructuredDocumentation","src":"2473:301:10","text":" @dev Performs implementation upgrade with additional setup call if data is nonempty.\n This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n to avoid stuck value in the contract.\n Emits an {IERC1967-Upgraded} event."},"id":2357,"implemented":true,"kind":"function","modifiers":[],"name":"upgradeToAndCall","nameLocation":"2788:16:10","nodeType":"FunctionDefinition","parameters":{"id":2329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2326,"mutability":"mutable","name":"newImplementation","nameLocation":"2813:17:10","nodeType":"VariableDeclaration","scope":2357,"src":"2805:25:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2325,"name":"address","nodeType":"ElementaryTypeName","src":"2805:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2328,"mutability":"mutable","name":"data","nameLocation":"2845:4:10","nodeType":"VariableDeclaration","scope":2357,"src":"2832:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2327,"name":"bytes","nodeType":"ElementaryTypeName","src":"2832:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2804:46:10"},"returnParameters":{"id":2330,"nodeType":"ParameterList","parameters":[],"src":"2860:0:10"},"scope":2538,"src":"2779:335:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":2358,"nodeType":"StructuredDocumentation","src":"3120:145:10","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1."},"id":2361,"mutability":"constant","name":"ADMIN_SLOT","nameLocation":"3361:10:10","nodeType":"VariableDeclaration","scope":2538,"src":"3335:105:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2359,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3335:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":2360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3374:66:10","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"body":{"id":2373,"nodeType":"Block","src":"3844:68:10","statements":[{"expression":{"expression":{"arguments":[{"id":2369,"name":"ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"3888:10:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2367,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"3861:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$3529_$","typeString":"type(library StorageSlot)"}},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3873:14:10","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3451,"src":"3861:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3425_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3861:38:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3425_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":2371,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3900:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3424,"src":"3861:44:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2366,"id":2372,"nodeType":"Return","src":"3854:51:10"}]},"documentation":{"id":2362,"nodeType":"StructuredDocumentation","src":"3447:340:10","text":" @dev Returns the current admin.\n TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`"},"id":2374,"implemented":true,"kind":"function","modifiers":[],"name":"getAdmin","nameLocation":"3801:8:10","nodeType":"FunctionDefinition","parameters":{"id":2363,"nodeType":"ParameterList","parameters":[],"src":"3809:2:10"},"returnParameters":{"id":2366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2374,"src":"3835:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2364,"name":"address","nodeType":"ElementaryTypeName","src":"3835:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3834:9:10"},"scope":2538,"src":"3792:120:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2404,"nodeType":"Block","src":"4039:172:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2380,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2377,"src":"4053:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2382,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4065:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2381,"name":"address","nodeType":"ElementaryTypeName","src":"4065:7:10","typeDescriptions":{}}},"id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4065:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4053:22:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2394,"nodeType":"IfStatement","src":"4049:91:10","trueBody":{"id":2393,"nodeType":"Block","src":"4077:63:10","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4126:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2388,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4118:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2387,"name":"address","nodeType":"ElementaryTypeName","src":"4118:7:10","typeDescriptions":{}}},"id":2390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4118:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2386,"name":"ERC1967InvalidAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"4098:19:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4098:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2392,"nodeType":"RevertStatement","src":"4091:38:10"}]}},{"expression":{"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":2398,"name":"ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"4176:10:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2395,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"4149:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$3529_$","typeString":"type(library StorageSlot)"}},"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4161:14:10","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3451,"src":"4149:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3425_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4149:38:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3425_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":2400,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4188:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3424,"src":"4149:44:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2401,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2377,"src":"4196:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4149:55:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2403,"nodeType":"ExpressionStatement","src":"4149:55:10"}]},"documentation":{"id":2375,"nodeType":"StructuredDocumentation","src":"3918:71:10","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":2405,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"4003:9:10","nodeType":"FunctionDefinition","parameters":{"id":2378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2377,"mutability":"mutable","name":"newAdmin","nameLocation":"4021:8:10","nodeType":"VariableDeclaration","scope":2405,"src":"4013:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2376,"name":"address","nodeType":"ElementaryTypeName","src":"4013:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4012:18:10"},"returnParameters":{"id":2379,"nodeType":"ParameterList","parameters":[],"src":"4039:0:10"},"scope":2538,"src":"3994:217:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2421,"nodeType":"Block","src":"4379:85:10","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2412,"name":"getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"4407:8:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4407:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2414,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"4419:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2411,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"4394:12:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4394:34:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2416,"nodeType":"EmitStatement","src":"4389:39:10"},{"expression":{"arguments":[{"id":2418,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2408,"src":"4448:8:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2417,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"4438:9:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2420,"nodeType":"ExpressionStatement","src":"4438:19:10"}]},"documentation":{"id":2406,"nodeType":"StructuredDocumentation","src":"4217:109:10","text":" @dev Changes the admin of the proxy.\n Emits an {IERC1967-AdminChanged} event."},"id":2422,"implemented":true,"kind":"function","modifiers":[],"name":"changeAdmin","nameLocation":"4340:11:10","nodeType":"FunctionDefinition","parameters":{"id":2409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2408,"mutability":"mutable","name":"newAdmin","nameLocation":"4360:8:10","nodeType":"VariableDeclaration","scope":2422,"src":"4352:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2407,"name":"address","nodeType":"ElementaryTypeName","src":"4352:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4351:18:10"},"returnParameters":{"id":2410,"nodeType":"ParameterList","parameters":[],"src":"4379:0:10"},"scope":2538,"src":"4331:133:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":2423,"nodeType":"StructuredDocumentation","src":"4470:201:10","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1."},"id":2426,"mutability":"constant","name":"BEACON_SLOT","nameLocation":"4767:11:10","nodeType":"VariableDeclaration","scope":2538,"src":"4741:106:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2424,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4741:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4781:66:10","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"body":{"id":2438,"nodeType":"Block","src":"4963:69:10","statements":[{"expression":{"expression":{"arguments":[{"id":2434,"name":"BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"5007:11:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2432,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"4980:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$3529_$","typeString":"type(library StorageSlot)"}},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4992:14:10","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3451,"src":"4980:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3425_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4980:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3425_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":2436,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5020:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3424,"src":"4980:45:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2431,"id":2437,"nodeType":"Return","src":"4973:52:10"}]},"documentation":{"id":2427,"nodeType":"StructuredDocumentation","src":"4854:51:10","text":" @dev Returns the current beacon."},"id":2439,"implemented":true,"kind":"function","modifiers":[],"name":"getBeacon","nameLocation":"4919:9:10","nodeType":"FunctionDefinition","parameters":{"id":2428,"nodeType":"ParameterList","parameters":[],"src":"4928:2:10"},"returnParameters":{"id":2431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2430,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2439,"src":"4954:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2429,"name":"address","nodeType":"ElementaryTypeName","src":"4954:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4953:9:10"},"scope":2538,"src":"4910:122:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2484,"nodeType":"Block","src":"5161:390:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2445,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"5175:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5185:4:10","memberName":"code","nodeType":"MemberAccess","src":"5175:14:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5190:6:10","memberName":"length","nodeType":"MemberAccess","src":"5175:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5200:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5175:26:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2455,"nodeType":"IfStatement","src":"5171:95:10","trueBody":{"id":2454,"nodeType":"Block","src":"5203:63:10","statements":[{"errorCall":{"arguments":[{"id":2451,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"5245:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2450,"name":"ERC1967InvalidBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"5224:20:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5224:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2453,"nodeType":"RevertStatement","src":"5217:38:10"}]}},{"expression":{"id":2463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":2459,"name":"BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2426,"src":"5303:11:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2456,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"5276:11:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$3529_$","typeString":"type(library StorageSlot)"}},"id":2458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:14:10","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3451,"src":"5276:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3425_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5276:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3425_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":2461,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5316:5:10","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3424,"src":"5276:45:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2462,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"5324:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5276:57:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2464,"nodeType":"ExpressionStatement","src":"5276:57:10"},{"assignments":[2466],"declarations":[{"constant":false,"id":2466,"mutability":"mutable","name":"beaconImplementation","nameLocation":"5352:20:10","nodeType":"VariableDeclaration","scope":2484,"src":"5344:28:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2465,"name":"address","nodeType":"ElementaryTypeName","src":"5344:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2472,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":2468,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"5383:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2467,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2548,"src":"5375:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeacon_$2548_$","typeString":"type(contract IBeacon)"}},"id":2469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5375:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeacon_$2548","typeString":"contract IBeacon"}},"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5394:14:10","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":2547,"src":"5375:33:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5375:35:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5344:66:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2473,"name":"beaconImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"5424:20:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5445:4:10","memberName":"code","nodeType":"MemberAccess","src":"5424:25:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5450:6:10","memberName":"length","nodeType":"MemberAccess","src":"5424:32:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5460:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5424:37:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2483,"nodeType":"IfStatement","src":"5420:125:10","trueBody":{"id":2482,"nodeType":"Block","src":"5463:82:10","statements":[{"errorCall":{"arguments":[{"id":2479,"name":"beaconImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"5513:20:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2478,"name":"ERC1967InvalidImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2270,"src":"5484:28:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5484:50:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2481,"nodeType":"RevertStatement","src":"5477:57:10"}]}}]},"documentation":{"id":2440,"nodeType":"StructuredDocumentation","src":"5038:71:10","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":2485,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5123:10:10","nodeType":"FunctionDefinition","parameters":{"id":2443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2442,"mutability":"mutable","name":"newBeacon","nameLocation":"5142:9:10","nodeType":"VariableDeclaration","scope":2485,"src":"5134:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2441,"name":"address","nodeType":"ElementaryTypeName","src":"5134:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5133:19:10"},"returnParameters":{"id":2444,"nodeType":"ParameterList","parameters":[],"src":"5161:0:10"},"scope":2538,"src":"5114:437:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2522,"nodeType":"Block","src":"6155:254:10","statements":[{"expression":{"arguments":[{"id":2494,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"6176:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2493,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2485,"src":"6165:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6165:21:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2496,"nodeType":"ExpressionStatement","src":"6165:21:10"},{"eventCall":{"arguments":[{"id":2498,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"6216:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2497,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2261,"src":"6201:14:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6201:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2500,"nodeType":"EmitStatement","src":"6196:30:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2501,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"6241:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6246:6:10","memberName":"length","nodeType":"MemberAccess","src":"6241:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6255:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6241:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2520,"nodeType":"Block","src":"6360:43:10","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2517,"name":"_checkNonPayable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"6374:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6374:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2519,"nodeType":"ExpressionStatement","src":"6374:18:10"}]},"id":2521,"nodeType":"IfStatement","src":"6237:166:10","trueBody":{"id":2516,"nodeType":"Block","src":"6258:96:10","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":2509,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2488,"src":"6309:9:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2508,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2548,"src":"6301:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeacon_$2548_$","typeString":"type(contract IBeacon)"}},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6301:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeacon_$2548","typeString":"contract IBeacon"}},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6320:14:10","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":2547,"src":"6301:33:10","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6301:35:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2513,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"6338:4:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2505,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"6272:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$3236_$","typeString":"type(library Address)"}},"id":2507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6280:20:10","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":3155,"src":"6272:28:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6272:71:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2515,"nodeType":"ExpressionStatement","src":"6272:71:10"}]}}]},"documentation":{"id":2486,"nodeType":"StructuredDocumentation","src":"5557:514:10","text":" @dev Change the beacon and trigger a setup call if data is nonempty.\n This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n to avoid stuck value in the contract.\n Emits an {IERC1967-BeaconUpgraded} event.\n CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n efficiency."},"id":2523,"implemented":true,"kind":"function","modifiers":[],"name":"upgradeBeaconToAndCall","nameLocation":"6085:22:10","nodeType":"FunctionDefinition","parameters":{"id":2491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2488,"mutability":"mutable","name":"newBeacon","nameLocation":"6116:9:10","nodeType":"VariableDeclaration","scope":2523,"src":"6108:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2487,"name":"address","nodeType":"ElementaryTypeName","src":"6108:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2490,"mutability":"mutable","name":"data","nameLocation":"6140:4:10","nodeType":"VariableDeclaration","scope":2523,"src":"6127:17:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2489,"name":"bytes","nodeType":"ElementaryTypeName","src":"6127:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:38:10"},"returnParameters":{"id":2492,"nodeType":"ParameterList","parameters":[],"src":"6155:0:10"},"scope":2538,"src":"6076:333:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2536,"nodeType":"Block","src":"6634:86:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2527,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6648:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6652:5:10","memberName":"value","nodeType":"MemberAccess","src":"6648:9:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6660:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6648:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2535,"nodeType":"IfStatement","src":"6644:70:10","trueBody":{"id":2534,"nodeType":"Block","src":"6663:51:10","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2531,"name":"ERC1967NonPayable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"6684:17:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6684:19:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2533,"nodeType":"RevertStatement","src":"6677:26:10"}]}}]},"documentation":{"id":2524,"nodeType":"StructuredDocumentation","src":"6415:178:10","text":" @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n if an upgrade doesn't perform an initialization call."},"id":2537,"implemented":true,"kind":"function","modifiers":[],"name":"_checkNonPayable","nameLocation":"6607:16:10","nodeType":"FunctionDefinition","parameters":{"id":2525,"nodeType":"ParameterList","parameters":[],"src":"6623:2:10"},"returnParameters":{"id":2526,"nodeType":"ParameterList","parameters":[],"src":"6634:0:10"},"scope":2538,"src":"6598:122:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":2539,"src":"449:6273:10","usedErrors":[2270,2275,2280,2283],"usedEvents":[2249,2256,2261]}],"src":"114:6609:10"},"id":10},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/beacon/IBeacon.sol","exportedSymbols":{"IBeacon":[2548]},"id":2549,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2540,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeacon","contractDependencies":[],"contractKind":"interface","documentation":{"id":2541,"nodeType":"StructuredDocumentation","src":"134:79:11","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":2548,"linearizedBaseContracts":[2548],"name":"IBeacon","nameLocation":"224:7:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2542,"nodeType":"StructuredDocumentation","src":"238:168:11","text":" @dev Must return an address that can be used as a delegate call target.\n {UpgradeableBeacon} will check that this address is a contract."},"functionSelector":"5c60da1b","id":2547,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"420:14:11","nodeType":"FunctionDefinition","parameters":{"id":2543,"nodeType":"ParameterList","parameters":[],"src":"434:2:11"},"returnParameters":{"id":2546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2545,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2547,"src":"460:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2544,"name":"address","nodeType":"ElementaryTypeName","src":"460:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"459:9:11"},"scope":2548,"src":"411:58:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2549,"src":"214:257:11","usedErrors":[],"usedEvents":[]}],"src":"108:364:11"},"id":11},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","exportedSymbols":{"IERC1155":[2671],"IERC165":[3913]},"id":2672,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2550,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"110:24:12"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":2552,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2672,"sourceUnit":3914,"src":"136:62:12","symbolAliases":[{"foreign":{"id":2551,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3913,"src":"144:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2554,"name":"IERC165","nameLocations":["358:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":3913,"src":"358:7:12"},"id":2555,"nodeType":"InheritanceSpecifier","src":"358:7:12"}],"canonicalName":"IERC1155","contractDependencies":[],"contractKind":"interface","documentation":{"id":2553,"nodeType":"StructuredDocumentation","src":"200:135:12","text":" @dev Required interface of an ERC1155 compliant contract, as defined in the\n https://eips.ethereum.org/EIPS/eip-1155[EIP]."},"fullyImplemented":false,"id":2671,"linearizedBaseContracts":[2671,3913],"name":"IERC1155","nameLocation":"346:8:12","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2556,"nodeType":"StructuredDocumentation","src":"372:125:12","text":" @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"eventSelector":"c3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62","id":2568,"name":"TransferSingle","nameLocation":"508:14:12","nodeType":"EventDefinition","parameters":{"id":2567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2558,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"539:8:12","nodeType":"VariableDeclaration","scope":2568,"src":"523:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2557,"name":"address","nodeType":"ElementaryTypeName","src":"523:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2560,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"565:4:12","nodeType":"VariableDeclaration","scope":2568,"src":"549:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2559,"name":"address","nodeType":"ElementaryTypeName","src":"549:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2562,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"587:2:12","nodeType":"VariableDeclaration","scope":2568,"src":"571:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2561,"name":"address","nodeType":"ElementaryTypeName","src":"571:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2564,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"599:2:12","nodeType":"VariableDeclaration","scope":2568,"src":"591:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2563,"name":"uint256","nodeType":"ElementaryTypeName","src":"591:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2566,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"611:5:12","nodeType":"VariableDeclaration","scope":2568,"src":"603:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2565,"name":"uint256","nodeType":"ElementaryTypeName","src":"603:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"522:95:12"},"src":"502:116:12"},{"anonymous":false,"documentation":{"id":2569,"nodeType":"StructuredDocumentation","src":"624:144:12","text":" @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n transfers."},"eventSelector":"4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb","id":2583,"name":"TransferBatch","nameLocation":"779:13:12","nodeType":"EventDefinition","parameters":{"id":2582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2571,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"818:8:12","nodeType":"VariableDeclaration","scope":2583,"src":"802:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2570,"name":"address","nodeType":"ElementaryTypeName","src":"802:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2573,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"852:4:12","nodeType":"VariableDeclaration","scope":2583,"src":"836:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2572,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2575,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"882:2:12","nodeType":"VariableDeclaration","scope":2583,"src":"866:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2574,"name":"address","nodeType":"ElementaryTypeName","src":"866:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2578,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"904:3:12","nodeType":"VariableDeclaration","scope":2583,"src":"894:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2576,"name":"uint256","nodeType":"ElementaryTypeName","src":"894:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2577,"nodeType":"ArrayTypeName","src":"894:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2581,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"927:6:12","nodeType":"VariableDeclaration","scope":2583,"src":"917:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2579,"name":"uint256","nodeType":"ElementaryTypeName","src":"917:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2580,"nodeType":"ArrayTypeName","src":"917:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"792:147:12"},"src":"773:167:12"},{"anonymous":false,"documentation":{"id":2584,"nodeType":"StructuredDocumentation","src":"946:147:12","text":" @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n `approved`."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":2592,"name":"ApprovalForAll","nameLocation":"1104:14:12","nodeType":"EventDefinition","parameters":{"id":2591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2586,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1135:7:12","nodeType":"VariableDeclaration","scope":2592,"src":"1119:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2585,"name":"address","nodeType":"ElementaryTypeName","src":"1119:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2588,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1160:8:12","nodeType":"VariableDeclaration","scope":2592,"src":"1144:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2587,"name":"address","nodeType":"ElementaryTypeName","src":"1144:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2590,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1175:8:12","nodeType":"VariableDeclaration","scope":2592,"src":"1170:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2589,"name":"bool","nodeType":"ElementaryTypeName","src":"1170:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1118:66:12"},"src":"1098:87:12"},{"anonymous":false,"documentation":{"id":2593,"nodeType":"StructuredDocumentation","src":"1191:343:12","text":" @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n If an {URI} event was emitted for `id`, the standard\n https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n returned by {IERC1155MetadataURI-uri}."},"eventSelector":"6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b","id":2599,"name":"URI","nameLocation":"1545:3:12","nodeType":"EventDefinition","parameters":{"id":2598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2595,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1556:5:12","nodeType":"VariableDeclaration","scope":2599,"src":"1549:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2594,"name":"string","nodeType":"ElementaryTypeName","src":"1549:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2597,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"1579:2:12","nodeType":"VariableDeclaration","scope":2599,"src":"1563:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2596,"name":"uint256","nodeType":"ElementaryTypeName","src":"1563:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1548:34:12"},"src":"1539:44:12"},{"documentation":{"id":2600,"nodeType":"StructuredDocumentation","src":"1589:172:12","text":" @dev Returns the value of tokens of token type `id` owned by `account`.\n Requirements:\n - `account` cannot be the zero address."},"functionSelector":"00fdd58e","id":2609,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1775:9:12","nodeType":"FunctionDefinition","parameters":{"id":2605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2602,"mutability":"mutable","name":"account","nameLocation":"1793:7:12","nodeType":"VariableDeclaration","scope":2609,"src":"1785:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2601,"name":"address","nodeType":"ElementaryTypeName","src":"1785:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2604,"mutability":"mutable","name":"id","nameLocation":"1810:2:12","nodeType":"VariableDeclaration","scope":2609,"src":"1802:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2603,"name":"uint256","nodeType":"ElementaryTypeName","src":"1802:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1784:29:12"},"returnParameters":{"id":2608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2609,"src":"1837:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2606,"name":"uint256","nodeType":"ElementaryTypeName","src":"1837:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1836:9:12"},"scope":2671,"src":"1766:80:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2610,"nodeType":"StructuredDocumentation","src":"1852:188:12","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n Requirements:\n - `accounts` and `ids` must have the same length."},"functionSelector":"4e1273f4","id":2622,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"2054:14:12","nodeType":"FunctionDefinition","parameters":{"id":2617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2613,"mutability":"mutable","name":"accounts","nameLocation":"2097:8:12","nodeType":"VariableDeclaration","scope":2622,"src":"2078:27:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2611,"name":"address","nodeType":"ElementaryTypeName","src":"2078:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2612,"nodeType":"ArrayTypeName","src":"2078:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2616,"mutability":"mutable","name":"ids","nameLocation":"2134:3:12","nodeType":"VariableDeclaration","scope":2622,"src":"2115:22:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2614,"name":"uint256","nodeType":"ElementaryTypeName","src":"2115:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2615,"nodeType":"ArrayTypeName","src":"2115:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2068:75:12"},"returnParameters":{"id":2621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2620,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2622,"src":"2167:16:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2618,"name":"uint256","nodeType":"ElementaryTypeName","src":"2167:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2619,"nodeType":"ArrayTypeName","src":"2167:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2166:18:12"},"scope":2671,"src":"2045:140:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2623,"nodeType":"StructuredDocumentation","src":"2191:248:12","text":" @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n Emits an {ApprovalForAll} event.\n Requirements:\n - `operator` cannot be the caller."},"functionSelector":"a22cb465","id":2630,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"2453:17:12","nodeType":"FunctionDefinition","parameters":{"id":2628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2625,"mutability":"mutable","name":"operator","nameLocation":"2479:8:12","nodeType":"VariableDeclaration","scope":2630,"src":"2471:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2624,"name":"address","nodeType":"ElementaryTypeName","src":"2471:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2627,"mutability":"mutable","name":"approved","nameLocation":"2494:8:12","nodeType":"VariableDeclaration","scope":2630,"src":"2489:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2626,"name":"bool","nodeType":"ElementaryTypeName","src":"2489:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2470:33:12"},"returnParameters":{"id":2629,"nodeType":"ParameterList","parameters":[],"src":"2512:0:12"},"scope":2671,"src":"2444:69:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2631,"nodeType":"StructuredDocumentation","src":"2519:135:12","text":" @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n See {setApprovalForAll}."},"functionSelector":"e985e9c5","id":2640,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2668:16:12","nodeType":"FunctionDefinition","parameters":{"id":2636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2633,"mutability":"mutable","name":"account","nameLocation":"2693:7:12","nodeType":"VariableDeclaration","scope":2640,"src":"2685:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2632,"name":"address","nodeType":"ElementaryTypeName","src":"2685:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2635,"mutability":"mutable","name":"operator","nameLocation":"2710:8:12","nodeType":"VariableDeclaration","scope":2640,"src":"2702:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2634,"name":"address","nodeType":"ElementaryTypeName","src":"2702:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2684:35:12"},"returnParameters":{"id":2639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2638,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2640,"src":"2743:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2637,"name":"bool","nodeType":"ElementaryTypeName","src":"2743:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2742:6:12"},"scope":2671,"src":"2659:90:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2641,"nodeType":"StructuredDocumentation","src":"2755:910:12","text":" @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n Ensure to follow the checks-effects-interactions pattern and consider employing\n reentrancy guards when interacting with untrusted contracts.\n Emits a {TransferSingle} event.\n Requirements:\n - `to` cannot be the zero address.\n - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n - `from` must have a balance of tokens of type `id` of at least `value` amount.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n acceptance magic value."},"functionSelector":"f242432a","id":2654,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3679:16:12","nodeType":"FunctionDefinition","parameters":{"id":2652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2643,"mutability":"mutable","name":"from","nameLocation":"3704:4:12","nodeType":"VariableDeclaration","scope":2654,"src":"3696:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2642,"name":"address","nodeType":"ElementaryTypeName","src":"3696:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2645,"mutability":"mutable","name":"to","nameLocation":"3718:2:12","nodeType":"VariableDeclaration","scope":2654,"src":"3710:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2644,"name":"address","nodeType":"ElementaryTypeName","src":"3710:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2647,"mutability":"mutable","name":"id","nameLocation":"3730:2:12","nodeType":"VariableDeclaration","scope":2654,"src":"3722:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2646,"name":"uint256","nodeType":"ElementaryTypeName","src":"3722:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2649,"mutability":"mutable","name":"value","nameLocation":"3742:5:12","nodeType":"VariableDeclaration","scope":2654,"src":"3734:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2648,"name":"uint256","nodeType":"ElementaryTypeName","src":"3734:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2651,"mutability":"mutable","name":"data","nameLocation":"3764:4:12","nodeType":"VariableDeclaration","scope":2654,"src":"3749:19:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2650,"name":"bytes","nodeType":"ElementaryTypeName","src":"3749:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3695:74:12"},"returnParameters":{"id":2653,"nodeType":"ParameterList","parameters":[],"src":"3778:0:12"},"scope":2671,"src":"3670:109:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2655,"nodeType":"StructuredDocumentation","src":"3785:744:12","text":" @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n Ensure to follow the checks-effects-interactions pattern and consider employing\n reentrancy guards when interacting with untrusted contracts.\n Emits a {TransferBatch} event.\n Requirements:\n - `ids` and `values` must have the same length.\n - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n acceptance magic value."},"functionSelector":"2eb2c2d6","id":2670,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"4543:21:12","nodeType":"FunctionDefinition","parameters":{"id":2668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2657,"mutability":"mutable","name":"from","nameLocation":"4582:4:12","nodeType":"VariableDeclaration","scope":2670,"src":"4574:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2656,"name":"address","nodeType":"ElementaryTypeName","src":"4574:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2659,"mutability":"mutable","name":"to","nameLocation":"4604:2:12","nodeType":"VariableDeclaration","scope":2670,"src":"4596:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2658,"name":"address","nodeType":"ElementaryTypeName","src":"4596:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2662,"mutability":"mutable","name":"ids","nameLocation":"4635:3:12","nodeType":"VariableDeclaration","scope":2670,"src":"4616:22:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2660,"name":"uint256","nodeType":"ElementaryTypeName","src":"4616:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2661,"nodeType":"ArrayTypeName","src":"4616:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2665,"mutability":"mutable","name":"values","nameLocation":"4667:6:12","nodeType":"VariableDeclaration","scope":2670,"src":"4648:25:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2663,"name":"uint256","nodeType":"ElementaryTypeName","src":"4648:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2664,"nodeType":"ArrayTypeName","src":"4648:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2667,"mutability":"mutable","name":"data","nameLocation":"4698:4:12","nodeType":"VariableDeclaration","scope":2670,"src":"4683:19:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2666,"name":"bytes","nodeType":"ElementaryTypeName","src":"4683:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4564:144:12"},"returnParameters":{"id":2669,"nodeType":"ParameterList","parameters":[],"src":"4717:0:12"},"scope":2671,"src":"4534:184:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2672,"src":"336:4384:12","usedErrors":[],"usedEvents":[2568,2583,2592,2599]}],"src":"110:4611:12"},"id":12},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol","exportedSymbols":{"IERC1155Receiver":[2713],"IERC165":[3913]},"id":2714,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2673,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"118:24:13"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":2675,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2714,"sourceUnit":3914,"src":"144:62:13","symbolAliases":[{"foreign":{"id":2674,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3913,"src":"152:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2677,"name":"IERC165","nameLocations":["357:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":3913,"src":"357:7:13"},"id":2678,"nodeType":"InheritanceSpecifier","src":"357:7:13"}],"canonicalName":"IERC1155Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":2676,"nodeType":"StructuredDocumentation","src":"208:118:13","text":" @dev Interface that must be implemented by smart contracts in order to receive\n ERC-1155 token transfers."},"fullyImplemented":false,"id":2713,"linearizedBaseContracts":[2713,3913],"name":"IERC1155Receiver","nameLocation":"337:16:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2679,"nodeType":"StructuredDocumentation","src":"371:826:13","text":" @dev Handles the receipt of a single ERC1155 token type. This function is\n called at the end of a `safeTransferFrom` after the balance has been updated.\n NOTE: To accept the transfer, this must return\n `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n (i.e. 0xf23a6e61, or its own function selector).\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"},"functionSelector":"f23a6e61","id":2694,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1211:17:13","nodeType":"FunctionDefinition","parameters":{"id":2690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2681,"mutability":"mutable","name":"operator","nameLocation":"1246:8:13","nodeType":"VariableDeclaration","scope":2694,"src":"1238:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2680,"name":"address","nodeType":"ElementaryTypeName","src":"1238:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2683,"mutability":"mutable","name":"from","nameLocation":"1272:4:13","nodeType":"VariableDeclaration","scope":2694,"src":"1264:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2682,"name":"address","nodeType":"ElementaryTypeName","src":"1264:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2685,"mutability":"mutable","name":"id","nameLocation":"1294:2:13","nodeType":"VariableDeclaration","scope":2694,"src":"1286:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2684,"name":"uint256","nodeType":"ElementaryTypeName","src":"1286:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2687,"mutability":"mutable","name":"value","nameLocation":"1314:5:13","nodeType":"VariableDeclaration","scope":2694,"src":"1306:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2686,"name":"uint256","nodeType":"ElementaryTypeName","src":"1306:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2689,"mutability":"mutable","name":"data","nameLocation":"1344:4:13","nodeType":"VariableDeclaration","scope":2694,"src":"1329:19:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2688,"name":"bytes","nodeType":"ElementaryTypeName","src":"1329:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1228:126:13"},"returnParameters":{"id":2693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2692,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2694,"src":"1373:6:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2691,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1373:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1372:8:13"},"scope":2713,"src":"1202:179:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2695,"nodeType":"StructuredDocumentation","src":"1387:994:13","text":" @dev Handles the receipt of a multiple ERC1155 token types. This function\n is called at the end of a `safeBatchTransferFrom` after the balances have\n been updated.\n NOTE: To accept the transfer(s), this must return\n `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n (i.e. 0xbc197c81, or its own function selector).\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match values array)\n @param values An array containing amounts of each token being transferred (order and length must match ids array)\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"},"functionSelector":"bc197c81","id":2712,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2395:22:13","nodeType":"FunctionDefinition","parameters":{"id":2708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2697,"mutability":"mutable","name":"operator","nameLocation":"2435:8:13","nodeType":"VariableDeclaration","scope":2712,"src":"2427:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2696,"name":"address","nodeType":"ElementaryTypeName","src":"2427:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2699,"mutability":"mutable","name":"from","nameLocation":"2461:4:13","nodeType":"VariableDeclaration","scope":2712,"src":"2453:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2698,"name":"address","nodeType":"ElementaryTypeName","src":"2453:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2702,"mutability":"mutable","name":"ids","nameLocation":"2494:3:13","nodeType":"VariableDeclaration","scope":2712,"src":"2475:22:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2700,"name":"uint256","nodeType":"ElementaryTypeName","src":"2475:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2701,"nodeType":"ArrayTypeName","src":"2475:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2705,"mutability":"mutable","name":"values","nameLocation":"2526:6:13","nodeType":"VariableDeclaration","scope":2712,"src":"2507:25:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2703,"name":"uint256","nodeType":"ElementaryTypeName","src":"2507:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2704,"nodeType":"ArrayTypeName","src":"2507:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2707,"mutability":"mutable","name":"data","nameLocation":"2557:4:13","nodeType":"VariableDeclaration","scope":2712,"src":"2542:19:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2706,"name":"bytes","nodeType":"ElementaryTypeName","src":"2542:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2417:150:13"},"returnParameters":{"id":2711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2710,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2712,"src":"2586:6:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2709,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2586:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2585:8:13"},"scope":2713,"src":"2386:208:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2714,"src":"327:2269:13","usedErrors":[],"usedEvents":[]}],"src":"118:2479:13"},"id":13},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol","exportedSymbols":{"IERC1155":[2671],"IERC1155MetadataURI":[2729]},"id":2730,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2715,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"132:24:14"},{"absolutePath":"@openzeppelin/contracts/token/ERC1155/IERC1155.sol","file":"../IERC1155.sol","id":2717,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2730,"sourceUnit":2672,"src":"158:41:14","symbolAliases":[{"foreign":{"id":2716,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"166:8:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2719,"name":"IERC1155","nameLocations":["399:8:14"],"nodeType":"IdentifierPath","referencedDeclaration":2671,"src":"399:8:14"},"id":2720,"nodeType":"InheritanceSpecifier","src":"399:8:14"}],"canonicalName":"IERC1155MetadataURI","contractDependencies":[],"contractKind":"interface","documentation":{"id":2718,"nodeType":"StructuredDocumentation","src":"201:164:14","text":" @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP]."},"fullyImplemented":false,"id":2729,"linearizedBaseContracts":[2729,2671,3913],"name":"IERC1155MetadataURI","nameLocation":"376:19:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2721,"nodeType":"StructuredDocumentation","src":"414:192:14","text":" @dev Returns the URI for token type `id`.\n If the `\\{id\\}` substring is present in the URI, it must be replaced by\n clients with the actual token type ID."},"functionSelector":"0e89341c","id":2728,"implemented":false,"kind":"function","modifiers":[],"name":"uri","nameLocation":"620:3:14","nodeType":"FunctionDefinition","parameters":{"id":2724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2723,"mutability":"mutable","name":"id","nameLocation":"632:2:14","nodeType":"VariableDeclaration","scope":2728,"src":"624:10:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2722,"name":"uint256","nodeType":"ElementaryTypeName","src":"624:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"623:12:14"},"returnParameters":{"id":2727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2726,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2728,"src":"659:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2725,"name":"string","nodeType":"ElementaryTypeName","src":"659:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"658:15:14"},"scope":2729,"src":"611:63:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2730,"src":"366:310:14","usedErrors":[],"usedEvents":[2568,2583,2592,2599]}],"src":"132:545:14"},"id":14},"@openzeppelin/contracts/token/common/ERC2981.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/common/ERC2981.sol","exportedSymbols":{"ERC165":[3901],"ERC2981":[2983],"IERC165":[3913],"IERC2981":[2088]},"id":2984,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2731,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:15"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC2981.sol","file":"../../interfaces/IERC2981.sol","id":2733,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2984,"sourceUnit":2089,"src":"134:55:15","symbolAliases":[{"foreign":{"id":2732,"name":"IERC2981","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"142:8:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":2736,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2984,"sourceUnit":3902,"src":"190:69:15","symbolAliases":[{"foreign":{"id":2734,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3913,"src":"198:7:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2735,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"207:6:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2738,"name":"IERC2981","nameLocations":["1135:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":2088,"src":"1135:8:15"},"id":2739,"nodeType":"InheritanceSpecifier","src":"1135:8:15"},{"baseName":{"id":2740,"name":"ERC165","nameLocations":["1145:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":3901,"src":"1145:6:15"},"id":2741,"nodeType":"InheritanceSpecifier","src":"1145:6:15"}],"canonicalName":"ERC2981","contractDependencies":[],"contractKind":"contract","documentation":{"id":2737,"nodeType":"StructuredDocumentation","src":"261:844:15","text":" @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n fee is specified in basis points by default.\n IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n voluntarily pay royalties together with sales, but note that this standard is not yet widely supported."},"fullyImplemented":true,"id":2983,"linearizedBaseContracts":[2983,3901,2088,3913],"name":"ERC2981","nameLocation":"1124:7:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ERC2981.RoyaltyInfo","id":2746,"members":[{"constant":false,"id":2743,"mutability":"mutable","name":"receiver","nameLocation":"1195:8:15","nodeType":"VariableDeclaration","scope":2746,"src":"1187:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2742,"name":"address","nodeType":"ElementaryTypeName","src":"1187:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2745,"mutability":"mutable","name":"royaltyFraction","nameLocation":"1220:15:15","nodeType":"VariableDeclaration","scope":2746,"src":"1213:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":2744,"name":"uint96","nodeType":"ElementaryTypeName","src":"1213:6:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"RoyaltyInfo","nameLocation":"1165:11:15","nodeType":"StructDefinition","scope":2983,"src":"1158:84:15","visibility":"public"},{"constant":false,"id":2749,"mutability":"mutable","name":"_defaultRoyaltyInfo","nameLocation":"1268:19:15","nodeType":"VariableDeclaration","scope":2983,"src":"1248:39:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_storage","typeString":"struct ERC2981.RoyaltyInfo"},"typeName":{"id":2748,"nodeType":"UserDefinedTypeName","pathNode":{"id":2747,"name":"RoyaltyInfo","nameLocations":["1248:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":2746,"src":"1248:11:15"},"referencedDeclaration":2746,"src":"1248:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_storage_ptr","typeString":"struct ERC2981.RoyaltyInfo"}},"visibility":"private"},{"constant":false,"id":2754,"mutability":"mutable","name":"_tokenRoyaltyInfo","nameLocation":"1341:17:15","nodeType":"VariableDeclaration","scope":2983,"src":"1293:65:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$2746_storage_$","typeString":"mapping(uint256 => struct ERC2981.RoyaltyInfo)"},"typeName":{"id":2753,"keyName":"tokenId","keyNameLocation":"1309:7:15","keyType":{"id":2750,"name":"uint256","nodeType":"ElementaryTypeName","src":"1301:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1293:39:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$2746_storage_$","typeString":"mapping(uint256 => struct ERC2981.RoyaltyInfo)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2752,"nodeType":"UserDefinedTypeName","pathNode":{"id":2751,"name":"RoyaltyInfo","nameLocations":["1320:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":2746,"src":"1320:11:15"},"referencedDeclaration":2746,"src":"1320:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_storage_ptr","typeString":"struct ERC2981.RoyaltyInfo"}}},"visibility":"private"},{"documentation":{"id":2755,"nodeType":"StructuredDocumentation","src":"1365:96:15","text":" @dev The default royalty set is invalid (eg. (numerator / denominator) >= 1)."},"errorSelector":"6f483d09","id":2761,"name":"ERC2981InvalidDefaultRoyalty","nameLocation":"1472:28:15","nodeType":"ErrorDefinition","parameters":{"id":2760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2757,"mutability":"mutable","name":"numerator","nameLocation":"1509:9:15","nodeType":"VariableDeclaration","scope":2761,"src":"1501:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2756,"name":"uint256","nodeType":"ElementaryTypeName","src":"1501:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2759,"mutability":"mutable","name":"denominator","nameLocation":"1528:11:15","nodeType":"VariableDeclaration","scope":2761,"src":"1520:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2758,"name":"uint256","nodeType":"ElementaryTypeName","src":"1520:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1500:40:15"},"src":"1466:75:15"},{"documentation":{"id":2762,"nodeType":"StructuredDocumentation","src":"1547:64:15","text":" @dev The default royalty receiver is invalid."},"errorSelector":"b6d9900a","id":2766,"name":"ERC2981InvalidDefaultRoyaltyReceiver","nameLocation":"1622:36:15","nodeType":"ErrorDefinition","parameters":{"id":2765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2764,"mutability":"mutable","name":"receiver","nameLocation":"1667:8:15","nodeType":"VariableDeclaration","scope":2766,"src":"1659:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2763,"name":"address","nodeType":"ElementaryTypeName","src":"1659:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1658:18:15"},"src":"1616:61:15"},{"documentation":{"id":2767,"nodeType":"StructuredDocumentation","src":"1683:114:15","text":" @dev The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1)."},"errorSelector":"dfd1fc1b","id":2775,"name":"ERC2981InvalidTokenRoyalty","nameLocation":"1808:26:15","nodeType":"ErrorDefinition","parameters":{"id":2774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2769,"mutability":"mutable","name":"tokenId","nameLocation":"1843:7:15","nodeType":"VariableDeclaration","scope":2775,"src":"1835:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2768,"name":"uint256","nodeType":"ElementaryTypeName","src":"1835:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2771,"mutability":"mutable","name":"numerator","nameLocation":"1860:9:15","nodeType":"VariableDeclaration","scope":2775,"src":"1852:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2770,"name":"uint256","nodeType":"ElementaryTypeName","src":"1852:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2773,"mutability":"mutable","name":"denominator","nameLocation":"1879:11:15","nodeType":"VariableDeclaration","scope":2775,"src":"1871:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2772,"name":"uint256","nodeType":"ElementaryTypeName","src":"1871:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1834:57:15"},"src":"1802:90:15"},{"documentation":{"id":2776,"nodeType":"StructuredDocumentation","src":"1898:70:15","text":" @dev The royalty receiver for `tokenId` is invalid."},"errorSelector":"969f0852","id":2782,"name":"ERC2981InvalidTokenRoyaltyReceiver","nameLocation":"1979:34:15","nodeType":"ErrorDefinition","parameters":{"id":2781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2778,"mutability":"mutable","name":"tokenId","nameLocation":"2022:7:15","nodeType":"VariableDeclaration","scope":2782,"src":"2014:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2777,"name":"uint256","nodeType":"ElementaryTypeName","src":"2014:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2780,"mutability":"mutable","name":"receiver","nameLocation":"2039:8:15","nodeType":"VariableDeclaration","scope":2782,"src":"2031:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2779,"name":"address","nodeType":"ElementaryTypeName","src":"2031:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2013:35:15"},"src":"1973:76:15"},{"baseFunctions":[3900,3912],"body":{"id":2805,"nodeType":"Block","src":"2224:105:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2793,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"2241:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2795,"name":"IERC2981","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"2261:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC2981_$2088_$","typeString":"type(contract IERC2981)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC2981_$2088_$","typeString":"type(contract IERC2981)"}],"id":2794,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2256:4:15","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2256:14:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC2981_$2088","typeString":"type(contract IERC2981)"}},"id":2797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2271:11:15","memberName":"interfaceId","nodeType":"MemberAccess","src":"2256:26:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2241:41:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2801,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"2310:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2799,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2286:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC2981_$2983_$","typeString":"type(contract super ERC2981)"}},"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2292:17:15","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3900,"src":"2286:23:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2286:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2241:81:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2792,"id":2804,"nodeType":"Return","src":"2234:88:15"}]},"documentation":{"id":2783,"nodeType":"StructuredDocumentation","src":"2055:56:15","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2806,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2125:17:15","nodeType":"FunctionDefinition","overrides":{"id":2789,"nodeType":"OverrideSpecifier","overrides":[{"id":2787,"name":"IERC165","nameLocations":["2192:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":3913,"src":"2192:7:15"},{"id":2788,"name":"ERC165","nameLocations":["2201:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":3901,"src":"2201:6:15"}],"src":"2183:25:15"},"parameters":{"id":2786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2785,"mutability":"mutable","name":"interfaceId","nameLocation":"2150:11:15","nodeType":"VariableDeclaration","scope":2806,"src":"2143:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2784,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2143:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2142:20:15"},"returnParameters":{"id":2792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2791,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2806,"src":"2218:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2790,"name":"bool","nodeType":"ElementaryTypeName","src":"2218:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2217:6:15"},"scope":2983,"src":"2116:213:15","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2087],"body":{"id":2854,"nodeType":"Block","src":"2483:315:15","statements":[{"assignments":[2820],"declarations":[{"constant":false,"id":2820,"mutability":"mutable","name":"royalty","nameLocation":"2512:7:15","nodeType":"VariableDeclaration","scope":2854,"src":"2493:26:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo"},"typeName":{"id":2819,"nodeType":"UserDefinedTypeName","pathNode":{"id":2818,"name":"RoyaltyInfo","nameLocations":["2493:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":2746,"src":"2493:11:15"},"referencedDeclaration":2746,"src":"2493:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_storage_ptr","typeString":"struct ERC2981.RoyaltyInfo"}},"visibility":"internal"}],"id":2824,"initialValue":{"baseExpression":{"id":2821,"name":"_tokenRoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"2522:17:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$2746_storage_$","typeString":"mapping(uint256 => struct ERC2981.RoyaltyInfo storage ref)"}},"id":2823,"indexExpression":{"id":2822,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"2540:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2522:26:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2493:55:15"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2825,"name":"royalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"2563:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo memory"}},"id":2826,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2571:8:15","memberName":"receiver","nodeType":"MemberAccess","referencedDeclaration":2743,"src":"2563:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2591:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2828,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2827,"name":"address","nodeType":"ElementaryTypeName","src":"2583:7:15","typeDescriptions":{}}},"id":2830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2563:30:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2837,"nodeType":"IfStatement","src":"2559:90:15","trueBody":{"id":2836,"nodeType":"Block","src":"2595:54:15","statements":[{"expression":{"id":2834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2832,"name":"royalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"2609:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2833,"name":"_defaultRoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"2619:19:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"src":"2609:29:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo memory"}},"id":2835,"nodeType":"ExpressionStatement","src":"2609:29:15"}]}},{"assignments":[2839],"declarations":[{"constant":false,"id":2839,"mutability":"mutable","name":"royaltyAmount","nameLocation":"2667:13:15","nodeType":"VariableDeclaration","scope":2854,"src":"2659:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2838,"name":"uint256","nodeType":"ElementaryTypeName","src":"2659:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2848,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2840,"name":"salePrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"2684:9:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":2841,"name":"royalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"2696:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo memory"}},"id":2842,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2704:15:15","memberName":"royaltyFraction","nodeType":"MemberAccess","referencedDeclaration":2745,"src":"2696:23:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"2684:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2844,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2683:37:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2845,"name":"_feeDenominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"2723:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_uint96_$","typeString":"function () pure returns (uint96)"}},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"2683:57:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2659:81:15"},{"expression":{"components":[{"expression":{"id":2849,"name":"royalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2820,"src":"2759:7:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo memory"}},"id":2850,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2767:8:15","memberName":"receiver","nodeType":"MemberAccess","referencedDeclaration":2743,"src":"2759:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2851,"name":"royaltyAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"2777:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2852,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2758:33:15","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}},"functionReturnParameters":2817,"id":2853,"nodeType":"Return","src":"2751:40:15"}]},"documentation":{"id":2807,"nodeType":"StructuredDocumentation","src":"2335:39:15","text":" @inheritdoc IERC2981"},"functionSelector":"2a55205a","id":2855,"implemented":true,"kind":"function","modifiers":[],"name":"royaltyInfo","nameLocation":"2388:11:15","nodeType":"FunctionDefinition","parameters":{"id":2812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2809,"mutability":"mutable","name":"tokenId","nameLocation":"2408:7:15","nodeType":"VariableDeclaration","scope":2855,"src":"2400:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2808,"name":"uint256","nodeType":"ElementaryTypeName","src":"2400:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2811,"mutability":"mutable","name":"salePrice","nameLocation":"2425:9:15","nodeType":"VariableDeclaration","scope":2855,"src":"2417:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2810,"name":"uint256","nodeType":"ElementaryTypeName","src":"2417:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2399:36:15"},"returnParameters":{"id":2817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2814,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2855,"src":"2465:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2813,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2816,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2855,"src":"2474:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2815,"name":"uint256","nodeType":"ElementaryTypeName","src":"2474:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2464:18:15"},"scope":2983,"src":"2379:419:15","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2863,"nodeType":"Block","src":"3139:29:15","statements":[{"expression":{"hexValue":"3130303030","id":2861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3156:5:15","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"functionReturnParameters":2860,"id":2862,"nodeType":"Return","src":"3149:12:15"}]},"documentation":{"id":2856,"nodeType":"StructuredDocumentation","src":"2804:264:15","text":" @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n override."},"id":2864,"implemented":true,"kind":"function","modifiers":[],"name":"_feeDenominator","nameLocation":"3082:15:15","nodeType":"FunctionDefinition","parameters":{"id":2857,"nodeType":"ParameterList","parameters":[],"src":"3097:2:15"},"returnParameters":{"id":2860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2859,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2864,"src":"3131:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":2858,"name":"uint96","nodeType":"ElementaryTypeName","src":"3131:6:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"3130:8:15"},"scope":2983,"src":"3073:95:15","stateMutability":"pure","virtual":true,"visibility":"internal"},{"body":{"id":2909,"nodeType":"Block","src":"3513:423:15","statements":[{"assignments":[2873],"declarations":[{"constant":false,"id":2873,"mutability":"mutable","name":"denominator","nameLocation":"3531:11:15","nodeType":"VariableDeclaration","scope":2909,"src":"3523:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2872,"name":"uint256","nodeType":"ElementaryTypeName","src":"3523:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2876,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2874,"name":"_feeDenominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"3545:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_uint96_$","typeString":"function () pure returns (uint96)"}},"id":2875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3545:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"VariableDeclarationStatement","src":"3523:39:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2877,"name":"feeNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2869,"src":"3576:12:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2878,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"3591:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3576:26:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2886,"nodeType":"IfStatement","src":"3572:173:15","trueBody":{"id":2885,"nodeType":"Block","src":"3604:141:15","statements":[{"errorCall":{"arguments":[{"id":2881,"name":"feeNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2869,"src":"3708:12:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":2882,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"3722:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2880,"name":"ERC2981InvalidDefaultRoyalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"3679:28:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3679:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2884,"nodeType":"RevertStatement","src":"3672:62:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2887,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2867,"src":"3758:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3778:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3770:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2888,"name":"address","nodeType":"ElementaryTypeName","src":"3770:7:15","typeDescriptions":{}}},"id":2891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3770:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3758:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2901,"nodeType":"IfStatement","src":"3754:108:15","trueBody":{"id":2900,"nodeType":"Block","src":"3782:80:15","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3848:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3840:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2894,"name":"address","nodeType":"ElementaryTypeName","src":"3840:7:15","typeDescriptions":{}}},"id":2897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3840:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2893,"name":"ERC2981InvalidDefaultRoyaltyReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"3803:36:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3803:48:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2899,"nodeType":"RevertStatement","src":"3796:55:15"}]}},{"expression":{"id":2907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2902,"name":"_defaultRoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"3872:19:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2904,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2867,"src":"3906:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2905,"name":"feeNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2869,"src":"3916:12:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint96","typeString":"uint96"}],"id":2903,"name":"RoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"3894:11:15","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_RoyaltyInfo_$2746_storage_ptr_$","typeString":"type(struct ERC2981.RoyaltyInfo storage pointer)"}},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3894:35:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo memory"}},"src":"3872:57:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"id":2908,"nodeType":"ExpressionStatement","src":"3872:57:15"}]},"documentation":{"id":2865,"nodeType":"StructuredDocumentation","src":"3174:250:15","text":" @dev Sets the royalty information that all ids in this contract will default to.\n Requirements:\n - `receiver` cannot be the zero address.\n - `feeNumerator` cannot be greater than the fee denominator."},"id":2910,"implemented":true,"kind":"function","modifiers":[],"name":"_setDefaultRoyalty","nameLocation":"3438:18:15","nodeType":"FunctionDefinition","parameters":{"id":2870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2867,"mutability":"mutable","name":"receiver","nameLocation":"3465:8:15","nodeType":"VariableDeclaration","scope":2910,"src":"3457:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2866,"name":"address","nodeType":"ElementaryTypeName","src":"3457:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2869,"mutability":"mutable","name":"feeNumerator","nameLocation":"3482:12:15","nodeType":"VariableDeclaration","scope":2910,"src":"3475:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":2868,"name":"uint96","nodeType":"ElementaryTypeName","src":"3475:6:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"3456:39:15"},"returnParameters":{"id":2871,"nodeType":"ParameterList","parameters":[],"src":"3513:0:15"},"scope":2983,"src":"3429:507:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2917,"nodeType":"Block","src":"4057:43:15","statements":[{"expression":{"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4067:26:15","subExpression":{"id":2914,"name":"_defaultRoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"4074:19:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2916,"nodeType":"ExpressionStatement","src":"4067:26:15"}]},"documentation":{"id":2911,"nodeType":"StructuredDocumentation","src":"3942:60:15","text":" @dev Removes default royalty information."},"id":2918,"implemented":true,"kind":"function","modifiers":[],"name":"_deleteDefaultRoyalty","nameLocation":"4016:21:15","nodeType":"FunctionDefinition","parameters":{"id":2912,"nodeType":"ParameterList","parameters":[],"src":"4037:2:15"},"returnParameters":{"id":2913,"nodeType":"ParameterList","parameters":[],"src":"4057:0:15"},"scope":2983,"src":"4007:93:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2969,"nodeType":"Block","src":"4469:444:15","statements":[{"assignments":[2929],"declarations":[{"constant":false,"id":2929,"mutability":"mutable","name":"denominator","nameLocation":"4487:11:15","nodeType":"VariableDeclaration","scope":2969,"src":"4479:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2928,"name":"uint256","nodeType":"ElementaryTypeName","src":"4479:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2932,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2930,"name":"_feeDenominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2864,"src":"4501:15:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_uint96_$","typeString":"function () pure returns (uint96)"}},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4501:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"VariableDeclarationStatement","src":"4479:39:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2933,"name":"feeNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"4532:12:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2934,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2929,"src":"4547:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4532:26:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2943,"nodeType":"IfStatement","src":"4528:180:15","trueBody":{"id":2942,"nodeType":"Block","src":"4560:148:15","statements":[{"errorCall":{"arguments":[{"id":2937,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2921,"src":"4662:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2938,"name":"feeNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"4671:12:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":2939,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2929,"src":"4685:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2936,"name":"ERC2981InvalidTokenRoyalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2775,"src":"4635:26:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256) pure"}},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4635:62:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2941,"nodeType":"RevertStatement","src":"4628:69:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2944,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"4721:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4741:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2946,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4733:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2945,"name":"address","nodeType":"ElementaryTypeName","src":"4733:7:15","typeDescriptions":{}}},"id":2948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4733:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4721:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2959,"nodeType":"IfStatement","src":"4717:115:15","trueBody":{"id":2958,"nodeType":"Block","src":"4745:87:15","statements":[{"errorCall":{"arguments":[{"id":2951,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2921,"src":"4801:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":2954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4818:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2953,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4810:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2952,"name":"address","nodeType":"ElementaryTypeName","src":"4810:7:15","typeDescriptions":{}}},"id":2955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4810:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2950,"name":"ERC2981InvalidTokenRoyaltyReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"4766:34:15","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address) pure"}},"id":2956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4766:55:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2957,"nodeType":"RevertStatement","src":"4759:62:15"}]}},{"expression":{"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2960,"name":"_tokenRoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"4842:17:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$2746_storage_$","typeString":"mapping(uint256 => struct ERC2981.RoyaltyInfo storage ref)"}},"id":2962,"indexExpression":{"id":2961,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2921,"src":"4860:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4842:26:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2964,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"4883:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2965,"name":"feeNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"4893:12:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint96","typeString":"uint96"}],"id":2963,"name":"RoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"4871:11:15","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_RoyaltyInfo_$2746_storage_ptr_$","typeString":"type(struct ERC2981.RoyaltyInfo storage pointer)"}},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4871:35:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_memory_ptr","typeString":"struct ERC2981.RoyaltyInfo memory"}},"src":"4842:64:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"id":2968,"nodeType":"ExpressionStatement","src":"4842:64:15"}]},"documentation":{"id":2919,"nodeType":"StructuredDocumentation","src":"4106:259:15","text":" @dev Sets the royalty information for a specific token id, overriding the global default.\n Requirements:\n - `receiver` cannot be the zero address.\n - `feeNumerator` cannot be greater than the fee denominator."},"id":2970,"implemented":true,"kind":"function","modifiers":[],"name":"_setTokenRoyalty","nameLocation":"4379:16:15","nodeType":"FunctionDefinition","parameters":{"id":2926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2921,"mutability":"mutable","name":"tokenId","nameLocation":"4404:7:15","nodeType":"VariableDeclaration","scope":2970,"src":"4396:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2920,"name":"uint256","nodeType":"ElementaryTypeName","src":"4396:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2923,"mutability":"mutable","name":"receiver","nameLocation":"4421:8:15","nodeType":"VariableDeclaration","scope":2970,"src":"4413:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2922,"name":"address","nodeType":"ElementaryTypeName","src":"4413:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2925,"mutability":"mutable","name":"feeNumerator","nameLocation":"4438:12:15","nodeType":"VariableDeclaration","scope":2970,"src":"4431:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":2924,"name":"uint96","nodeType":"ElementaryTypeName","src":"4431:6:15","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"4395:56:15"},"returnParameters":{"id":2927,"nodeType":"ParameterList","parameters":[],"src":"4469:0:15"},"scope":2983,"src":"4370:543:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2981,"nodeType":"Block","src":"5081:50:15","statements":[{"expression":{"id":2979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"5091:33:15","subExpression":{"baseExpression":{"id":2976,"name":"_tokenRoyaltyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"5098:17:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_RoyaltyInfo_$2746_storage_$","typeString":"mapping(uint256 => struct ERC2981.RoyaltyInfo storage ref)"}},"id":2978,"indexExpression":{"id":2977,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"5116:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5098:26:15","typeDescriptions":{"typeIdentifier":"t_struct$_RoyaltyInfo_$2746_storage","typeString":"struct ERC2981.RoyaltyInfo storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2980,"nodeType":"ExpressionStatement","src":"5091:33:15"}]},"documentation":{"id":2971,"nodeType":"StructuredDocumentation","src":"4919:95:15","text":" @dev Resets royalty information for the token id back to the global default."},"id":2982,"implemented":true,"kind":"function","modifiers":[],"name":"_resetTokenRoyalty","nameLocation":"5028:18:15","nodeType":"FunctionDefinition","parameters":{"id":2974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2973,"mutability":"mutable","name":"tokenId","nameLocation":"5055:7:15","nodeType":"VariableDeclaration","scope":2982,"src":"5047:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2972,"name":"uint256","nodeType":"ElementaryTypeName","src":"5047:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5046:17:15"},"returnParameters":{"id":2975,"nodeType":"ParameterList","parameters":[],"src":"5081:0:15"},"scope":2983,"src":"5019:112:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2984,"src":"1106:4027:15","usedErrors":[2761,2766,2775,2782],"usedEvents":[]}],"src":"108:5026:15"},"id":15},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[3236]},"id":3237,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2985,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":2986,"nodeType":"StructuredDocumentation","src":"127:67:16","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":3236,"linearizedBaseContracts":[3236],"name":"Address","nameLocation":"203:7:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2987,"nodeType":"StructuredDocumentation","src":"217:94:16","text":" @dev The ETH balance of the account is not enough to perform the operation."},"errorSelector":"cd786059","id":2991,"name":"AddressInsufficientBalance","nameLocation":"322:26:16","nodeType":"ErrorDefinition","parameters":{"id":2990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2989,"mutability":"mutable","name":"account","nameLocation":"357:7:16","nodeType":"VariableDeclaration","scope":2991,"src":"349:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2988,"name":"address","nodeType":"ElementaryTypeName","src":"349:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"348:17:16"},"src":"316:50:16"},{"documentation":{"id":2992,"nodeType":"StructuredDocumentation","src":"372:75:16","text":" @dev There's no code at `target` (it is not a contract)."},"errorSelector":"9996b315","id":2996,"name":"AddressEmptyCode","nameLocation":"458:16:16","nodeType":"ErrorDefinition","parameters":{"id":2995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2994,"mutability":"mutable","name":"target","nameLocation":"483:6:16","nodeType":"VariableDeclaration","scope":2996,"src":"475:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2993,"name":"address","nodeType":"ElementaryTypeName","src":"475:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"474:16:16"},"src":"452:39:16"},{"documentation":{"id":2997,"nodeType":"StructuredDocumentation","src":"497:89:16","text":" @dev A call to an address target failed. The target may have reverted."},"errorSelector":"1425ea42","id":2999,"name":"FailedInnerCall","nameLocation":"597:15:16","nodeType":"ErrorDefinition","parameters":{"id":2998,"nodeType":"ParameterList","parameters":[],"src":"612:2:16"},"src":"591:24:16"},{"body":{"id":3039,"nodeType":"Block","src":"1602:260:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3009,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1624:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3236","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3236","typeString":"library Address"}],"id":3008,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1616:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3007,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:16","typeDescriptions":{}}},"id":3010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1616:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1630:7:16","memberName":"balance","nodeType":"MemberAccess","src":"1616:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3012,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"1640:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1616:30:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3022,"nodeType":"IfStatement","src":"1612:109:16","trueBody":{"id":3021,"nodeType":"Block","src":"1648:73:16","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":3017,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1704:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3236","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3236","typeString":"library Address"}],"id":3016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1696:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3015,"name":"address","nodeType":"ElementaryTypeName","src":"1696:7:16","typeDescriptions":{}}},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1696:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3014,"name":"AddressInsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"1669:26:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1669:41:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3020,"nodeType":"RevertStatement","src":"1662:48:16"}]}},{"assignments":[3024,null],"declarations":[{"constant":false,"id":3024,"mutability":"mutable","name":"success","nameLocation":"1737:7:16","nodeType":"VariableDeclaration","scope":3039,"src":"1732:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3023,"name":"bool","nodeType":"ElementaryTypeName","src":"1732:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3031,"initialValue":{"arguments":[{"hexValue":"","id":3029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1780:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3025,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3002,"src":"1750:9:16","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1760:4:16","memberName":"call","nodeType":"MemberAccess","src":"1750:14:16","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3027,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"1772:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1750:29:16","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1750:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1731:52:16"},{"condition":{"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1797:8:16","subExpression":{"id":3032,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3024,"src":"1798:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3038,"nodeType":"IfStatement","src":"1793:63:16","trueBody":{"id":3037,"nodeType":"Block","src":"1807:49:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3034,"name":"FailedInnerCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2999,"src":"1828:15:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3036,"nodeType":"RevertStatement","src":"1821:24:16"}]}}]},"documentation":{"id":3000,"nodeType":"StructuredDocumentation","src":"621:905:16","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":3040,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"1540:9:16","nodeType":"FunctionDefinition","parameters":{"id":3005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3002,"mutability":"mutable","name":"recipient","nameLocation":"1566:9:16","nodeType":"VariableDeclaration","scope":3040,"src":"1550:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3001,"name":"address","nodeType":"ElementaryTypeName","src":"1550:15:16","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3004,"mutability":"mutable","name":"amount","nameLocation":"1585:6:16","nodeType":"VariableDeclaration","scope":3040,"src":"1577:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3003,"name":"uint256","nodeType":"ElementaryTypeName","src":"1577:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1549:43:16"},"returnParameters":{"id":3006,"nodeType":"ParameterList","parameters":[],"src":"1602:0:16"},"scope":3236,"src":"1531:331:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3056,"nodeType":"Block","src":"2794:62:16","statements":[{"expression":{"arguments":[{"id":3051,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"2833:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3052,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3045,"src":"2841:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2847:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3050,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3103,"src":"2811:21:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256) returns (bytes memory)"}},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2811:38:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3049,"id":3055,"nodeType":"Return","src":"2804:45:16"}]},"documentation":{"id":3041,"nodeType":"StructuredDocumentation","src":"1868:832:16","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."},"id":3057,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"2714:12:16","nodeType":"FunctionDefinition","parameters":{"id":3046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3043,"mutability":"mutable","name":"target","nameLocation":"2735:6:16","nodeType":"VariableDeclaration","scope":3057,"src":"2727:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3042,"name":"address","nodeType":"ElementaryTypeName","src":"2727:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3045,"mutability":"mutable","name":"data","nameLocation":"2756:4:16","nodeType":"VariableDeclaration","scope":3057,"src":"2743:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3044,"name":"bytes","nodeType":"ElementaryTypeName","src":"2743:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2726:35:16"},"returnParameters":{"id":3049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3048,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3057,"src":"2780:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3047,"name":"bytes","nodeType":"ElementaryTypeName","src":"2780:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2779:14:16"},"scope":3236,"src":"2705:151:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3102,"nodeType":"Block","src":"3293:279:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3071,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3315:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3236","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3236","typeString":"library Address"}],"id":3070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3307:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3069,"name":"address","nodeType":"ElementaryTypeName","src":"3307:7:16","typeDescriptions":{}}},"id":3072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3321:7:16","memberName":"balance","nodeType":"MemberAccess","src":"3307:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3074,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"3331:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3307:29:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3084,"nodeType":"IfStatement","src":"3303:108:16","trueBody":{"id":3083,"nodeType":"Block","src":"3338:73:16","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":3079,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3394:4:16","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3236","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3236","typeString":"library Address"}],"id":3078,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3386:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3077,"name":"address","nodeType":"ElementaryTypeName","src":"3386:7:16","typeDescriptions":{}}},"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3386:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3076,"name":"AddressInsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"3359:26:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:41:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3082,"nodeType":"RevertStatement","src":"3352:48:16"}]}},{"assignments":[3086,3088],"declarations":[{"constant":false,"id":3086,"mutability":"mutable","name":"success","nameLocation":"3426:7:16","nodeType":"VariableDeclaration","scope":3102,"src":"3421:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3085,"name":"bool","nodeType":"ElementaryTypeName","src":"3421:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3088,"mutability":"mutable","name":"returndata","nameLocation":"3448:10:16","nodeType":"VariableDeclaration","scope":3102,"src":"3435:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3087,"name":"bytes","nodeType":"ElementaryTypeName","src":"3435:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3095,"initialValue":{"arguments":[{"id":3093,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"3488:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3089,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"3462:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3469:4:16","memberName":"call","nodeType":"MemberAccess","src":"3462:11:16","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3091,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"3481:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3462:25:16","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3462:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3420:73:16"},{"expression":{"arguments":[{"id":3097,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3060,"src":"3537:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3098,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"3545:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3099,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"3554:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3096,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"3510:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3510:55:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3068,"id":3101,"nodeType":"Return","src":"3503:62:16"}]},"documentation":{"id":3058,"nodeType":"StructuredDocumentation","src":"2862:313:16","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."},"id":3103,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"3189:21:16","nodeType":"FunctionDefinition","parameters":{"id":3065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3060,"mutability":"mutable","name":"target","nameLocation":"3219:6:16","nodeType":"VariableDeclaration","scope":3103,"src":"3211:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3059,"name":"address","nodeType":"ElementaryTypeName","src":"3211:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3062,"mutability":"mutable","name":"data","nameLocation":"3240:4:16","nodeType":"VariableDeclaration","scope":3103,"src":"3227:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3061,"name":"bytes","nodeType":"ElementaryTypeName","src":"3227:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3064,"mutability":"mutable","name":"value","nameLocation":"3254:5:16","nodeType":"VariableDeclaration","scope":3103,"src":"3246:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3063,"name":"uint256","nodeType":"ElementaryTypeName","src":"3246:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3210:50:16"},"returnParameters":{"id":3068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3067,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3103,"src":"3279:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3066,"name":"bytes","nodeType":"ElementaryTypeName","src":"3279:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3278:14:16"},"scope":3236,"src":"3180:392:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3128,"nodeType":"Block","src":"3811:154:16","statements":[{"assignments":[3114,3116],"declarations":[{"constant":false,"id":3114,"mutability":"mutable","name":"success","nameLocation":"3827:7:16","nodeType":"VariableDeclaration","scope":3128,"src":"3822:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3113,"name":"bool","nodeType":"ElementaryTypeName","src":"3822:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3116,"mutability":"mutable","name":"returndata","nameLocation":"3849:10:16","nodeType":"VariableDeclaration","scope":3128,"src":"3836:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3115,"name":"bytes","nodeType":"ElementaryTypeName","src":"3836:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3121,"initialValue":{"arguments":[{"id":3119,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"3881:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3117,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3106,"src":"3863:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3870:10:16","memberName":"staticcall","nodeType":"MemberAccess","src":"3863:17:16","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3863:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3821:65:16"},{"expression":{"arguments":[{"id":3123,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3106,"src":"3930:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3124,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"3938:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3125,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"3947:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3122,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"3903:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3903:55:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3112,"id":3127,"nodeType":"Return","src":"3896:62:16"}]},"documentation":{"id":3104,"nodeType":"StructuredDocumentation","src":"3578:128:16","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."},"id":3129,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"3720:18:16","nodeType":"FunctionDefinition","parameters":{"id":3109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3106,"mutability":"mutable","name":"target","nameLocation":"3747:6:16","nodeType":"VariableDeclaration","scope":3129,"src":"3739:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3105,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3108,"mutability":"mutable","name":"data","nameLocation":"3768:4:16","nodeType":"VariableDeclaration","scope":3129,"src":"3755:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3107,"name":"bytes","nodeType":"ElementaryTypeName","src":"3755:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3738:35:16"},"returnParameters":{"id":3112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3111,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3129,"src":"3797:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3110,"name":"bytes","nodeType":"ElementaryTypeName","src":"3797:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3796:14:16"},"scope":3236,"src":"3711:254:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3154,"nodeType":"Block","src":"4203:156:16","statements":[{"assignments":[3140,3142],"declarations":[{"constant":false,"id":3140,"mutability":"mutable","name":"success","nameLocation":"4219:7:16","nodeType":"VariableDeclaration","scope":3154,"src":"4214:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3139,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3142,"mutability":"mutable","name":"returndata","nameLocation":"4241:10:16","nodeType":"VariableDeclaration","scope":3154,"src":"4228:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3141,"name":"bytes","nodeType":"ElementaryTypeName","src":"4228:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3147,"initialValue":{"arguments":[{"id":3145,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3134,"src":"4275:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3143,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"4255:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4262:12:16","memberName":"delegatecall","nodeType":"MemberAccess","src":"4255:19:16","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4255:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4213:67:16"},{"expression":{"arguments":[{"id":3149,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"4324:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3150,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"4332:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3151,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"4341:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3148,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"4297:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4297:55:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3138,"id":3153,"nodeType":"Return","src":"4290:62:16"}]},"documentation":{"id":3130,"nodeType":"StructuredDocumentation","src":"3971:130:16","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."},"id":3155,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"4115:20:16","nodeType":"FunctionDefinition","parameters":{"id":3135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3132,"mutability":"mutable","name":"target","nameLocation":"4144:6:16","nodeType":"VariableDeclaration","scope":3155,"src":"4136:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3131,"name":"address","nodeType":"ElementaryTypeName","src":"4136:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3134,"mutability":"mutable","name":"data","nameLocation":"4165:4:16","nodeType":"VariableDeclaration","scope":3155,"src":"4152:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3133,"name":"bytes","nodeType":"ElementaryTypeName","src":"4152:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4135:35:16"},"returnParameters":{"id":3138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3137,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3155,"src":"4189:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3136,"name":"bytes","nodeType":"ElementaryTypeName","src":"4189:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4188:14:16"},"scope":3236,"src":"4106:253:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3194,"nodeType":"Block","src":"4783:424:16","statements":[{"condition":{"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4797:8:16","subExpression":{"id":3167,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3160,"src":"4798:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3192,"nodeType":"Block","src":"4857:344:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3174,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"5045:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5056:6:16","memberName":"length","nodeType":"MemberAccess","src":"5045:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5066:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5045:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3178,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3158,"src":"5071:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5078:4:16","memberName":"code","nodeType":"MemberAccess","src":"5071:11:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5083:6:16","memberName":"length","nodeType":"MemberAccess","src":"5071:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5093:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5071:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5045:49:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3189,"nodeType":"IfStatement","src":"5041:119:16","trueBody":{"id":3188,"nodeType":"Block","src":"5096:64:16","statements":[{"errorCall":{"arguments":[{"id":3185,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3158,"src":"5138:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3184,"name":"AddressEmptyCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"5121:16:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5121:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3187,"nodeType":"RevertStatement","src":"5114:31:16"}]}},{"expression":{"id":3190,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"5180:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3166,"id":3191,"nodeType":"Return","src":"5173:17:16"}]},"id":3193,"nodeType":"IfStatement","src":"4793:408:16","trueBody":{"id":3173,"nodeType":"Block","src":"4807:44:16","statements":[{"expression":{"arguments":[{"id":3170,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"4829:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3169,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"4821:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4821:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3172,"nodeType":"ExpressionStatement","src":"4821:19:16"}]}}]},"documentation":{"id":3156,"nodeType":"StructuredDocumentation","src":"4365:255:16","text":" @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."},"id":3195,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"4634:26:16","nodeType":"FunctionDefinition","parameters":{"id":3163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3158,"mutability":"mutable","name":"target","nameLocation":"4678:6:16","nodeType":"VariableDeclaration","scope":3195,"src":"4670:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3157,"name":"address","nodeType":"ElementaryTypeName","src":"4670:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3160,"mutability":"mutable","name":"success","nameLocation":"4699:7:16","nodeType":"VariableDeclaration","scope":3195,"src":"4694:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3159,"name":"bool","nodeType":"ElementaryTypeName","src":"4694:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3162,"mutability":"mutable","name":"returndata","nameLocation":"4729:10:16","nodeType":"VariableDeclaration","scope":3195,"src":"4716:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3161,"name":"bytes","nodeType":"ElementaryTypeName","src":"4716:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4660:85:16"},"returnParameters":{"id":3166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3165,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3195,"src":"4769:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3164,"name":"bytes","nodeType":"ElementaryTypeName","src":"4769:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4768:14:16"},"scope":3236,"src":"4625:582:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3216,"nodeType":"Block","src":"5509:122:16","statements":[{"condition":{"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5523:8:16","subExpression":{"id":3205,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"5524:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3214,"nodeType":"Block","src":"5583:42:16","statements":[{"expression":{"id":3212,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3200,"src":"5604:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3204,"id":3213,"nodeType":"Return","src":"5597:17:16"}]},"id":3215,"nodeType":"IfStatement","src":"5519:106:16","trueBody":{"id":3211,"nodeType":"Block","src":"5533:44:16","statements":[{"expression":{"arguments":[{"id":3208,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3200,"src":"5555:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3207,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"5547:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5547:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3210,"nodeType":"ExpressionStatement","src":"5547:19:16"}]}}]},"documentation":{"id":3196,"nodeType":"StructuredDocumentation","src":"5213:189:16","text":" @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."},"id":3217,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"5416:16:16","nodeType":"FunctionDefinition","parameters":{"id":3201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3198,"mutability":"mutable","name":"success","nameLocation":"5438:7:16","nodeType":"VariableDeclaration","scope":3217,"src":"5433:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3197,"name":"bool","nodeType":"ElementaryTypeName","src":"5433:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3200,"mutability":"mutable","name":"returndata","nameLocation":"5460:10:16","nodeType":"VariableDeclaration","scope":3217,"src":"5447:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3199,"name":"bytes","nodeType":"ElementaryTypeName","src":"5447:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5432:39:16"},"returnParameters":{"id":3204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3203,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3217,"src":"5495:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3202,"name":"bytes","nodeType":"ElementaryTypeName","src":"5495:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5494:14:16"},"scope":3236,"src":"5407:224:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3234,"nodeType":"Block","src":"5798:461:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3223,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"5874:10:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5885:6:16","memberName":"length","nodeType":"MemberAccess","src":"5874:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5894:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5874:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3232,"nodeType":"Block","src":"6204:49:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3229,"name":"FailedInnerCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2999,"src":"6225:15:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6225:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3231,"nodeType":"RevertStatement","src":"6218:24:16"}]},"id":3233,"nodeType":"IfStatement","src":"5870:383:16","trueBody":{"id":3228,"nodeType":"Block","src":"5897:301:16","statements":[{"AST":{"nodeType":"YulBlock","src":"6055:133:16","statements":[{"nodeType":"YulVariableDeclaration","src":"6073:40:16","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"6102:10:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6096:5:16"},"nodeType":"YulFunctionCall","src":"6096:17:16"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"6077:15:16","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6141:2:16","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"6145:10:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6137:3:16"},"nodeType":"YulFunctionCall","src":"6137:19:16"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"6158:15:16"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6130:6:16"},"nodeType":"YulFunctionCall","src":"6130:44:16"},"nodeType":"YulExpressionStatement","src":"6130:44:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3220,"isOffset":false,"isSlot":false,"src":"6102:10:16","valueSize":1},{"declaration":3220,"isOffset":false,"isSlot":false,"src":"6145:10:16","valueSize":1}],"id":3227,"nodeType":"InlineAssembly","src":"6046:142:16"}]}}]},"documentation":{"id":3218,"nodeType":"StructuredDocumentation","src":"5637:101:16","text":" @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."},"id":3235,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"5752:7:16","nodeType":"FunctionDefinition","parameters":{"id":3221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3220,"mutability":"mutable","name":"returndata","nameLocation":"5773:10:16","nodeType":"VariableDeclaration","scope":3235,"src":"5760:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3219,"name":"bytes","nodeType":"ElementaryTypeName","src":"5760:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5759:25:16"},"returnParameters":{"id":3222,"nodeType":"ParameterList","parameters":[],"src":"5798:0:16"},"scope":3236,"src":"5743:516:16","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3237,"src":"195:6066:16","usedErrors":[2991,2996,2999],"usedEvents":[]}],"src":"101:6161:16"},"id":16},"@openzeppelin/contracts/utils/Arrays.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Arrays.sol","exportedSymbols":{"Arrays":[3419],"Math":[4967],"StorageSlot":[3529]},"id":3420,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3238,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"100:24:17"},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"./StorageSlot.sol","id":3240,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3420,"sourceUnit":3530,"src":"126:46:17","symbolAliases":[{"foreign":{"id":3239,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"134:11:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":3242,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3420,"sourceUnit":4968,"src":"173:37:17","symbolAliases":[{"foreign":{"id":3241,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"181:4:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Arrays","contractDependencies":[],"contractKind":"library","documentation":{"id":3243,"nodeType":"StructuredDocumentation","src":"212:63:17","text":" @dev Collection of functions related to array types."},"fullyImplemented":true,"id":3419,"linearizedBaseContracts":[3419],"name":"Arrays","nameLocation":"284:6:17","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3246,"libraryName":{"id":3244,"name":"StorageSlot","nameLocations":["303:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":3529,"src":"303:11:17"},"nodeType":"UsingForDirective","src":"297:30:17","typeName":{"id":3245,"name":"bytes32","nodeType":"ElementaryTypeName","src":"319:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"body":{"id":3328,"nodeType":"Block","src":"843:834:17","statements":[{"assignments":[3258],"declarations":[{"constant":false,"id":3258,"mutability":"mutable","name":"low","nameLocation":"861:3:17","nodeType":"VariableDeclaration","scope":3328,"src":"853:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3257,"name":"uint256","nodeType":"ElementaryTypeName","src":"853:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3260,"initialValue":{"hexValue":"30","id":3259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"867:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"853:15:17"},{"assignments":[3262],"declarations":[{"constant":false,"id":3262,"mutability":"mutable","name":"high","nameLocation":"886:4:17","nodeType":"VariableDeclaration","scope":3328,"src":"878:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3261,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3265,"initialValue":{"expression":{"id":3263,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"893:5:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"899:6:17","memberName":"length","nodeType":"MemberAccess","src":"893:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"878:27:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3266,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"920:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"928:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"920:9:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3272,"nodeType":"IfStatement","src":"916:48:17","trueBody":{"id":3271,"nodeType":"Block","src":"931:33:17","statements":[{"expression":{"hexValue":"30","id":3269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3256,"id":3270,"nodeType":"Return","src":"945:8:17"}]}},{"body":{"id":3304,"nodeType":"Block","src":"993:423:17","statements":[{"assignments":[3277],"declarations":[{"constant":false,"id":3277,"mutability":"mutable","name":"mid","nameLocation":"1015:3:17","nodeType":"VariableDeclaration","scope":3304,"src":"1007:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3276,"name":"uint256","nodeType":"ElementaryTypeName","src":"1007:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3283,"initialValue":{"arguments":[{"id":3280,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3258,"src":"1034:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3281,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"1039:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3278,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4967,"src":"1021:4:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4967_$","typeString":"type(library Math)"}},"id":3279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1026:7:17","memberName":"average","nodeType":"MemberAccess","referencedDeclaration":4141,"src":"1021:12:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1021:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1007:37:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3285,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"1282:5:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"}},{"id":3286,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1289:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3284,"name":"unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[3350,3371,3392],"referencedDeclaration":3392,"src":"1269:12:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Uint256Slot_$3434_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":3287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1269:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3434_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":3288,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1294:5:17","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3433,"src":"1269:30:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3289,"name":"element","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"1302:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1269:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3302,"nodeType":"Block","src":"1360:46:17","statements":[{"expression":{"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3296,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3258,"src":"1378:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3297,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1384:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1390:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1384:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1378:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3301,"nodeType":"ExpressionStatement","src":"1378:13:17"}]},"id":3303,"nodeType":"IfStatement","src":"1265:141:17","trueBody":{"id":3295,"nodeType":"Block","src":"1311:43:17","statements":[{"expression":{"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3291,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"1329:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3292,"name":"mid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"1336:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3294,"nodeType":"ExpressionStatement","src":"1329:10:17"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3273,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3258,"src":"981:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3274,"name":"high","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"987:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"981:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3305,"nodeType":"WhileStatement","src":"974:442:17"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3306,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3258,"src":"1533:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1539:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1533:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3310,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"1557:5:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3311,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3258,"src":"1564:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1570:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1564:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[] storage pointer"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3309,"name":"unsafeAccess","nodeType":"Identifier","overloadedDeclarations":[3350,3371,3392],"referencedDeclaration":3392,"src":"1544:12:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$_t_struct$_Uint256Slot_$3434_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1544:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3434_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":3315,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1573:5:17","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3433,"src":"1544:34:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3316,"name":"element","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3252,"src":"1582:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1544:45:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1533:56:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3326,"nodeType":"Block","src":"1636:35:17","statements":[{"expression":{"id":3324,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3258,"src":"1657:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3256,"id":3325,"nodeType":"Return","src":"1650:10:17"}]},"id":3327,"nodeType":"IfStatement","src":"1529:142:17","trueBody":{"id":3323,"nodeType":"Block","src":"1591:39:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3319,"name":"low","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3258,"src":"1612:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1618:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1612:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3256,"id":3322,"nodeType":"Return","src":"1605:14:17"}]}}]},"documentation":{"id":3247,"nodeType":"StructuredDocumentation","src":"333:407:17","text":" @dev Searches a sorted `array` and returns the first index that contains\n a value greater or equal to `element`. If no such index exists (i.e. all\n values in the array are strictly less than `element`), the array length is\n returned. Time complexity O(log n).\n `array` is expected to be sorted in ascending order, and to contain no\n repeated elements."},"id":3329,"implemented":true,"kind":"function","modifiers":[],"name":"findUpperBound","nameLocation":"754:14:17","nodeType":"FunctionDefinition","parameters":{"id":3253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3250,"mutability":"mutable","name":"array","nameLocation":"787:5:17","nodeType":"VariableDeclaration","scope":3329,"src":"769:23:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3248,"name":"uint256","nodeType":"ElementaryTypeName","src":"769:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3249,"nodeType":"ArrayTypeName","src":"769:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3252,"mutability":"mutable","name":"element","nameLocation":"802:7:17","nodeType":"VariableDeclaration","scope":3329,"src":"794:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3251,"name":"uint256","nodeType":"ElementaryTypeName","src":"794:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"768:42:17"},"returnParameters":{"id":3256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3255,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3329,"src":"834:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3254,"name":"uint256","nodeType":"ElementaryTypeName","src":"834:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"833:9:17"},"scope":3419,"src":"745:932:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3349,"nodeType":"Block","src":"1993:459:17","statements":[{"assignments":[3342],"declarations":[{"constant":false,"id":3342,"mutability":"mutable","name":"slot","nameLocation":"2011:4:17","nodeType":"VariableDeclaration","scope":3349,"src":"2003:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3341,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2003:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3343,"nodeType":"VariableDeclarationStatement","src":"2003:12:17"},{"AST":{"nodeType":"YulBlock","src":"2316:92:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2337:1:17","type":"","value":"0"},{"name":"arr.slot","nodeType":"YulIdentifier","src":"2340:8:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2330:6:17"},"nodeType":"YulFunctionCall","src":"2330:19:17"},"nodeType":"YulExpressionStatement","src":"2330:19:17"},{"nodeType":"YulAssignment","src":"2362:36:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2384:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2387:4:17","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2374:9:17"},"nodeType":"YulFunctionCall","src":"2374:18:17"},{"name":"pos","nodeType":"YulIdentifier","src":"2394:3:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2370:3:17"},"nodeType":"YulFunctionCall","src":"2370:28:17"},"variableNames":[{"name":"slot","nodeType":"YulIdentifier","src":"2362:4:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3333,"isOffset":false,"isSlot":true,"src":"2340:8:17","suffix":"slot","valueSize":1},{"declaration":3335,"isOffset":false,"isSlot":false,"src":"2394:3:17","valueSize":1},{"declaration":3342,"isOffset":false,"isSlot":false,"src":"2362:4:17","valueSize":1}],"id":3344,"nodeType":"InlineAssembly","src":"2307:101:17"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3345,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3342,"src":"2424:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2429:14:17","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":3451,"src":"2424:19:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$3425_storage_ptr_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2424:21:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3425_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"functionReturnParameters":3340,"id":3348,"nodeType":"Return","src":"2417:28:17"}]},"documentation":{"id":3330,"nodeType":"StructuredDocumentation","src":"1683:191:17","text":" @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."},"id":3350,"implemented":true,"kind":"function","modifiers":[],"name":"unsafeAccess","nameLocation":"1888:12:17","nodeType":"FunctionDefinition","parameters":{"id":3336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3333,"mutability":"mutable","name":"arr","nameLocation":"1919:3:17","nodeType":"VariableDeclaration","scope":3350,"src":"1901:21:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3331,"name":"address","nodeType":"ElementaryTypeName","src":"1901:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3332,"nodeType":"ArrayTypeName","src":"1901:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3335,"mutability":"mutable","name":"pos","nameLocation":"1932:3:17","nodeType":"VariableDeclaration","scope":3350,"src":"1924:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3334,"name":"uint256","nodeType":"ElementaryTypeName","src":"1924:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1900:36:17"},"returnParameters":{"id":3340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3350,"src":"1960:31:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3425_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":3338,"nodeType":"UserDefinedTypeName","pathNode":{"id":3337,"name":"StorageSlot.AddressSlot","nameLocations":["1960:11:17","1972:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":3425,"src":"1960:23:17"},"referencedDeclaration":3425,"src":"1960:23:17","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3425_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1959:33:17"},"scope":3419,"src":"1879:573:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3370,"nodeType":"Block","src":"2768:459:17","statements":[{"assignments":[3363],"declarations":[{"constant":false,"id":3363,"mutability":"mutable","name":"slot","nameLocation":"2786:4:17","nodeType":"VariableDeclaration","scope":3370,"src":"2778:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3362,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2778:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3364,"nodeType":"VariableDeclarationStatement","src":"2778:12:17"},{"AST":{"nodeType":"YulBlock","src":"3091:92:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3112:1:17","type":"","value":"0"},{"name":"arr.slot","nodeType":"YulIdentifier","src":"3115:8:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3105:6:17"},"nodeType":"YulFunctionCall","src":"3105:19:17"},"nodeType":"YulExpressionStatement","src":"3105:19:17"},{"nodeType":"YulAssignment","src":"3137:36:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3159:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3162:4:17","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3149:9:17"},"nodeType":"YulFunctionCall","src":"3149:18:17"},{"name":"pos","nodeType":"YulIdentifier","src":"3169:3:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3145:3:17"},"nodeType":"YulFunctionCall","src":"3145:28:17"},"variableNames":[{"name":"slot","nodeType":"YulIdentifier","src":"3137:4:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3354,"isOffset":false,"isSlot":true,"src":"3115:8:17","suffix":"slot","valueSize":1},{"declaration":3356,"isOffset":false,"isSlot":false,"src":"3169:3:17","valueSize":1},{"declaration":3363,"isOffset":false,"isSlot":false,"src":"3137:4:17","valueSize":1}],"id":3365,"nodeType":"InlineAssembly","src":"3082:101:17"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3366,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"3199:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3204:14:17","memberName":"getBytes32Slot","nodeType":"MemberAccess","referencedDeclaration":3473,"src":"3199:19:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Bytes32Slot_$3431_storage_ptr_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Bytes32Slot storage pointer)"}},"id":3368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3199:21:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3431_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot storage pointer"}},"functionReturnParameters":3361,"id":3369,"nodeType":"Return","src":"3192:28:17"}]},"documentation":{"id":3351,"nodeType":"StructuredDocumentation","src":"2458:191:17","text":" @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."},"id":3371,"implemented":true,"kind":"function","modifiers":[],"name":"unsafeAccess","nameLocation":"2663:12:17","nodeType":"FunctionDefinition","parameters":{"id":3357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3354,"mutability":"mutable","name":"arr","nameLocation":"2694:3:17","nodeType":"VariableDeclaration","scope":3371,"src":"2676:21:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3352,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2676:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3353,"nodeType":"ArrayTypeName","src":"2676:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":3356,"mutability":"mutable","name":"pos","nameLocation":"2707:3:17","nodeType":"VariableDeclaration","scope":3371,"src":"2699:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3355,"name":"uint256","nodeType":"ElementaryTypeName","src":"2699:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2675:36:17"},"returnParameters":{"id":3361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3360,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3371,"src":"2735:31:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3431_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":3359,"nodeType":"UserDefinedTypeName","pathNode":{"id":3358,"name":"StorageSlot.Bytes32Slot","nameLocations":["2735:11:17","2747:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":3431,"src":"2735:23:17"},"referencedDeclaration":3431,"src":"2735:23:17","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3431_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2734:33:17"},"scope":3419,"src":"2654:573:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3391,"nodeType":"Block","src":"3543:459:17","statements":[{"assignments":[3384],"declarations":[{"constant":false,"id":3384,"mutability":"mutable","name":"slot","nameLocation":"3561:4:17","nodeType":"VariableDeclaration","scope":3391,"src":"3553:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3383,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3553:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3385,"nodeType":"VariableDeclarationStatement","src":"3553:12:17"},{"AST":{"nodeType":"YulBlock","src":"3866:92:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3887:1:17","type":"","value":"0"},{"name":"arr.slot","nodeType":"YulIdentifier","src":"3890:8:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3880:6:17"},"nodeType":"YulFunctionCall","src":"3880:19:17"},"nodeType":"YulExpressionStatement","src":"3880:19:17"},{"nodeType":"YulAssignment","src":"3912:36:17","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3934:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3937:4:17","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3924:9:17"},"nodeType":"YulFunctionCall","src":"3924:18:17"},{"name":"pos","nodeType":"YulIdentifier","src":"3944:3:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3920:3:17"},"nodeType":"YulFunctionCall","src":"3920:28:17"},"variableNames":[{"name":"slot","nodeType":"YulIdentifier","src":"3912:4:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3375,"isOffset":false,"isSlot":true,"src":"3890:8:17","suffix":"slot","valueSize":1},{"declaration":3377,"isOffset":false,"isSlot":false,"src":"3944:3:17","valueSize":1},{"declaration":3384,"isOffset":false,"isSlot":false,"src":"3912:4:17","valueSize":1}],"id":3386,"nodeType":"InlineAssembly","src":"3857:101:17"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3387,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3384,"src":"3974:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3979:14:17","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":3484,"src":"3974:19:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$3434_storage_ptr_$attached_to$_t_bytes32_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3974:21:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3434_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"functionReturnParameters":3382,"id":3390,"nodeType":"Return","src":"3967:28:17"}]},"documentation":{"id":3372,"nodeType":"StructuredDocumentation","src":"3233:191:17","text":" @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."},"id":3392,"implemented":true,"kind":"function","modifiers":[],"name":"unsafeAccess","nameLocation":"3438:12:17","nodeType":"FunctionDefinition","parameters":{"id":3378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3375,"mutability":"mutable","name":"arr","nameLocation":"3469:3:17","nodeType":"VariableDeclaration","scope":3392,"src":"3451:21:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3373,"name":"uint256","nodeType":"ElementaryTypeName","src":"3451:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3374,"nodeType":"ArrayTypeName","src":"3451:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3377,"mutability":"mutable","name":"pos","nameLocation":"3482:3:17","nodeType":"VariableDeclaration","scope":3392,"src":"3474:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3376,"name":"uint256","nodeType":"ElementaryTypeName","src":"3474:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3450:36:17"},"returnParameters":{"id":3382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3392,"src":"3510:31:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3434_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":3380,"nodeType":"UserDefinedTypeName","pathNode":{"id":3379,"name":"StorageSlot.Uint256Slot","nameLocations":["3510:11:17","3522:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":3434,"src":"3510:23:17"},"referencedDeclaration":3434,"src":"3510:23:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3434_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"3509:33:17"},"scope":3419,"src":"3429:573:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3404,"nodeType":"Block","src":"4303:98:17","statements":[{"AST":{"nodeType":"YulBlock","src":"4322:73:17","statements":[{"nodeType":"YulAssignment","src":"4336:49:17","value":{"arguments":[{"arguments":[{"arguments":[{"name":"arr","nodeType":"YulIdentifier","src":"4357:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"4362:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4353:3:17"},"nodeType":"YulFunctionCall","src":"4353:14:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4373:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"4378:4:17","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4369:3:17"},"nodeType":"YulFunctionCall","src":"4369:14:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4349:3:17"},"nodeType":"YulFunctionCall","src":"4349:35:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4343:5:17"},"nodeType":"YulFunctionCall","src":"4343:42:17"},"variableNames":[{"name":"res","nodeType":"YulIdentifier","src":"4336:3:17"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3396,"isOffset":false,"isSlot":false,"src":"4357:3:17","valueSize":1},{"declaration":3398,"isOffset":false,"isSlot":false,"src":"4373:3:17","valueSize":1},{"declaration":3401,"isOffset":false,"isSlot":false,"src":"4336:3:17","valueSize":1}],"id":3403,"nodeType":"InlineAssembly","src":"4313:82:17"}]},"documentation":{"id":3393,"nodeType":"StructuredDocumentation","src":"4008:191:17","text":" @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."},"id":3405,"implemented":true,"kind":"function","modifiers":[],"name":"unsafeMemoryAccess","nameLocation":"4213:18:17","nodeType":"FunctionDefinition","parameters":{"id":3399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3396,"mutability":"mutable","name":"arr","nameLocation":"4249:3:17","nodeType":"VariableDeclaration","scope":3405,"src":"4232:20:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3394,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3395,"nodeType":"ArrayTypeName","src":"4232:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3398,"mutability":"mutable","name":"pos","nameLocation":"4262:3:17","nodeType":"VariableDeclaration","scope":3405,"src":"4254:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3397,"name":"uint256","nodeType":"ElementaryTypeName","src":"4254:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4231:35:17"},"returnParameters":{"id":3402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3401,"mutability":"mutable","name":"res","nameLocation":"4298:3:17","nodeType":"VariableDeclaration","scope":3405,"src":"4290:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3400,"name":"uint256","nodeType":"ElementaryTypeName","src":"4290:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4289:13:17"},"scope":3419,"src":"4204:197:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3417,"nodeType":"Block","src":"4702:98:17","statements":[{"AST":{"nodeType":"YulBlock","src":"4721:73:17","statements":[{"nodeType":"YulAssignment","src":"4735:49:17","value":{"arguments":[{"arguments":[{"arguments":[{"name":"arr","nodeType":"YulIdentifier","src":"4756:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"4761:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4752:3:17"},"nodeType":"YulFunctionCall","src":"4752:14:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4772:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"4777:4:17","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4768:3:17"},"nodeType":"YulFunctionCall","src":"4768:14:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4748:3:17"},"nodeType":"YulFunctionCall","src":"4748:35:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4742:5:17"},"nodeType":"YulFunctionCall","src":"4742:42:17"},"variableNames":[{"name":"res","nodeType":"YulIdentifier","src":"4735:3:17"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3409,"isOffset":false,"isSlot":false,"src":"4756:3:17","valueSize":1},{"declaration":3411,"isOffset":false,"isSlot":false,"src":"4772:3:17","valueSize":1},{"declaration":3414,"isOffset":false,"isSlot":false,"src":"4735:3:17","valueSize":1}],"id":3416,"nodeType":"InlineAssembly","src":"4712:82:17"}]},"documentation":{"id":3406,"nodeType":"StructuredDocumentation","src":"4407:191:17","text":" @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n WARNING: Only use if you are certain `pos` is lower than the array length."},"id":3418,"implemented":true,"kind":"function","modifiers":[],"name":"unsafeMemoryAccess","nameLocation":"4612:18:17","nodeType":"FunctionDefinition","parameters":{"id":3412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3409,"mutability":"mutable","name":"arr","nameLocation":"4648:3:17","nodeType":"VariableDeclaration","scope":3418,"src":"4631:20:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3407,"name":"address","nodeType":"ElementaryTypeName","src":"4631:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3408,"nodeType":"ArrayTypeName","src":"4631:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3411,"mutability":"mutable","name":"pos","nameLocation":"4661:3:17","nodeType":"VariableDeclaration","scope":3418,"src":"4653:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3410,"name":"uint256","nodeType":"ElementaryTypeName","src":"4653:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4630:35:17"},"returnParameters":{"id":3415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3414,"mutability":"mutable","name":"res","nameLocation":"4697:3:17","nodeType":"VariableDeclaration","scope":3418,"src":"4689:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3413,"name":"address","nodeType":"ElementaryTypeName","src":"4689:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4688:13:17"},"scope":3419,"src":"4603:197:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3420,"src":"276:4526:17","usedErrors":[],"usedEvents":[]}],"src":"100:4703:17"},"id":17},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[3529]},"id":3530,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3421,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"193:24:18"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":3422,"nodeType":"StructuredDocumentation","src":"219:1025:18","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```"},"fullyImplemented":true,"id":3529,"linearizedBaseContracts":[3529],"name":"StorageSlot","nameLocation":"1253:11:18","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":3425,"members":[{"constant":false,"id":3424,"mutability":"mutable","name":"value","nameLocation":"1308:5:18","nodeType":"VariableDeclaration","scope":3425,"src":"1300:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3423,"name":"address","nodeType":"ElementaryTypeName","src":"1300:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1278:11:18","nodeType":"StructDefinition","scope":3529,"src":"1271:49:18","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":3428,"members":[{"constant":false,"id":3427,"mutability":"mutable","name":"value","nameLocation":"1360:5:18","nodeType":"VariableDeclaration","scope":3428,"src":"1355:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3426,"name":"bool","nodeType":"ElementaryTypeName","src":"1355:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1333:11:18","nodeType":"StructDefinition","scope":3529,"src":"1326:46:18","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":3431,"members":[{"constant":false,"id":3430,"mutability":"mutable","name":"value","nameLocation":"1415:5:18","nodeType":"VariableDeclaration","scope":3431,"src":"1407:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3429,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1407:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1385:11:18","nodeType":"StructDefinition","scope":3529,"src":"1378:49:18","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":3434,"members":[{"constant":false,"id":3433,"mutability":"mutable","name":"value","nameLocation":"1470:5:18","nodeType":"VariableDeclaration","scope":3434,"src":"1462:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3432,"name":"uint256","nodeType":"ElementaryTypeName","src":"1462:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1440:11:18","nodeType":"StructDefinition","scope":3529,"src":"1433:49:18","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":3437,"members":[{"constant":false,"id":3436,"mutability":"mutable","name":"value","nameLocation":"1523:5:18","nodeType":"VariableDeclaration","scope":3437,"src":"1516:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3435,"name":"string","nodeType":"ElementaryTypeName","src":"1516:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1495:10:18","nodeType":"StructDefinition","scope":3529,"src":"1488:47:18","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":3440,"members":[{"constant":false,"id":3439,"mutability":"mutable","name":"value","nameLocation":"1574:5:18","nodeType":"VariableDeclaration","scope":3440,"src":"1568:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3438,"name":"bytes","nodeType":"ElementaryTypeName","src":"1568:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1548:9:18","nodeType":"StructDefinition","scope":3529,"src":"1541:45:18","visibility":"public"},{"body":{"id":3450,"nodeType":"Block","src":"1768:106:18","statements":[{"AST":{"nodeType":"YulBlock","src":"1830:38:18","statements":[{"nodeType":"YulAssignment","src":"1844:14:18","value":{"name":"slot","nodeType":"YulIdentifier","src":"1854:4:18"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1844:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3447,"isOffset":false,"isSlot":true,"src":"1844:6:18","suffix":"slot","valueSize":1},{"declaration":3443,"isOffset":false,"isSlot":false,"src":"1854:4:18","valueSize":1}],"id":3449,"nodeType":"InlineAssembly","src":"1821:47:18"}]},"documentation":{"id":3441,"nodeType":"StructuredDocumentation","src":"1592:87:18","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":3451,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1693:14:18","nodeType":"FunctionDefinition","parameters":{"id":3444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3443,"mutability":"mutable","name":"slot","nameLocation":"1716:4:18","nodeType":"VariableDeclaration","scope":3451,"src":"1708:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3442,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1708:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1707:14:18"},"returnParameters":{"id":3448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3447,"mutability":"mutable","name":"r","nameLocation":"1765:1:18","nodeType":"VariableDeclaration","scope":3451,"src":"1745:21:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3425_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":3446,"nodeType":"UserDefinedTypeName","pathNode":{"id":3445,"name":"AddressSlot","nameLocations":["1745:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":3425,"src":"1745:11:18"},"referencedDeclaration":3425,"src":"1745:11:18","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3425_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1744:23:18"},"scope":3529,"src":"1684:190:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3461,"nodeType":"Block","src":"2056:106:18","statements":[{"AST":{"nodeType":"YulBlock","src":"2118:38:18","statements":[{"nodeType":"YulAssignment","src":"2132:14:18","value":{"name":"slot","nodeType":"YulIdentifier","src":"2142:4:18"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2132:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3458,"isOffset":false,"isSlot":true,"src":"2132:6:18","suffix":"slot","valueSize":1},{"declaration":3454,"isOffset":false,"isSlot":false,"src":"2142:4:18","valueSize":1}],"id":3460,"nodeType":"InlineAssembly","src":"2109:47:18"}]},"documentation":{"id":3452,"nodeType":"StructuredDocumentation","src":"1880:87:18","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":3462,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1981:14:18","nodeType":"FunctionDefinition","parameters":{"id":3455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3454,"mutability":"mutable","name":"slot","nameLocation":"2004:4:18","nodeType":"VariableDeclaration","scope":3462,"src":"1996:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3453,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1996:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1995:14:18"},"returnParameters":{"id":3459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3458,"mutability":"mutable","name":"r","nameLocation":"2053:1:18","nodeType":"VariableDeclaration","scope":3462,"src":"2033:21:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$3428_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":3457,"nodeType":"UserDefinedTypeName","pathNode":{"id":3456,"name":"BooleanSlot","nameLocations":["2033:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":3428,"src":"2033:11:18"},"referencedDeclaration":3428,"src":"2033:11:18","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$3428_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2032:23:18"},"scope":3529,"src":"1972:190:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3472,"nodeType":"Block","src":"2344:106:18","statements":[{"AST":{"nodeType":"YulBlock","src":"2406:38:18","statements":[{"nodeType":"YulAssignment","src":"2420:14:18","value":{"name":"slot","nodeType":"YulIdentifier","src":"2430:4:18"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2420:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3469,"isOffset":false,"isSlot":true,"src":"2420:6:18","suffix":"slot","valueSize":1},{"declaration":3465,"isOffset":false,"isSlot":false,"src":"2430:4:18","valueSize":1}],"id":3471,"nodeType":"InlineAssembly","src":"2397:47:18"}]},"documentation":{"id":3463,"nodeType":"StructuredDocumentation","src":"2168:87:18","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":3473,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2269:14:18","nodeType":"FunctionDefinition","parameters":{"id":3466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3465,"mutability":"mutable","name":"slot","nameLocation":"2292:4:18","nodeType":"VariableDeclaration","scope":3473,"src":"2284:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3464,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2284:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2283:14:18"},"returnParameters":{"id":3470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3469,"mutability":"mutable","name":"r","nameLocation":"2341:1:18","nodeType":"VariableDeclaration","scope":3473,"src":"2321:21:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3431_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":3468,"nodeType":"UserDefinedTypeName","pathNode":{"id":3467,"name":"Bytes32Slot","nameLocations":["2321:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":3431,"src":"2321:11:18"},"referencedDeclaration":3431,"src":"2321:11:18","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3431_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2320:23:18"},"scope":3529,"src":"2260:190:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3483,"nodeType":"Block","src":"2632:106:18","statements":[{"AST":{"nodeType":"YulBlock","src":"2694:38:18","statements":[{"nodeType":"YulAssignment","src":"2708:14:18","value":{"name":"slot","nodeType":"YulIdentifier","src":"2718:4:18"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2708:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3480,"isOffset":false,"isSlot":true,"src":"2708:6:18","suffix":"slot","valueSize":1},{"declaration":3476,"isOffset":false,"isSlot":false,"src":"2718:4:18","valueSize":1}],"id":3482,"nodeType":"InlineAssembly","src":"2685:47:18"}]},"documentation":{"id":3474,"nodeType":"StructuredDocumentation","src":"2456:87:18","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":3484,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2557:14:18","nodeType":"FunctionDefinition","parameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3476,"mutability":"mutable","name":"slot","nameLocation":"2580:4:18","nodeType":"VariableDeclaration","scope":3484,"src":"2572:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3475,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2572:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2571:14:18"},"returnParameters":{"id":3481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3480,"mutability":"mutable","name":"r","nameLocation":"2629:1:18","nodeType":"VariableDeclaration","scope":3484,"src":"2609:21:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3434_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":3479,"nodeType":"UserDefinedTypeName","pathNode":{"id":3478,"name":"Uint256Slot","nameLocations":["2609:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":3434,"src":"2609:11:18"},"referencedDeclaration":3434,"src":"2609:11:18","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3434_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2608:23:18"},"scope":3529,"src":"2548:190:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3494,"nodeType":"Block","src":"2917:106:18","statements":[{"AST":{"nodeType":"YulBlock","src":"2979:38:18","statements":[{"nodeType":"YulAssignment","src":"2993:14:18","value":{"name":"slot","nodeType":"YulIdentifier","src":"3003:4:18"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2993:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3491,"isOffset":false,"isSlot":true,"src":"2993:6:18","suffix":"slot","valueSize":1},{"declaration":3487,"isOffset":false,"isSlot":false,"src":"3003:4:18","valueSize":1}],"id":3493,"nodeType":"InlineAssembly","src":"2970:47:18"}]},"documentation":{"id":3485,"nodeType":"StructuredDocumentation","src":"2744:86:18","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":3495,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"2844:13:18","nodeType":"FunctionDefinition","parameters":{"id":3488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3487,"mutability":"mutable","name":"slot","nameLocation":"2866:4:18","nodeType":"VariableDeclaration","scope":3495,"src":"2858:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3486,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2858:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2857:14:18"},"returnParameters":{"id":3492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3491,"mutability":"mutable","name":"r","nameLocation":"2914:1:18","nodeType":"VariableDeclaration","scope":3495,"src":"2895:20:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3437_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":3490,"nodeType":"UserDefinedTypeName","pathNode":{"id":3489,"name":"StringSlot","nameLocations":["2895:10:18"],"nodeType":"IdentifierPath","referencedDeclaration":3437,"src":"2895:10:18"},"referencedDeclaration":3437,"src":"2895:10:18","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3437_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"2894:22:18"},"scope":3529,"src":"2835:188:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3505,"nodeType":"Block","src":"3225:112:18","statements":[{"AST":{"nodeType":"YulBlock","src":"3287:44:18","statements":[{"nodeType":"YulAssignment","src":"3301:20:18","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"3311:10:18"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3301:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3502,"isOffset":false,"isSlot":true,"src":"3301:6:18","suffix":"slot","valueSize":1},{"declaration":3498,"isOffset":false,"isSlot":true,"src":"3311:10:18","suffix":"slot","valueSize":1}],"id":3504,"nodeType":"InlineAssembly","src":"3278:53:18"}]},"documentation":{"id":3496,"nodeType":"StructuredDocumentation","src":"3029:101:18","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":3506,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3144:13:18","nodeType":"FunctionDefinition","parameters":{"id":3499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3498,"mutability":"mutable","name":"store","nameLocation":"3173:5:18","nodeType":"VariableDeclaration","scope":3506,"src":"3158:20:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3497,"name":"string","nodeType":"ElementaryTypeName","src":"3158:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3157:22:18"},"returnParameters":{"id":3503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3502,"mutability":"mutable","name":"r","nameLocation":"3222:1:18","nodeType":"VariableDeclaration","scope":3506,"src":"3203:20:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3437_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":3501,"nodeType":"UserDefinedTypeName","pathNode":{"id":3500,"name":"StringSlot","nameLocations":["3203:10:18"],"nodeType":"IdentifierPath","referencedDeclaration":3437,"src":"3203:10:18"},"referencedDeclaration":3437,"src":"3203:10:18","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3437_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3202:22:18"},"scope":3529,"src":"3135:202:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3516,"nodeType":"Block","src":"3513:106:18","statements":[{"AST":{"nodeType":"YulBlock","src":"3575:38:18","statements":[{"nodeType":"YulAssignment","src":"3589:14:18","value":{"name":"slot","nodeType":"YulIdentifier","src":"3599:4:18"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3589:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3513,"isOffset":false,"isSlot":true,"src":"3589:6:18","suffix":"slot","valueSize":1},{"declaration":3509,"isOffset":false,"isSlot":false,"src":"3599:4:18","valueSize":1}],"id":3515,"nodeType":"InlineAssembly","src":"3566:47:18"}]},"documentation":{"id":3507,"nodeType":"StructuredDocumentation","src":"3343:85:18","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":3517,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3442:12:18","nodeType":"FunctionDefinition","parameters":{"id":3510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3509,"mutability":"mutable","name":"slot","nameLocation":"3463:4:18","nodeType":"VariableDeclaration","scope":3517,"src":"3455:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3508,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3455:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3454:14:18"},"returnParameters":{"id":3514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3513,"mutability":"mutable","name":"r","nameLocation":"3510:1:18","nodeType":"VariableDeclaration","scope":3517,"src":"3492:19:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3440_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":3512,"nodeType":"UserDefinedTypeName","pathNode":{"id":3511,"name":"BytesSlot","nameLocations":["3492:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":3440,"src":"3492:9:18"},"referencedDeclaration":3440,"src":"3492:9:18","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3440_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3491:21:18"},"scope":3529,"src":"3433:186:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3527,"nodeType":"Block","src":"3816:112:18","statements":[{"AST":{"nodeType":"YulBlock","src":"3878:44:18","statements":[{"nodeType":"YulAssignment","src":"3892:20:18","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"3902:10:18"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3892:6:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3524,"isOffset":false,"isSlot":true,"src":"3892:6:18","suffix":"slot","valueSize":1},{"declaration":3520,"isOffset":false,"isSlot":true,"src":"3902:10:18","suffix":"slot","valueSize":1}],"id":3526,"nodeType":"InlineAssembly","src":"3869:53:18"}]},"documentation":{"id":3518,"nodeType":"StructuredDocumentation","src":"3625:99:18","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":3528,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3738:12:18","nodeType":"FunctionDefinition","parameters":{"id":3521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3520,"mutability":"mutable","name":"store","nameLocation":"3765:5:18","nodeType":"VariableDeclaration","scope":3528,"src":"3751:19:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3519,"name":"bytes","nodeType":"ElementaryTypeName","src":"3751:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3750:21:18"},"returnParameters":{"id":3525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3524,"mutability":"mutable","name":"r","nameLocation":"3813:1:18","nodeType":"VariableDeclaration","scope":3528,"src":"3795:19:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3440_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":3523,"nodeType":"UserDefinedTypeName","pathNode":{"id":3522,"name":"BytesSlot","nameLocations":["3795:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":3440,"src":"3795:9:18"},"referencedDeclaration":3440,"src":"3795:9:18","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3440_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3794:21:18"},"scope":3529,"src":"3729:199:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3530,"src":"1245:2685:18","usedErrors":[],"usedEvents":[]}],"src":"193:3738:18"},"id":18},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[3877]},"id":3878,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3531,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:19"},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":3532,"nodeType":"StructuredDocumentation","src":"138:205:19","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":3877,"linearizedBaseContracts":[3877],"name":"ECDSA","nameLocation":"352:5:19","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":3537,"members":[{"id":3533,"name":"NoError","nameLocation":"392:7:19","nodeType":"EnumValue","src":"392:7:19"},{"id":3534,"name":"InvalidSignature","nameLocation":"409:16:19","nodeType":"EnumValue","src":"409:16:19"},{"id":3535,"name":"InvalidSignatureLength","nameLocation":"435:22:19","nodeType":"EnumValue","src":"435:22:19"},{"id":3536,"name":"InvalidSignatureS","nameLocation":"467:17:19","nodeType":"EnumValue","src":"467:17:19"}],"name":"RecoverError","nameLocation":"369:12:19","nodeType":"EnumDefinition","src":"364:126:19"},{"documentation":{"id":3538,"nodeType":"StructuredDocumentation","src":"496:63:19","text":" @dev The signature derives the `address(0)`."},"errorSelector":"f645eedf","id":3540,"name":"ECDSAInvalidSignature","nameLocation":"570:21:19","nodeType":"ErrorDefinition","parameters":{"id":3539,"nodeType":"ParameterList","parameters":[],"src":"591:2:19"},"src":"564:30:19"},{"documentation":{"id":3541,"nodeType":"StructuredDocumentation","src":"600:60:19","text":" @dev The signature has an invalid length."},"errorSelector":"fce698f7","id":3545,"name":"ECDSAInvalidSignatureLength","nameLocation":"671:27:19","nodeType":"ErrorDefinition","parameters":{"id":3544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3543,"mutability":"mutable","name":"length","nameLocation":"707:6:19","nodeType":"VariableDeclaration","scope":3545,"src":"699:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3542,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"698:16:19"},"src":"665:50:19"},{"documentation":{"id":3546,"nodeType":"StructuredDocumentation","src":"721:85:19","text":" @dev The signature has an S value that is in the upper half order."},"errorSelector":"d78bce0c","id":3550,"name":"ECDSAInvalidSignatureS","nameLocation":"817:22:19","nodeType":"ErrorDefinition","parameters":{"id":3549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3548,"mutability":"mutable","name":"s","nameLocation":"848:1:19","nodeType":"VariableDeclaration","scope":3550,"src":"840:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3547,"name":"bytes32","nodeType":"ElementaryTypeName","src":"840:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"839:11:19"},"src":"811:40:19"},{"body":{"id":3602,"nodeType":"Block","src":"2242:653:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3565,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3555,"src":"2256:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2266:6:19","memberName":"length","nodeType":"MemberAccess","src":"2256:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":3567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2276:2:19","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2256:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3600,"nodeType":"Block","src":"2781:108:19","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2811:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3588,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2803:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3587,"name":"address","nodeType":"ElementaryTypeName","src":"2803:7:19","typeDescriptions":{}}},"id":3590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2803:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3591,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"2815:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3537_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2828:22:19","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3535,"src":"2815:35:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"expression":{"id":3595,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3555,"src":"2860:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2870:6:19","memberName":"length","nodeType":"MemberAccess","src":"2860:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3594,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2852:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3593,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2852:7:19","typeDescriptions":{}}},"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2852:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3598,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2802:76:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3537_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":3564,"id":3599,"nodeType":"Return","src":"2795:83:19"}]},"id":3601,"nodeType":"IfStatement","src":"2252:637:19","trueBody":{"id":3586,"nodeType":"Block","src":"2280:495:19","statements":[{"assignments":[3570],"declarations":[{"constant":false,"id":3570,"mutability":"mutable","name":"r","nameLocation":"2302:1:19","nodeType":"VariableDeclaration","scope":3586,"src":"2294:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2294:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3571,"nodeType":"VariableDeclarationStatement","src":"2294:9:19"},{"assignments":[3573],"declarations":[{"constant":false,"id":3573,"mutability":"mutable","name":"s","nameLocation":"2325:1:19","nodeType":"VariableDeclaration","scope":3586,"src":"2317:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3572,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2317:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3574,"nodeType":"VariableDeclarationStatement","src":"2317:9:19"},{"assignments":[3576],"declarations":[{"constant":false,"id":3576,"mutability":"mutable","name":"v","nameLocation":"2346:1:19","nodeType":"VariableDeclaration","scope":3586,"src":"2340:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3575,"name":"uint8","nodeType":"ElementaryTypeName","src":"2340:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3577,"nodeType":"VariableDeclarationStatement","src":"2340:7:19"},{"AST":{"nodeType":"YulBlock","src":"2548:171:19","statements":[{"nodeType":"YulAssignment","src":"2566:32:19","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2581:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2592:4:19","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2577:3:19"},"nodeType":"YulFunctionCall","src":"2577:20:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2571:5:19"},"nodeType":"YulFunctionCall","src":"2571:27:19"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2566:1:19"}]},{"nodeType":"YulAssignment","src":"2615:32:19","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2630:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2641:4:19","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2626:3:19"},"nodeType":"YulFunctionCall","src":"2626:20:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2620:5:19"},"nodeType":"YulFunctionCall","src":"2620:27:19"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2615:1:19"}]},{"nodeType":"YulAssignment","src":"2664:41:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2674:1:19","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2687:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2698:4:19","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2683:3:19"},"nodeType":"YulFunctionCall","src":"2683:20:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2677:5:19"},"nodeType":"YulFunctionCall","src":"2677:27:19"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2669:4:19"},"nodeType":"YulFunctionCall","src":"2669:36:19"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2664:1:19"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3570,"isOffset":false,"isSlot":false,"src":"2566:1:19","valueSize":1},{"declaration":3573,"isOffset":false,"isSlot":false,"src":"2615:1:19","valueSize":1},{"declaration":3555,"isOffset":false,"isSlot":false,"src":"2581:9:19","valueSize":1},{"declaration":3555,"isOffset":false,"isSlot":false,"src":"2630:9:19","valueSize":1},{"declaration":3555,"isOffset":false,"isSlot":false,"src":"2687:9:19","valueSize":1},{"declaration":3576,"isOffset":false,"isSlot":false,"src":"2664:1:19","valueSize":1}],"id":3578,"nodeType":"InlineAssembly","src":"2539:180:19"},{"expression":{"arguments":[{"id":3580,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"2750:4:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3581,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3576,"src":"2756:1:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3582,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3570,"src":"2759:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3583,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3573,"src":"2762:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3579,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3603,3683,3791],"referencedDeclaration":3791,"src":"2739:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3537_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":3584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3537_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":3564,"id":3585,"nodeType":"Return","src":"2732:32:19"}]}}]},"documentation":{"id":3551,"nodeType":"StructuredDocumentation","src":"857:1267:19","text":" @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"},"id":3603,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2138:10:19","nodeType":"FunctionDefinition","parameters":{"id":3556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3553,"mutability":"mutable","name":"hash","nameLocation":"2157:4:19","nodeType":"VariableDeclaration","scope":3603,"src":"2149:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3552,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2149:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3555,"mutability":"mutable","name":"signature","nameLocation":"2176:9:19","nodeType":"VariableDeclaration","scope":3603,"src":"2163:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3554,"name":"bytes","nodeType":"ElementaryTypeName","src":"2163:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2148:38:19"},"returnParameters":{"id":3564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3603,"src":"2210:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3557,"name":"address","nodeType":"ElementaryTypeName","src":"2210:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3561,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3603,"src":"2219:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3560,"nodeType":"UserDefinedTypeName","pathNode":{"id":3559,"name":"RecoverError","nameLocations":["2219:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":3537,"src":"2219:12:19"},"referencedDeclaration":3537,"src":"2219:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":3563,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3603,"src":"2233:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3562,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2233:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2209:32:19"},"scope":3877,"src":"2129:766:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3632,"nodeType":"Block","src":"3789:168:19","statements":[{"assignments":[3614,3617,3619],"declarations":[{"constant":false,"id":3614,"mutability":"mutable","name":"recovered","nameLocation":"3808:9:19","nodeType":"VariableDeclaration","scope":3632,"src":"3800:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3613,"name":"address","nodeType":"ElementaryTypeName","src":"3800:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3617,"mutability":"mutable","name":"error","nameLocation":"3832:5:19","nodeType":"VariableDeclaration","scope":3632,"src":"3819:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3616,"nodeType":"UserDefinedTypeName","pathNode":{"id":3615,"name":"RecoverError","nameLocations":["3819:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":3537,"src":"3819:12:19"},"referencedDeclaration":3537,"src":"3819:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":3619,"mutability":"mutable","name":"errorArg","nameLocation":"3847:8:19","nodeType":"VariableDeclaration","scope":3632,"src":"3839:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3618,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3839:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3624,"initialValue":{"arguments":[{"id":3621,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3606,"src":"3870:4:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3622,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"3876:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3620,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3603,3683,3791],"referencedDeclaration":3603,"src":"3859:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$3537_$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":3623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:27:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3537_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"3799:87:19"},{"expression":{"arguments":[{"id":3626,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3617,"src":"3908:5:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},{"id":3627,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3619,"src":"3915:8:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3625,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"3896:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3537_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3896:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3629,"nodeType":"ExpressionStatement","src":"3896:28:19"},{"expression":{"id":3630,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3614,"src":"3941:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3612,"id":3631,"nodeType":"Return","src":"3934:16:19"}]},"documentation":{"id":3604,"nodeType":"StructuredDocumentation","src":"2901:796:19","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."},"id":3633,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3711:7:19","nodeType":"FunctionDefinition","parameters":{"id":3609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3606,"mutability":"mutable","name":"hash","nameLocation":"3727:4:19","nodeType":"VariableDeclaration","scope":3633,"src":"3719:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3605,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3719:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3608,"mutability":"mutable","name":"signature","nameLocation":"3746:9:19","nodeType":"VariableDeclaration","scope":3633,"src":"3733:22:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3607,"name":"bytes","nodeType":"ElementaryTypeName","src":"3733:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3718:38:19"},"returnParameters":{"id":3612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3611,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3633,"src":"3780:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3610,"name":"address","nodeType":"ElementaryTypeName","src":"3780:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3779:9:19"},"scope":3877,"src":"3702:255:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3682,"nodeType":"Block","src":"4285:342:19","statements":[{"id":3681,"nodeType":"UncheckedBlock","src":"4295:326:19","statements":[{"assignments":[3651],"declarations":[{"constant":false,"id":3651,"mutability":"mutable","name":"s","nameLocation":"4327:1:19","nodeType":"VariableDeclaration","scope":3681,"src":"4319:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3650,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4319:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3658,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3652,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"4331:2:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":3655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4344:66:19","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":3654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4336:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3653,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4336:7:19","typeDescriptions":{}}},"id":3656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4336:75:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4331:80:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4319:92:19"},{"assignments":[3660],"declarations":[{"constant":false,"id":3660,"mutability":"mutable","name":"v","nameLocation":"4528:1:19","nodeType":"VariableDeclaration","scope":3681,"src":"4522:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3659,"name":"uint8","nodeType":"ElementaryTypeName","src":"4522:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3673,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3665,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"4547:2:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4539:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3663,"name":"uint256","nodeType":"ElementaryTypeName","src":"4539:7:19","typeDescriptions":{}}},"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4539:11:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4554:3:19","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4539:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3669,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4538:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":3670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4561:2:19","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4538:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3662,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4532:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3661,"name":"uint8","nodeType":"ElementaryTypeName","src":"4532:5:19","typeDescriptions":{}}},"id":3672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4532:32:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4522:42:19"},{"expression":{"arguments":[{"id":3675,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3636,"src":"4596:4:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3676,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"4602:1:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3677,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"4605:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3678,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"4608:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3674,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3603,3683,3791],"referencedDeclaration":3791,"src":"4585:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3537_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4585:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3537_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":3649,"id":3680,"nodeType":"Return","src":"4578:32:19"}]}]},"documentation":{"id":3634,"nodeType":"StructuredDocumentation","src":"3963:205:19","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]"},"id":3683,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4182:10:19","nodeType":"FunctionDefinition","parameters":{"id":3641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3636,"mutability":"mutable","name":"hash","nameLocation":"4201:4:19","nodeType":"VariableDeclaration","scope":3683,"src":"4193:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3635,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3638,"mutability":"mutable","name":"r","nameLocation":"4215:1:19","nodeType":"VariableDeclaration","scope":3683,"src":"4207:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3637,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4207:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3640,"mutability":"mutable","name":"vs","nameLocation":"4226:2:19","nodeType":"VariableDeclaration","scope":3683,"src":"4218:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3639,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4218:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4192:37:19"},"returnParameters":{"id":3649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3643,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3683,"src":"4253:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3642,"name":"address","nodeType":"ElementaryTypeName","src":"4253:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3646,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3683,"src":"4262:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3645,"nodeType":"UserDefinedTypeName","pathNode":{"id":3644,"name":"RecoverError","nameLocations":["4262:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":3537,"src":"4262:12:19"},"referencedDeclaration":3537,"src":"4262:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":3648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3683,"src":"4276:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3647,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4276:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4252:32:19"},"scope":3877,"src":"4173:454:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3715,"nodeType":"Block","src":"4840:164:19","statements":[{"assignments":[3696,3699,3701],"declarations":[{"constant":false,"id":3696,"mutability":"mutable","name":"recovered","nameLocation":"4859:9:19","nodeType":"VariableDeclaration","scope":3715,"src":"4851:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3695,"name":"address","nodeType":"ElementaryTypeName","src":"4851:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3699,"mutability":"mutable","name":"error","nameLocation":"4883:5:19","nodeType":"VariableDeclaration","scope":3715,"src":"4870:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3698,"nodeType":"UserDefinedTypeName","pathNode":{"id":3697,"name":"RecoverError","nameLocations":["4870:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":3537,"src":"4870:12:19"},"referencedDeclaration":3537,"src":"4870:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":3701,"mutability":"mutable","name":"errorArg","nameLocation":"4898:8:19","nodeType":"VariableDeclaration","scope":3715,"src":"4890:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3700,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4890:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3707,"initialValue":{"arguments":[{"id":3703,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3686,"src":"4921:4:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3704,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"4927:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3705,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3690,"src":"4930:2:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3702,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3603,3683,3791],"referencedDeclaration":3683,"src":"4910:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3537_$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":3706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4910:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3537_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"4850:83:19"},{"expression":{"arguments":[{"id":3709,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3699,"src":"4955:5:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},{"id":3710,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3701,"src":"4962:8:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3708,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"4943:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3537_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":3711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4943:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3712,"nodeType":"ExpressionStatement","src":"4943:28:19"},{"expression":{"id":3713,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3696,"src":"4988:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3694,"id":3714,"nodeType":"Return","src":"4981:16:19"}]},"documentation":{"id":3684,"nodeType":"StructuredDocumentation","src":"4633:116:19","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."},"id":3716,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4763:7:19","nodeType":"FunctionDefinition","parameters":{"id":3691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3686,"mutability":"mutable","name":"hash","nameLocation":"4779:4:19","nodeType":"VariableDeclaration","scope":3716,"src":"4771:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3685,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4771:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3688,"mutability":"mutable","name":"r","nameLocation":"4793:1:19","nodeType":"VariableDeclaration","scope":3716,"src":"4785:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3687,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4785:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3690,"mutability":"mutable","name":"vs","nameLocation":"4804:2:19","nodeType":"VariableDeclaration","scope":3716,"src":"4796:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3689,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4796:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4770:37:19"},"returnParameters":{"id":3694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3693,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3716,"src":"4831:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3692,"name":"address","nodeType":"ElementaryTypeName","src":"4831:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4830:9:19"},"scope":3877,"src":"4754:250:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3790,"nodeType":"Block","src":"5298:1372:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3737,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"6194:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6186:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3735,"name":"uint256","nodeType":"ElementaryTypeName","src":"6186:7:19","typeDescriptions":{}}},"id":3738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":3739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6199:66:19","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6186:79:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3751,"nodeType":"IfStatement","src":"6182:164:19","trueBody":{"id":3750,"nodeType":"Block","src":"6267:79:19","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6297:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3742,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6289:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3741,"name":"address","nodeType":"ElementaryTypeName","src":"6289:7:19","typeDescriptions":{}}},"id":3744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6289:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3745,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"6301:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3537_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6314:17:19","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3536,"src":"6301:30:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},{"id":3747,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"6333:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3748,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6288:47:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3537_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":3734,"id":3749,"nodeType":"Return","src":"6281:54:19"}]}},{"assignments":[3753],"declarations":[{"constant":false,"id":3753,"mutability":"mutable","name":"signer","nameLocation":"6448:6:19","nodeType":"VariableDeclaration","scope":3790,"src":"6440:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3752,"name":"address","nodeType":"ElementaryTypeName","src":"6440:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3760,"initialValue":{"arguments":[{"id":3755,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"6467:4:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3756,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"6473:1:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3757,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"6476:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3758,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"6479:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3754,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6457:9:19","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":3759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6457:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6440:41:19"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3761,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3753,"src":"6495:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6513:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6505:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3762,"name":"address","nodeType":"ElementaryTypeName","src":"6505:7:19","typeDescriptions":{}}},"id":3765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6505:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6495:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3780,"nodeType":"IfStatement","src":"6491:113:19","trueBody":{"id":3779,"nodeType":"Block","src":"6517:87:19","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6547:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3768,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6539:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3767,"name":"address","nodeType":"ElementaryTypeName","src":"6539:7:19","typeDescriptions":{}}},"id":3770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6539:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3771,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"6551:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3537_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3772,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6564:16:19","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3534,"src":"6551:29:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"hexValue":"30","id":3775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6590:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3774,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6582:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3773,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6582:7:19","typeDescriptions":{}}},"id":3776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6582:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3777,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6538:55:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3537_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":3734,"id":3778,"nodeType":"Return","src":"6531:62:19"}]}},{"expression":{"components":[{"id":3781,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3753,"src":"6622:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3782,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"6630:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3537_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6643:7:19","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3533,"src":"6630:20:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},{"arguments":[{"hexValue":"30","id":3786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6660:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6652:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3784,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6652:7:19","typeDescriptions":{}}},"id":3787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6652:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3788,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6621:42:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3537_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"functionReturnParameters":3734,"id":3789,"nodeType":"Return","src":"6614:49:19"}]},"documentation":{"id":3717,"nodeType":"StructuredDocumentation","src":"5010:125:19","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":3791,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5149:10:19","nodeType":"FunctionDefinition","parameters":{"id":3726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3719,"mutability":"mutable","name":"hash","nameLocation":"5177:4:19","nodeType":"VariableDeclaration","scope":3791,"src":"5169:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3718,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5169:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3721,"mutability":"mutable","name":"v","nameLocation":"5197:1:19","nodeType":"VariableDeclaration","scope":3791,"src":"5191:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3720,"name":"uint8","nodeType":"ElementaryTypeName","src":"5191:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3723,"mutability":"mutable","name":"r","nameLocation":"5216:1:19","nodeType":"VariableDeclaration","scope":3791,"src":"5208:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3722,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5208:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3725,"mutability":"mutable","name":"s","nameLocation":"5235:1:19","nodeType":"VariableDeclaration","scope":3791,"src":"5227:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3724,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5227:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5159:83:19"},"returnParameters":{"id":3734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3728,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3791,"src":"5266:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3727,"name":"address","nodeType":"ElementaryTypeName","src":"5266:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3731,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3791,"src":"5275:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3730,"nodeType":"UserDefinedTypeName","pathNode":{"id":3729,"name":"RecoverError","nameLocations":["5275:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":3537,"src":"5275:12:19"},"referencedDeclaration":3537,"src":"5275:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":3733,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3791,"src":"5289:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3732,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5289:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5265:32:19"},"scope":3877,"src":"5140:1530:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3826,"nodeType":"Block","src":"6897:166:19","statements":[{"assignments":[3806,3809,3811],"declarations":[{"constant":false,"id":3806,"mutability":"mutable","name":"recovered","nameLocation":"6916:9:19","nodeType":"VariableDeclaration","scope":3826,"src":"6908:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3805,"name":"address","nodeType":"ElementaryTypeName","src":"6908:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3809,"mutability":"mutable","name":"error","nameLocation":"6940:5:19","nodeType":"VariableDeclaration","scope":3826,"src":"6927:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3808,"nodeType":"UserDefinedTypeName","pathNode":{"id":3807,"name":"RecoverError","nameLocations":["6927:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":3537,"src":"6927:12:19"},"referencedDeclaration":3537,"src":"6927:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":3811,"mutability":"mutable","name":"errorArg","nameLocation":"6955:8:19","nodeType":"VariableDeclaration","scope":3826,"src":"6947:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3810,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6947:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3818,"initialValue":{"arguments":[{"id":3813,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"6978:4:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3814,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3796,"src":"6984:1:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3815,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3798,"src":"6987:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3816,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"6990:1:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3812,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3603,3683,3791],"referencedDeclaration":3791,"src":"6967:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3537_$_t_bytes32_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"}},"id":3817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6967:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3537_$_t_bytes32_$","typeString":"tuple(address,enum ECDSA.RecoverError,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"6907:85:19"},{"expression":{"arguments":[{"id":3820,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"7014:5:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},{"id":3821,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"7021:8:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3819,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"7002:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3537_$_t_bytes32_$returns$__$","typeString":"function (enum ECDSA.RecoverError,bytes32) pure"}},"id":3822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7002:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3823,"nodeType":"ExpressionStatement","src":"7002:28:19"},{"expression":{"id":3824,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3806,"src":"7047:9:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3804,"id":3825,"nodeType":"Return","src":"7040:16:19"}]},"documentation":{"id":3792,"nodeType":"StructuredDocumentation","src":"6676:122:19","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":3827,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6812:7:19","nodeType":"FunctionDefinition","parameters":{"id":3801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3794,"mutability":"mutable","name":"hash","nameLocation":"6828:4:19","nodeType":"VariableDeclaration","scope":3827,"src":"6820:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3793,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6820:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3796,"mutability":"mutable","name":"v","nameLocation":"6840:1:19","nodeType":"VariableDeclaration","scope":3827,"src":"6834:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3795,"name":"uint8","nodeType":"ElementaryTypeName","src":"6834:5:19","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3798,"mutability":"mutable","name":"r","nameLocation":"6851:1:19","nodeType":"VariableDeclaration","scope":3827,"src":"6843:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3797,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6843:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3800,"mutability":"mutable","name":"s","nameLocation":"6862:1:19","nodeType":"VariableDeclaration","scope":3827,"src":"6854:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3799,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6854:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6819:45:19"},"returnParameters":{"id":3804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3803,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3827,"src":"6888:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3802,"name":"address","nodeType":"ElementaryTypeName","src":"6888:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6887:9:19"},"scope":3877,"src":"6803:260:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3875,"nodeType":"Block","src":"7268:460:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"},"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3836,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"7282:5:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3837,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"7291:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3537_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7304:7:19","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3533,"src":"7291:20:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"src":"7282:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"},"id":3845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3842,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"7378:5:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3843,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"7387:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3537_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7400:16:19","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3534,"src":"7387:29:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"src":"7378:38:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"},"id":3853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3850,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"7483:5:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3851,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"7492:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3537_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3852,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7505:22:19","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3535,"src":"7492:35:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"src":"7483:44:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"},"id":3865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3862,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"7617:5:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3863,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"7626:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3537_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7639:17:19","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3536,"src":"7626:30:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"src":"7617:39:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3871,"nodeType":"IfStatement","src":"7613:109:19","trueBody":{"id":3870,"nodeType":"Block","src":"7658:64:19","statements":[{"errorCall":{"arguments":[{"id":3867,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"7702:8:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3866,"name":"ECDSAInvalidSignatureS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"7679:22:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":3868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7679:32:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3869,"nodeType":"RevertStatement","src":"7672:39:19"}]}},"id":3872,"nodeType":"IfStatement","src":"7479:243:19","trueBody":{"id":3861,"nodeType":"Block","src":"7529:78:19","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":3857,"name":"errorArg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"7586:8:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3856,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7578:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3855,"name":"uint256","nodeType":"ElementaryTypeName","src":"7578:7:19","typeDescriptions":{}}},"id":3858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7578:17:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3854,"name":"ECDSAInvalidSignatureLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"7550:27:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7550:46:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3860,"nodeType":"RevertStatement","src":"7543:53:19"}]}},"id":3873,"nodeType":"IfStatement","src":"7374:348:19","trueBody":{"id":3849,"nodeType":"Block","src":"7418:55:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3846,"name":"ECDSAInvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"7439:21:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7439:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3848,"nodeType":"RevertStatement","src":"7432:30:19"}]}},"id":3874,"nodeType":"IfStatement","src":"7278:444:19","trueBody":{"id":3841,"nodeType":"Block","src":"7313:55:19","statements":[{"functionReturnParameters":3835,"id":3840,"nodeType":"Return","src":"7327:7:19"}]}}]},"documentation":{"id":3828,"nodeType":"StructuredDocumentation","src":"7069:122:19","text":" @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."},"id":3876,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"7205:11:19","nodeType":"FunctionDefinition","parameters":{"id":3834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3831,"mutability":"mutable","name":"error","nameLocation":"7230:5:19","nodeType":"VariableDeclaration","scope":3876,"src":"7217:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3830,"nodeType":"UserDefinedTypeName","pathNode":{"id":3829,"name":"RecoverError","nameLocations":["7217:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":3537,"src":"7217:12:19"},"referencedDeclaration":3537,"src":"7217:12:19","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3537","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"},{"constant":false,"id":3833,"mutability":"mutable","name":"errorArg","nameLocation":"7245:8:19","nodeType":"VariableDeclaration","scope":3876,"src":"7237:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3832,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7237:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7216:38:19"},"returnParameters":{"id":3835,"nodeType":"ParameterList","parameters":[],"src":"7268:0:19"},"scope":3877,"src":"7196:532:19","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3878,"src":"344:7386:19","usedErrors":[3540,3545,3550],"usedEvents":[]}],"src":"112:7619:19"},"id":19},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[3901],"IERC165":[3913]},"id":3902,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3879,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:20"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":3881,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3902,"sourceUnit":3914,"src":"140:38:20","symbolAliases":[{"foreign":{"id":3880,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3913,"src":"148:7:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3883,"name":"IERC165","nameLocations":["687:7:20"],"nodeType":"IdentifierPath","referencedDeclaration":3913,"src":"687:7:20"},"id":3884,"nodeType":"InheritanceSpecifier","src":"687:7:20"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":3882,"nodeType":"StructuredDocumentation","src":"180:478:20","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":3901,"linearizedBaseContracts":[3901,3913],"name":"ERC165","nameLocation":"677:6:20","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3912],"body":{"id":3899,"nodeType":"Block","src":"844:64:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3892,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3887,"src":"861:11:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3894,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3913,"src":"881:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3913_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3913_$","typeString":"type(contract IERC165)"}],"id":3893,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"876:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3913","typeString":"type(contract IERC165)"}},"id":3896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:20","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3891,"id":3898,"nodeType":"Return","src":"854:47:20"}]},"documentation":{"id":3885,"nodeType":"StructuredDocumentation","src":"701:56:20","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3900,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:20","nodeType":"FunctionDefinition","parameters":{"id":3888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3887,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:20","nodeType":"VariableDeclaration","scope":3900,"src":"789:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3886,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:20"},"returnParameters":{"id":3891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3900,"src":"838:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3889,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:20"},"scope":3901,"src":"762:146:20","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":3902,"src":"659:251:20","usedErrors":[],"usedEvents":[]}],"src":"114:797:20"},"id":20},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[3913]},"id":3914,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3903,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":3904,"nodeType":"StructuredDocumentation","src":"141:279:21","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3913,"linearizedBaseContracts":[3913],"name":"IERC165","nameLocation":"431:7:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3905,"nodeType":"StructuredDocumentation","src":"445:340:21","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3912,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:21","nodeType":"FunctionDefinition","parameters":{"id":3908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3907,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:21","nodeType":"VariableDeclaration","scope":3912,"src":"817:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3906,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:21"},"returnParameters":{"id":3911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3910,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3912,"src":"860:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3909,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:21"},"scope":3913,"src":"790:76:21","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3914,"src":"421:447:21","usedErrors":[],"usedEvents":[]}],"src":"115:754:21"},"id":21},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[4967]},"id":4968,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3915,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:22"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":3916,"nodeType":"StructuredDocumentation","src":"129:73:22","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4967,"linearizedBaseContracts":[4967],"name":"Math","nameLocation":"211:4:22","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3917,"nodeType":"StructuredDocumentation","src":"222:50:22","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":3919,"name":"MathOverflowedMulDiv","nameLocation":"283:20:22","nodeType":"ErrorDefinition","parameters":{"id":3918,"nodeType":"ParameterList","parameters":[],"src":"303:2:22"},"src":"277:29:22"},{"canonicalName":"Math.Rounding","id":3924,"members":[{"id":3920,"name":"Floor","nameLocation":"336:5:22","nodeType":"EnumValue","src":"336:5:22"},{"id":3921,"name":"Ceil","nameLocation":"379:4:22","nodeType":"EnumValue","src":"379:4:22"},{"id":3922,"name":"Trunc","nameLocation":"421:5:22","nodeType":"EnumValue","src":"421:5:22"},{"id":3923,"name":"Expand","nameLocation":"451:6:22","nodeType":"EnumValue","src":"451:6:22"}],"name":"Rounding","nameLocation":"317:8:22","nodeType":"EnumDefinition","src":"312:169:22"},{"body":{"id":3955,"nodeType":"Block","src":"661:140:22","statements":[{"id":3954,"nodeType":"UncheckedBlock","src":"671:124:22","statements":[{"assignments":[3937],"declarations":[{"constant":false,"id":3937,"mutability":"mutable","name":"c","nameLocation":"703:1:22","nodeType":"VariableDeclaration","scope":3954,"src":"695:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3936,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3941,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3938,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3927,"src":"707:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3939,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"711:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3942,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3937,"src":"730:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3943,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3927,"src":"734:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3949,"nodeType":"IfStatement","src":"726:28:22","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3947,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3935,"id":3948,"nodeType":"Return","src":"737:17:22"}},{"expression":{"components":[{"hexValue":"74727565","id":3950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3951,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3937,"src":"782:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3952,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3935,"id":3953,"nodeType":"Return","src":"768:16:22"}]}]},"documentation":{"id":3925,"nodeType":"StructuredDocumentation","src":"487:93:22","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":3956,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:22","nodeType":"FunctionDefinition","parameters":{"id":3930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3927,"mutability":"mutable","name":"a","nameLocation":"609:1:22","nodeType":"VariableDeclaration","scope":3956,"src":"601:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3926,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3929,"mutability":"mutable","name":"b","nameLocation":"620:1:22","nodeType":"VariableDeclaration","scope":3956,"src":"612:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3928,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:22"},"returnParameters":{"id":3935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3932,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3956,"src":"646:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3931,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3934,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3956,"src":"652:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3933,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:22"},"scope":4967,"src":"585:216:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3983,"nodeType":"Block","src":"984:113:22","statements":[{"id":3982,"nodeType":"UncheckedBlock","src":"994:97:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3968,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"1022:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3969,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3959,"src":"1026:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3975,"nodeType":"IfStatement","src":"1018:28:22","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3973,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3967,"id":3974,"nodeType":"Return","src":"1029:17:22"}},{"expression":{"components":[{"hexValue":"74727565","id":3976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3977,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3959,"src":"1074:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3978,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"1078:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3980,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3967,"id":3981,"nodeType":"Return","src":"1060:20:22"}]}]},"documentation":{"id":3957,"nodeType":"StructuredDocumentation","src":"807:96:22","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":3984,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:22","nodeType":"FunctionDefinition","parameters":{"id":3962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3959,"mutability":"mutable","name":"a","nameLocation":"932:1:22","nodeType":"VariableDeclaration","scope":3984,"src":"924:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3958,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3961,"mutability":"mutable","name":"b","nameLocation":"943:1:22","nodeType":"VariableDeclaration","scope":3984,"src":"935:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3960,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:22"},"returnParameters":{"id":3967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3964,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3984,"src":"969:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3963,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3966,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3984,"src":"975:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3965,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:22"},"scope":4967,"src":"908:189:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4025,"nodeType":"Block","src":"1283:417:22","statements":[{"id":4024,"nodeType":"UncheckedBlock","src":"1293:401:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3996,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"1551:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4003,"nodeType":"IfStatement","src":"1547:28:22","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":3999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":4000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4001,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3995,"id":4002,"nodeType":"Return","src":"1559:16:22"}},{"assignments":[4005],"declarations":[{"constant":false,"id":4005,"mutability":"mutable","name":"c","nameLocation":"1597:1:22","nodeType":"VariableDeclaration","scope":4024,"src":"1589:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4004,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4009,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4006,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"1601:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4007,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"1605:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4010,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4005,"src":"1624:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4011,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"1628:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4013,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"1633:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4019,"nodeType":"IfStatement","src":"1620:33:22","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":4015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":4016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4017,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3995,"id":4018,"nodeType":"Return","src":"1636:17:22"}},{"expression":{"components":[{"hexValue":"74727565","id":4020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":4021,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4005,"src":"1681:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4022,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3995,"id":4023,"nodeType":"Return","src":"1667:16:22"}]}]},"documentation":{"id":3985,"nodeType":"StructuredDocumentation","src":"1103:99:22","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":4026,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:22","nodeType":"FunctionDefinition","parameters":{"id":3990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3987,"mutability":"mutable","name":"a","nameLocation":"1231:1:22","nodeType":"VariableDeclaration","scope":4026,"src":"1223:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3986,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3989,"mutability":"mutable","name":"b","nameLocation":"1242:1:22","nodeType":"VariableDeclaration","scope":4026,"src":"1234:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3988,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:22"},"returnParameters":{"id":3995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3992,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4026,"src":"1268:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3991,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3994,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4026,"src":"1274:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3993,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:22"},"scope":4967,"src":"1207:493:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4053,"nodeType":"Block","src":"1887:114:22","statements":[{"id":4052,"nodeType":"UncheckedBlock","src":"1897:98:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4038,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4031,"src":"1925:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4045,"nodeType":"IfStatement","src":"1921:29:22","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":4041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":4042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4043,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4037,"id":4044,"nodeType":"Return","src":"1933:17:22"}},{"expression":{"components":[{"hexValue":"74727565","id":4046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4047,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4029,"src":"1978:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4048,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4031,"src":"1982:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4050,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4037,"id":4051,"nodeType":"Return","src":"1964:20:22"}]}]},"documentation":{"id":4027,"nodeType":"StructuredDocumentation","src":"1706:100:22","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":4054,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:22","nodeType":"FunctionDefinition","parameters":{"id":4032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4029,"mutability":"mutable","name":"a","nameLocation":"1835:1:22","nodeType":"VariableDeclaration","scope":4054,"src":"1827:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4028,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4031,"mutability":"mutable","name":"b","nameLocation":"1846:1:22","nodeType":"VariableDeclaration","scope":4054,"src":"1838:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4030,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:22"},"returnParameters":{"id":4037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4034,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4054,"src":"1872:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4033,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4036,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4054,"src":"1878:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4035,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:22"},"scope":4967,"src":"1811:190:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4081,"nodeType":"Block","src":"2198:114:22","statements":[{"id":4080,"nodeType":"UncheckedBlock","src":"2208:98:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4066,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4059,"src":"2236:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4073,"nodeType":"IfStatement","src":"2232:29:22","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":4069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":4070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4071,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4065,"id":4072,"nodeType":"Return","src":"2244:17:22"}},{"expression":{"components":[{"hexValue":"74727565","id":4074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4075,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"2289:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":4076,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4059,"src":"2293:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4078,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:22","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4065,"id":4079,"nodeType":"Return","src":"2275:20:22"}]}]},"documentation":{"id":4055,"nodeType":"StructuredDocumentation","src":"2007:110:22","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":4082,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:22","nodeType":"FunctionDefinition","parameters":{"id":4060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4057,"mutability":"mutable","name":"a","nameLocation":"2146:1:22","nodeType":"VariableDeclaration","scope":4082,"src":"2138:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4056,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4059,"mutability":"mutable","name":"b","nameLocation":"2157:1:22","nodeType":"VariableDeclaration","scope":4082,"src":"2149:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4058,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:22"},"returnParameters":{"id":4065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4062,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4082,"src":"2183:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4061,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4064,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4082,"src":"2189:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4063,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:22"},"scope":4967,"src":"2122:190:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4099,"nodeType":"Block","src":"2449:37:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4092,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"2466:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4093,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4087,"src":"2470:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4096,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4087,"src":"2478:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:22","trueExpression":{"id":4095,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4085,"src":"2474:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4091,"id":4098,"nodeType":"Return","src":"2459:20:22"}]},"documentation":{"id":4083,"nodeType":"StructuredDocumentation","src":"2318:59:22","text":" @dev Returns the largest of two numbers."},"id":4100,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:22","nodeType":"FunctionDefinition","parameters":{"id":4088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4085,"mutability":"mutable","name":"a","nameLocation":"2403:1:22","nodeType":"VariableDeclaration","scope":4100,"src":"2395:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4084,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4087,"mutability":"mutable","name":"b","nameLocation":"2414:1:22","nodeType":"VariableDeclaration","scope":4100,"src":"2406:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4086,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:22"},"returnParameters":{"id":4091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4090,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4100,"src":"2440:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4089,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:22"},"scope":4967,"src":"2382:104:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4117,"nodeType":"Block","src":"2624:37:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4110,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4103,"src":"2641:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4111,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"2645:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4114,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4105,"src":"2653:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:22","trueExpression":{"id":4113,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4103,"src":"2649:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4109,"id":4116,"nodeType":"Return","src":"2634:20:22"}]},"documentation":{"id":4101,"nodeType":"StructuredDocumentation","src":"2492:60:22","text":" @dev Returns the smallest of two numbers."},"id":4118,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:22","nodeType":"FunctionDefinition","parameters":{"id":4106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4103,"mutability":"mutable","name":"a","nameLocation":"2578:1:22","nodeType":"VariableDeclaration","scope":4118,"src":"2570:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4102,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4105,"mutability":"mutable","name":"b","nameLocation":"2589:1:22","nodeType":"VariableDeclaration","scope":4118,"src":"2581:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4104,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:22"},"returnParameters":{"id":4109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4118,"src":"2615:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4107,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:22"},"scope":4967,"src":"2557:104:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4140,"nodeType":"Block","src":"2845:82:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4128,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"2900:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4129,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"2904:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4131,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4132,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4121,"src":"2910:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4133,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4123,"src":"2914:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4135,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":4136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4127,"id":4139,"nodeType":"Return","src":"2892:28:22"}]},"documentation":{"id":4119,"nodeType":"StructuredDocumentation","src":"2667:102:22","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":4141,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:22","nodeType":"FunctionDefinition","parameters":{"id":4124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4121,"mutability":"mutable","name":"a","nameLocation":"2799:1:22","nodeType":"VariableDeclaration","scope":4141,"src":"2791:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4120,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4123,"mutability":"mutable","name":"b","nameLocation":"2810:1:22","nodeType":"VariableDeclaration","scope":4141,"src":"2802:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4122,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:22"},"returnParameters":{"id":4127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4126,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4141,"src":"2836:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4125,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:22"},"scope":4967,"src":"2774:153:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4174,"nodeType":"Block","src":"3219:260:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4151,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"3233:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4159,"nodeType":"IfStatement","src":"3229:127:22","trueBody":{"id":4158,"nodeType":"Block","src":"3241:115:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4154,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"3340:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4155,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"3344:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4150,"id":4157,"nodeType":"Return","src":"3333:12:22"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4160,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"3444:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4164,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4144,"src":"3458:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4167,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4168,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4146,"src":"3467:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:22","trueExpression":{"hexValue":"30","id":4163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4150,"id":4173,"nodeType":"Return","src":"3437:35:22"}]},"documentation":{"id":4142,"nodeType":"StructuredDocumentation","src":"2933:210:22","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":4175,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:22","nodeType":"FunctionDefinition","parameters":{"id":4147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4144,"mutability":"mutable","name":"a","nameLocation":"3173:1:22","nodeType":"VariableDeclaration","scope":4175,"src":"3165:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4143,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4146,"mutability":"mutable","name":"b","nameLocation":"3184:1:22","nodeType":"VariableDeclaration","scope":4175,"src":"3176:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4145,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:22"},"returnParameters":{"id":4150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4149,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4175,"src":"3210:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4148,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:22"},"scope":4967,"src":"3148:331:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4300,"nodeType":"Block","src":"3901:4018:22","statements":[{"id":4299,"nodeType":"UncheckedBlock","src":"3911:4002:22","statements":[{"assignments":[4188],"declarations":[{"constant":false,"id":4188,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:22","nodeType":"VariableDeclaration","scope":4299,"src":"4232:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4187,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4192,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4189,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"4248:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4190,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"4252:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:22"},{"assignments":[4194],"declarations":[{"constant":false,"id":4194,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:22","nodeType":"VariableDeclaration","scope":4299,"src":"4312:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4193,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4195,"nodeType":"VariableDeclarationStatement","src":"4312:13:22"},{"AST":{"nodeType":"YulBlock","src":"4392:122:22","statements":[{"nodeType":"YulVariableDeclaration","src":"4410:30:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4427:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"4430:1:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4437:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4433:3:22"},"nodeType":"YulFunctionCall","src":"4433:6:22"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"4420:6:22"},"nodeType":"YulFunctionCall","src":"4420:20:22"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"4414:2:22","type":""}]},{"nodeType":"YulAssignment","src":"4457:43:22","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4474:2:22"},{"name":"prod0","nodeType":"YulIdentifier","src":"4478:5:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4470:3:22"},"nodeType":"YulFunctionCall","src":"4470:14:22"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4489:2:22"},{"name":"prod0","nodeType":"YulIdentifier","src":"4493:5:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4486:2:22"},"nodeType":"YulFunctionCall","src":"4486:13:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4466:3:22"},"nodeType":"YulFunctionCall","src":"4466:34:22"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"4457:5:22"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4188,"isOffset":false,"isSlot":false,"src":"4478:5:22","valueSize":1},{"declaration":4188,"isOffset":false,"isSlot":false,"src":"4493:5:22","valueSize":1},{"declaration":4194,"isOffset":false,"isSlot":false,"src":"4457:5:22","valueSize":1},{"declaration":4178,"isOffset":false,"isSlot":false,"src":"4427:1:22","valueSize":1},{"declaration":4180,"isOffset":false,"isSlot":false,"src":"4430:1:22","valueSize":1}],"id":4196,"nodeType":"InlineAssembly","src":"4383:131:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4197,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4194,"src":"4595:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4205,"nodeType":"IfStatement","src":"4591:368:22","trueBody":{"id":4204,"nodeType":"Block","src":"4607:352:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4200,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"4925:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4201,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"4933:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4186,"id":4203,"nodeType":"Return","src":"4918:26:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4206,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"5065:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":4207,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4194,"src":"5080:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4213,"nodeType":"IfStatement","src":"5061:88:22","trueBody":{"id":4212,"nodeType":"Block","src":"5087:62:22","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4209,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3919,"src":"5112:20:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4211,"nodeType":"RevertStatement","src":"5105:29:22"}]}},{"assignments":[4215],"declarations":[{"constant":false,"id":4215,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:22","nodeType":"VariableDeclaration","scope":4299,"src":"5404:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4214,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4216,"nodeType":"VariableDeclarationStatement","src":"5404:17:22"},{"AST":{"nodeType":"YulBlock","src":"5444:291:22","statements":[{"nodeType":"YulAssignment","src":"5513:38:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5533:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"5536:1:22"},{"name":"denominator","nodeType":"YulIdentifier","src":"5539:11:22"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5526:6:22"},"nodeType":"YulFunctionCall","src":"5526:25:22"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"5513:9:22"}]},{"nodeType":"YulAssignment","src":"5633:41:22","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"5646:5:22"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"5656:9:22"},{"name":"prod0","nodeType":"YulIdentifier","src":"5667:5:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5653:2:22"},"nodeType":"YulFunctionCall","src":"5653:20:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5642:3:22"},"nodeType":"YulFunctionCall","src":"5642:32:22"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"5633:5:22"}]},{"nodeType":"YulAssignment","src":"5691:30:22","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"5704:5:22"},{"name":"remainder","nodeType":"YulIdentifier","src":"5711:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5700:3:22"},"nodeType":"YulFunctionCall","src":"5700:21:22"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"5691:5:22"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4182,"isOffset":false,"isSlot":false,"src":"5539:11:22","valueSize":1},{"declaration":4188,"isOffset":false,"isSlot":false,"src":"5667:5:22","valueSize":1},{"declaration":4188,"isOffset":false,"isSlot":false,"src":"5691:5:22","valueSize":1},{"declaration":4188,"isOffset":false,"isSlot":false,"src":"5704:5:22","valueSize":1},{"declaration":4194,"isOffset":false,"isSlot":false,"src":"5633:5:22","valueSize":1},{"declaration":4194,"isOffset":false,"isSlot":false,"src":"5646:5:22","valueSize":1},{"declaration":4215,"isOffset":false,"isSlot":false,"src":"5513:9:22","valueSize":1},{"declaration":4215,"isOffset":false,"isSlot":false,"src":"5656:9:22","valueSize":1},{"declaration":4215,"isOffset":false,"isSlot":false,"src":"5711:9:22","valueSize":1},{"declaration":4178,"isOffset":false,"isSlot":false,"src":"5533:1:22","valueSize":1},{"declaration":4180,"isOffset":false,"isSlot":false,"src":"5536:1:22","valueSize":1}],"id":4217,"nodeType":"InlineAssembly","src":"5435:300:22"},{"assignments":[4219],"declarations":[{"constant":false,"id":4219,"mutability":"mutable","name":"twos","nameLocation":"5947:4:22","nodeType":"VariableDeclaration","scope":4299,"src":"5939:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4218,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4226,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4220,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"5954:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":4221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4222,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"5973:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4224,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:22"},{"AST":{"nodeType":"YulBlock","src":"6008:362:22","statements":[{"nodeType":"YulAssignment","src":"6073:37:22","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"6092:11:22"},{"name":"twos","nodeType":"YulIdentifier","src":"6105:4:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6088:3:22"},"nodeType":"YulFunctionCall","src":"6088:22:22"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"6073:11:22"}]},{"nodeType":"YulAssignment","src":"6177:25:22","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"6190:5:22"},{"name":"twos","nodeType":"YulIdentifier","src":"6197:4:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6186:3:22"},"nodeType":"YulFunctionCall","src":"6186:16:22"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"6177:5:22"}]},{"nodeType":"YulAssignment","src":"6317:39:22","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6337:1:22","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"6340:4:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6333:3:22"},"nodeType":"YulFunctionCall","src":"6333:12:22"},{"name":"twos","nodeType":"YulIdentifier","src":"6347:4:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6329:3:22"},"nodeType":"YulFunctionCall","src":"6329:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"6354:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6325:3:22"},"nodeType":"YulFunctionCall","src":"6325:31:22"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"6317:4:22"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4182,"isOffset":false,"isSlot":false,"src":"6073:11:22","valueSize":1},{"declaration":4182,"isOffset":false,"isSlot":false,"src":"6092:11:22","valueSize":1},{"declaration":4188,"isOffset":false,"isSlot":false,"src":"6177:5:22","valueSize":1},{"declaration":4188,"isOffset":false,"isSlot":false,"src":"6190:5:22","valueSize":1},{"declaration":4219,"isOffset":false,"isSlot":false,"src":"6105:4:22","valueSize":1},{"declaration":4219,"isOffset":false,"isSlot":false,"src":"6197:4:22","valueSize":1},{"declaration":4219,"isOffset":false,"isSlot":false,"src":"6317:4:22","valueSize":1},{"declaration":4219,"isOffset":false,"isSlot":false,"src":"6340:4:22","valueSize":1},{"declaration":4219,"isOffset":false,"isSlot":false,"src":"6347:4:22","valueSize":1}],"id":4227,"nodeType":"InlineAssembly","src":"5999:371:22"},{"expression":{"id":4232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4228,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"6436:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4229,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4194,"src":"6445:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4230,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4219,"src":"6453:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4233,"nodeType":"ExpressionStatement","src":"6436:21:22"},{"assignments":[4235],"declarations":[{"constant":false,"id":4235,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:22","nodeType":"VariableDeclaration","scope":4299,"src":"6775:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4234,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4242,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":4236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:22","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4237,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"6798:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4239,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":4240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:22"},{"expression":{"id":4249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4243,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"7031:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4245,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"7046:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4246,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"7060:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4250,"nodeType":"ExpressionStatement","src":"7031:36:22"},{"expression":{"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4251,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"7100:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4253,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"7115:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4254,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"7129:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4258,"nodeType":"ExpressionStatement","src":"7100:36:22"},{"expression":{"id":4265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4259,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"7170:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4261,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"7185:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4262,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"7199:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4266,"nodeType":"ExpressionStatement","src":"7170:36:22"},{"expression":{"id":4273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4267,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"7240:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4269,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"7255:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4270,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"7269:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4274,"nodeType":"ExpressionStatement","src":"7240:36:22"},{"expression":{"id":4281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4275,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"7310:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4277,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"7325:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4278,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"7339:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4282,"nodeType":"ExpressionStatement","src":"7310:36:22"},{"expression":{"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4283,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"7381:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4285,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"7396:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4286,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"7410:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4290,"nodeType":"ExpressionStatement","src":"7381:36:22"},{"expression":{"id":4295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4291,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"7851:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4292,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4188,"src":"7860:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4293,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"7868:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4296,"nodeType":"ExpressionStatement","src":"7851:24:22"},{"expression":{"id":4297,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"7896:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4186,"id":4298,"nodeType":"Return","src":"7889:13:22"}]}]},"documentation":{"id":4176,"nodeType":"StructuredDocumentation","src":"3485:313:22","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":4301,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:22","nodeType":"FunctionDefinition","parameters":{"id":4183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4178,"mutability":"mutable","name":"x","nameLocation":"3827:1:22","nodeType":"VariableDeclaration","scope":4301,"src":"3819:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4177,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4180,"mutability":"mutable","name":"y","nameLocation":"3838:1:22","nodeType":"VariableDeclaration","scope":4301,"src":"3830:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4179,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4182,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:22","nodeType":"VariableDeclaration","scope":4301,"src":"3841:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4181,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:22"},"returnParameters":{"id":4186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4185,"mutability":"mutable","name":"result","nameLocation":"3893:6:22","nodeType":"VariableDeclaration","scope":4301,"src":"3885:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4184,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:22"},"scope":4967,"src":"3803:4116:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4343,"nodeType":"Block","src":"8161:192:22","statements":[{"assignments":[4317],"declarations":[{"constant":false,"id":4317,"mutability":"mutable","name":"result","nameLocation":"8179:6:22","nodeType":"VariableDeclaration","scope":4343,"src":"8171:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4316,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4323,"initialValue":{"arguments":[{"id":4319,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"8195:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4320,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4306,"src":"8198:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4321,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"8201:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4318,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[4301,4344],"referencedDeclaration":4301,"src":"8188:6:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:22"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4325,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"8244:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}],"id":4324,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"8227:16:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3924_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4328,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4304,"src":"8264:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4329,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4306,"src":"8267:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4330,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4308,"src":"8270:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4327,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8257:6:22","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4340,"nodeType":"IfStatement","src":"8223:101:22","trueBody":{"id":4339,"nodeType":"Block","src":"8288:36:22","statements":[{"expression":{"id":4337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4335,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"8302:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4338,"nodeType":"ExpressionStatement","src":"8302:11:22"}]}},{"expression":{"id":4341,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"8340:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4315,"id":4342,"nodeType":"Return","src":"8333:13:22"}]},"documentation":{"id":4302,"nodeType":"StructuredDocumentation","src":"7925:121:22","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":4344,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:22","nodeType":"FunctionDefinition","parameters":{"id":4312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4304,"mutability":"mutable","name":"x","nameLocation":"8075:1:22","nodeType":"VariableDeclaration","scope":4344,"src":"8067:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4303,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4306,"mutability":"mutable","name":"y","nameLocation":"8086:1:22","nodeType":"VariableDeclaration","scope":4344,"src":"8078:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4305,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4308,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:22","nodeType":"VariableDeclaration","scope":4344,"src":"8089:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4307,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4311,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:22","nodeType":"VariableDeclaration","scope":4344,"src":"8110:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"},"typeName":{"id":4310,"nodeType":"UserDefinedTypeName","pathNode":{"id":4309,"name":"Rounding","nameLocations":["8110:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":3924,"src":"8110:8:22"},"referencedDeclaration":3924,"src":"8110:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:22"},"returnParameters":{"id":4315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4314,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4344,"src":"8152:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4313,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:22"},"scope":4967,"src":"8051:302:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4455,"nodeType":"Block","src":"8644:1585:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4352,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4347,"src":"8658:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4358,"nodeType":"IfStatement","src":"8654:45:22","trueBody":{"id":4357,"nodeType":"Block","src":"8666:33:22","statements":[{"expression":{"hexValue":"30","id":4355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4351,"id":4356,"nodeType":"Return","src":"8680:8:22"}]}},{"assignments":[4360],"declarations":[{"constant":false,"id":4360,"mutability":"mutable","name":"result","nameLocation":"9386:6:22","nodeType":"VariableDeclaration","scope":4455,"src":"9378:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4359,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4369,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4363,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4347,"src":"9406:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4362,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4623,4658],"referencedDeclaration":4623,"src":"9401:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4367,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:22"},{"id":4454,"nodeType":"UncheckedBlock","src":"9815:408:22","statements":[{"expression":{"id":4379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4370,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"9839:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4371,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"9849:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4372,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4347,"src":"9858:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4373,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"9862:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4376,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4380,"nodeType":"ExpressionStatement","src":"9839:35:22"},{"expression":{"id":4390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4381,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"9888:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4382,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"9898:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4383,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4347,"src":"9907:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4384,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"9911:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4387,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4391,"nodeType":"ExpressionStatement","src":"9888:35:22"},{"expression":{"id":4401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4392,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"9937:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4393,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"9947:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4394,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4347,"src":"9956:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4395,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"9960:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4398,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4402,"nodeType":"ExpressionStatement","src":"9937:35:22"},{"expression":{"id":4412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4403,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"9986:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4404,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"9996:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4405,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4347,"src":"10005:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4406,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"10009:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4409,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4413,"nodeType":"ExpressionStatement","src":"9986:35:22"},{"expression":{"id":4423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4414,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"10035:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4415,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"10045:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4416,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4347,"src":"10054:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4417,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"10058:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4420,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4424,"nodeType":"ExpressionStatement","src":"10035:35:22"},{"expression":{"id":4434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4425,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"10084:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4426,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"10094:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4427,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4347,"src":"10103:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4428,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"10107:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4431,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4435,"nodeType":"ExpressionStatement","src":"10084:35:22"},{"expression":{"id":4445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4436,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"10133:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4437,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"10143:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4438,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4347,"src":"10152:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4439,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"10156:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4442,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4446,"nodeType":"ExpressionStatement","src":"10133:35:22"},{"expression":{"arguments":[{"id":4448,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"10193:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4449,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4347,"src":"10201:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4450,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"10205:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4447,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4118,"src":"10189:3:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4351,"id":4453,"nodeType":"Return","src":"10182:30:22"}]}]},"documentation":{"id":4345,"nodeType":"StructuredDocumentation","src":"8359:223:22","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":4456,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:22","nodeType":"FunctionDefinition","parameters":{"id":4348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4347,"mutability":"mutable","name":"a","nameLocation":"8609:1:22","nodeType":"VariableDeclaration","scope":4456,"src":"8601:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4346,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:22"},"returnParameters":{"id":4351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4350,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4456,"src":"8635:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4349,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:22"},"scope":4967,"src":"8587:1642:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4490,"nodeType":"Block","src":"10405:164:22","statements":[{"id":4489,"nodeType":"UncheckedBlock","src":"10415:148:22","statements":[{"assignments":[4468],"declarations":[{"constant":false,"id":4468,"mutability":"mutable","name":"result","nameLocation":"10447:6:22","nodeType":"VariableDeclaration","scope":4489,"src":"10439:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4467,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4472,"initialValue":{"arguments":[{"id":4470,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4459,"src":"10461:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4469,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[4456,4491],"referencedDeclaration":4456,"src":"10456:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4473,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4468,"src":"10484:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4475,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4462,"src":"10511:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}],"id":4474,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"10494:16:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3924_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4477,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4468,"src":"10524:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4478,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4468,"src":"10533:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4480,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4459,"src":"10542:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:22","trueExpression":{"hexValue":"31","id":4483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4486,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4466,"id":4488,"nodeType":"Return","src":"10477:75:22"}]}]},"documentation":{"id":4457,"nodeType":"StructuredDocumentation","src":"10235:89:22","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":4491,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:22","nodeType":"FunctionDefinition","parameters":{"id":4463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4459,"mutability":"mutable","name":"a","nameLocation":"10351:1:22","nodeType":"VariableDeclaration","scope":4491,"src":"10343:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4458,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4462,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:22","nodeType":"VariableDeclaration","scope":4491,"src":"10354:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"},"typeName":{"id":4461,"nodeType":"UserDefinedTypeName","pathNode":{"id":4460,"name":"Rounding","nameLocations":["10354:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":3924,"src":"10354:8:22"},"referencedDeclaration":3924,"src":"10354:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:22"},"returnParameters":{"id":4466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4465,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4491,"src":"10396:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4464,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:22"},"scope":4967,"src":"10329:240:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4622,"nodeType":"Block","src":"10760:922:22","statements":[{"assignments":[4500],"declarations":[{"constant":false,"id":4500,"mutability":"mutable","name":"result","nameLocation":"10778:6:22","nodeType":"VariableDeclaration","scope":4622,"src":"10770:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4499,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4502,"initialValue":{"hexValue":"30","id":4501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:22"},{"id":4619,"nodeType":"UncheckedBlock","src":"10798:855:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4503,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"10826:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4517,"nodeType":"IfStatement","src":"10822:99:22","trueBody":{"id":4516,"nodeType":"Block","src":"10844:77:22","statements":[{"expression":{"id":4510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4508,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"10862:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4511,"nodeType":"ExpressionStatement","src":"10862:13:22"},{"expression":{"id":4514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4512,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"10893:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":4513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4515,"nodeType":"ExpressionStatement","src":"10893:13:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4518,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"10938:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4532,"nodeType":"IfStatement","src":"10934:96:22","trueBody":{"id":4531,"nodeType":"Block","src":"10955:75:22","statements":[{"expression":{"id":4525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4523,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"10973:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4526,"nodeType":"ExpressionStatement","src":"10973:12:22"},{"expression":{"id":4529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4527,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"11003:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4530,"nodeType":"ExpressionStatement","src":"11003:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4533,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"11047:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4547,"nodeType":"IfStatement","src":"11043:96:22","trueBody":{"id":4546,"nodeType":"Block","src":"11064:75:22","statements":[{"expression":{"id":4540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"11082:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4541,"nodeType":"ExpressionStatement","src":"11082:12:22"},{"expression":{"id":4544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4542,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"11112:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4545,"nodeType":"ExpressionStatement","src":"11112:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4548,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"11156:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4562,"nodeType":"IfStatement","src":"11152:96:22","trueBody":{"id":4561,"nodeType":"Block","src":"11173:75:22","statements":[{"expression":{"id":4555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4553,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"11191:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4556,"nodeType":"ExpressionStatement","src":"11191:12:22"},{"expression":{"id":4559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4557,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"11221:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4560,"nodeType":"ExpressionStatement","src":"11221:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4563,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"11265:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4577,"nodeType":"IfStatement","src":"11261:93:22","trueBody":{"id":4576,"nodeType":"Block","src":"11281:73:22","statements":[{"expression":{"id":4570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4568,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"11299:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4571,"nodeType":"ExpressionStatement","src":"11299:11:22"},{"expression":{"id":4574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4572,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"11328:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4575,"nodeType":"ExpressionStatement","src":"11328:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4578,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"11371:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":4579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4592,"nodeType":"IfStatement","src":"11367:93:22","trueBody":{"id":4591,"nodeType":"Block","src":"11387:73:22","statements":[{"expression":{"id":4585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4583,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"11405:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4586,"nodeType":"ExpressionStatement","src":"11405:11:22"},{"expression":{"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4587,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"11434:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4590,"nodeType":"ExpressionStatement","src":"11434:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4593,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"11477:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":4594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4607,"nodeType":"IfStatement","src":"11473:93:22","trueBody":{"id":4606,"nodeType":"Block","src":"11493:73:22","statements":[{"expression":{"id":4600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4598,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"11511:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":4599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4601,"nodeType":"ExpressionStatement","src":"11511:11:22"},{"expression":{"id":4604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4602,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"11540:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4605,"nodeType":"ExpressionStatement","src":"11540:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4608,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4494,"src":"11583:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4618,"nodeType":"IfStatement","src":"11579:64:22","trueBody":{"id":4617,"nodeType":"Block","src":"11599:44:22","statements":[{"expression":{"id":4615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4613,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"11617:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4616,"nodeType":"ExpressionStatement","src":"11617:11:22"}]}}]},{"expression":{"id":4620,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4500,"src":"11669:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4498,"id":4621,"nodeType":"Return","src":"11662:13:22"}]},"documentation":{"id":4492,"nodeType":"StructuredDocumentation","src":"10575:119:22","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":4623,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:22","nodeType":"FunctionDefinition","parameters":{"id":4495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4494,"mutability":"mutable","name":"value","nameLocation":"10721:5:22","nodeType":"VariableDeclaration","scope":4623,"src":"10713:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4493,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:22"},"returnParameters":{"id":4498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4497,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4623,"src":"10751:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4496,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:22"},"scope":4967,"src":"10699:983:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4657,"nodeType":"Block","src":"11915:168:22","statements":[{"id":4656,"nodeType":"UncheckedBlock","src":"11925:152:22","statements":[{"assignments":[4635],"declarations":[{"constant":false,"id":4635,"mutability":"mutable","name":"result","nameLocation":"11957:6:22","nodeType":"VariableDeclaration","scope":4656,"src":"11949:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4634,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4639,"initialValue":{"arguments":[{"id":4637,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"11971:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4636,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4623,4658],"referencedDeclaration":4623,"src":"11966:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4640,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"11998:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4642,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4629,"src":"12025:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}],"id":4641,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"12008:16:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3924_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4645,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4635,"src":"12043:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4647,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4626,"src":"12052:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:22","trueExpression":{"hexValue":"31","id":4650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4653,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4633,"id":4655,"nodeType":"Return","src":"11991:75:22"}]}]},"documentation":{"id":4624,"nodeType":"StructuredDocumentation","src":"11688:142:22","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4658,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:22","nodeType":"FunctionDefinition","parameters":{"id":4630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4626,"mutability":"mutable","name":"value","nameLocation":"11857:5:22","nodeType":"VariableDeclaration","scope":4658,"src":"11849:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4625,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4629,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:22","nodeType":"VariableDeclaration","scope":4658,"src":"11864:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"},"typeName":{"id":4628,"nodeType":"UserDefinedTypeName","pathNode":{"id":4627,"name":"Rounding","nameLocations":["11864:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":3924,"src":"11864:8:22"},"referencedDeclaration":3924,"src":"11864:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:22"},"returnParameters":{"id":4633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4658,"src":"11906:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4631,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:22"},"scope":4967,"src":"11835:248:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4786,"nodeType":"Block","src":"12276:854:22","statements":[{"assignments":[4667],"declarations":[{"constant":false,"id":4667,"mutability":"mutable","name":"result","nameLocation":"12294:6:22","nodeType":"VariableDeclaration","scope":4786,"src":"12286:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4666,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4669,"initialValue":{"hexValue":"30","id":4668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:22"},{"id":4783,"nodeType":"UncheckedBlock","src":"12314:787:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4670,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"12342:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4673,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4686,"nodeType":"IfStatement","src":"12338:103:22","trueBody":{"id":4685,"nodeType":"Block","src":"12361:80:22","statements":[{"expression":{"id":4679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4675,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"12379:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4678,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4680,"nodeType":"ExpressionStatement","src":"12379:17:22"},{"expression":{"id":4683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4681,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"12414:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4684,"nodeType":"ExpressionStatement","src":"12414:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4687,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"12458:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4703,"nodeType":"IfStatement","src":"12454:103:22","trueBody":{"id":4702,"nodeType":"Block","src":"12477:80:22","statements":[{"expression":{"id":4696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4692,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"12495:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4697,"nodeType":"ExpressionStatement","src":"12495:17:22"},{"expression":{"id":4700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4698,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"12530:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4701,"nodeType":"ExpressionStatement","src":"12530:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4704,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"12574:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4720,"nodeType":"IfStatement","src":"12570:103:22","trueBody":{"id":4719,"nodeType":"Block","src":"12593:80:22","statements":[{"expression":{"id":4713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4709,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"12611:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4714,"nodeType":"ExpressionStatement","src":"12611:17:22"},{"expression":{"id":4717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4715,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"12646:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4718,"nodeType":"ExpressionStatement","src":"12646:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4721,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"12690:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4737,"nodeType":"IfStatement","src":"12686:100:22","trueBody":{"id":4736,"nodeType":"Block","src":"12708:78:22","statements":[{"expression":{"id":4730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4726,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"12726:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4731,"nodeType":"ExpressionStatement","src":"12726:16:22"},{"expression":{"id":4734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4732,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"12760:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4735,"nodeType":"ExpressionStatement","src":"12760:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4738,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"12803:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:22","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4754,"nodeType":"IfStatement","src":"12799:100:22","trueBody":{"id":4753,"nodeType":"Block","src":"12821:78:22","statements":[{"expression":{"id":4747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4743,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"12839:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4746,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4744,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:22","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4748,"nodeType":"ExpressionStatement","src":"12839:16:22"},{"expression":{"id":4751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4749,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"12873:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4752,"nodeType":"ExpressionStatement","src":"12873:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4755,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"12916:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4758,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:22","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4771,"nodeType":"IfStatement","src":"12912:100:22","trueBody":{"id":4770,"nodeType":"Block","src":"12934:78:22","statements":[{"expression":{"id":4764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4760,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"12952:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:22","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4765,"nodeType":"ExpressionStatement","src":"12952:16:22"},{"expression":{"id":4768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4766,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"12986:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4769,"nodeType":"ExpressionStatement","src":"12986:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4772,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4661,"src":"13029:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4775,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4782,"nodeType":"IfStatement","src":"13025:66:22","trueBody":{"id":4781,"nodeType":"Block","src":"13047:44:22","statements":[{"expression":{"id":4779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4777,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"13065:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4780,"nodeType":"ExpressionStatement","src":"13065:11:22"}]}}]},{"expression":{"id":4784,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4667,"src":"13117:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4665,"id":4785,"nodeType":"Return","src":"13110:13:22"}]},"documentation":{"id":4659,"nodeType":"StructuredDocumentation","src":"12089:120:22","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":4787,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:22","nodeType":"FunctionDefinition","parameters":{"id":4662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4661,"mutability":"mutable","name":"value","nameLocation":"12237:5:22","nodeType":"VariableDeclaration","scope":4787,"src":"12229:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4660,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:22"},"returnParameters":{"id":4665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4664,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4787,"src":"12267:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4663,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:22"},"scope":4967,"src":"12214:916:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4821,"nodeType":"Block","src":"13365:170:22","statements":[{"id":4820,"nodeType":"UncheckedBlock","src":"13375:154:22","statements":[{"assignments":[4799],"declarations":[{"constant":false,"id":4799,"mutability":"mutable","name":"result","nameLocation":"13407:6:22","nodeType":"VariableDeclaration","scope":4820,"src":"13399:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4798,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4803,"initialValue":{"arguments":[{"id":4801,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4790,"src":"13422:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4800,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4787,4822],"referencedDeclaration":4787,"src":"13416:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4804,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4799,"src":"13449:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4806,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4793,"src":"13476:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}],"id":4805,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"13459:16:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3924_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4809,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4799,"src":"13495:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4811,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4790,"src":"13504:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:22","trueExpression":{"hexValue":"31","id":4814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4817,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4797,"id":4819,"nodeType":"Return","src":"13442:76:22"}]}]},"documentation":{"id":4788,"nodeType":"StructuredDocumentation","src":"13136:143:22","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4822,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:22","nodeType":"FunctionDefinition","parameters":{"id":4794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4790,"mutability":"mutable","name":"value","nameLocation":"13307:5:22","nodeType":"VariableDeclaration","scope":4822,"src":"13299:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4789,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4793,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:22","nodeType":"VariableDeclaration","scope":4822,"src":"13314:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"},"typeName":{"id":4792,"nodeType":"UserDefinedTypeName","pathNode":{"id":4791,"name":"Rounding","nameLocations":["13314:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":3924,"src":"13314:8:22"},"referencedDeclaration":3924,"src":"13314:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:22"},"returnParameters":{"id":4797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4822,"src":"13356:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4795,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:22"},"scope":4967,"src":"13284:251:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4908,"nodeType":"Block","src":"13855:600:22","statements":[{"assignments":[4831],"declarations":[{"constant":false,"id":4831,"mutability":"mutable","name":"result","nameLocation":"13873:6:22","nodeType":"VariableDeclaration","scope":4908,"src":"13865:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4830,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4833,"initialValue":{"hexValue":"30","id":4832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:22"},{"id":4905,"nodeType":"UncheckedBlock","src":"13893:533:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4834,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"13921:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4848,"nodeType":"IfStatement","src":"13917:98:22","trueBody":{"id":4847,"nodeType":"Block","src":"13939:76:22","statements":[{"expression":{"id":4841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4839,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"13957:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4842,"nodeType":"ExpressionStatement","src":"13957:13:22"},{"expression":{"id":4845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4843,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"13988:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4846,"nodeType":"ExpressionStatement","src":"13988:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4849,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"14032:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4863,"nodeType":"IfStatement","src":"14028:95:22","trueBody":{"id":4862,"nodeType":"Block","src":"14049:74:22","statements":[{"expression":{"id":4856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4854,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"14067:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4857,"nodeType":"ExpressionStatement","src":"14067:12:22"},{"expression":{"id":4860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4858,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"14097:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4861,"nodeType":"ExpressionStatement","src":"14097:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4864,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"14140:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4878,"nodeType":"IfStatement","src":"14136:95:22","trueBody":{"id":4877,"nodeType":"Block","src":"14157:74:22","statements":[{"expression":{"id":4871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4869,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"14175:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4872,"nodeType":"ExpressionStatement","src":"14175:12:22"},{"expression":{"id":4875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4873,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"14205:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4876,"nodeType":"ExpressionStatement","src":"14205:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4879,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"14248:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4893,"nodeType":"IfStatement","src":"14244:95:22","trueBody":{"id":4892,"nodeType":"Block","src":"14265:74:22","statements":[{"expression":{"id":4886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4884,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"14283:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4887,"nodeType":"ExpressionStatement","src":"14283:12:22"},{"expression":{"id":4890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4888,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"14313:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4891,"nodeType":"ExpressionStatement","src":"14313:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4894,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"14356:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4904,"nodeType":"IfStatement","src":"14352:64:22","trueBody":{"id":4903,"nodeType":"Block","src":"14372:44:22","statements":[{"expression":{"id":4901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4899,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"14390:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4902,"nodeType":"ExpressionStatement","src":"14390:11:22"}]}}]},{"expression":{"id":4906,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4831,"src":"14442:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4829,"id":4907,"nodeType":"Return","src":"14435:13:22"}]},"documentation":{"id":4823,"nodeType":"StructuredDocumentation","src":"13541:246:22","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4909,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:22","nodeType":"FunctionDefinition","parameters":{"id":4826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4825,"mutability":"mutable","name":"value","nameLocation":"13816:5:22","nodeType":"VariableDeclaration","scope":4909,"src":"13808:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4824,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:22"},"returnParameters":{"id":4829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4909,"src":"13846:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4827,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:22"},"scope":4967,"src":"13792:663:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4946,"nodeType":"Block","src":"14692:177:22","statements":[{"id":4945,"nodeType":"UncheckedBlock","src":"14702:161:22","statements":[{"assignments":[4921],"declarations":[{"constant":false,"id":4921,"mutability":"mutable","name":"result","nameLocation":"14734:6:22","nodeType":"VariableDeclaration","scope":4945,"src":"14726:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4920,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4925,"initialValue":{"arguments":[{"id":4923,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"14750:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4922,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4909,4947],"referencedDeclaration":4909,"src":"14743:6:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4926,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4921,"src":"14777:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4928,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4915,"src":"14804:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}],"id":4927,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"14787:16:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3924_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4931,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4921,"src":"14823:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":4932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:22","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4934,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4936,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4912,"src":"14838:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:22","trueExpression":{"hexValue":"31","id":4939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4942,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4919,"id":4944,"nodeType":"Return","src":"14770:82:22"}]}]},"documentation":{"id":4910,"nodeType":"StructuredDocumentation","src":"14461:144:22","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4947,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:22","nodeType":"FunctionDefinition","parameters":{"id":4916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4912,"mutability":"mutable","name":"value","nameLocation":"14634:5:22","nodeType":"VariableDeclaration","scope":4947,"src":"14626:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4911,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4915,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:22","nodeType":"VariableDeclaration","scope":4947,"src":"14641:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"},"typeName":{"id":4914,"nodeType":"UserDefinedTypeName","pathNode":{"id":4913,"name":"Rounding","nameLocations":["14641:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":3924,"src":"14641:8:22"},"referencedDeclaration":3924,"src":"14641:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:22"},"returnParameters":{"id":4919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4918,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4947,"src":"14683:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4917,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:22"},"scope":4967,"src":"14610:259:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4965,"nodeType":"Block","src":"15067:48:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4958,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4951,"src":"15090:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}],"id":4957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4956,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:22","typeDescriptions":{}}},"id":4959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":4960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":4962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4955,"id":4964,"nodeType":"Return","src":"15077:31:22"}]},"documentation":{"id":4948,"nodeType":"StructuredDocumentation","src":"14875:113:22","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":4966,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:22","nodeType":"FunctionDefinition","parameters":{"id":4952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4951,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:22","nodeType":"VariableDeclaration","scope":4966,"src":"15019:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"},"typeName":{"id":4950,"nodeType":"UserDefinedTypeName","pathNode":{"id":4949,"name":"Rounding","nameLocations":["15019:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":3924,"src":"15019:8:22"},"referencedDeclaration":3924,"src":"15019:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3924","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:22"},"returnParameters":{"id":4955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4954,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4966,"src":"15061:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4953,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:22"},"scope":4967,"src":"14993:122:22","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4968,"src":"203:14914:22","usedErrors":[3919],"usedEvents":[]}],"src":"103:15015:22"},"id":22},"contracts/HoldrArtistsERC1155.sol":{"ast":{"absolutePath":"contracts/HoldrArtistsERC1155.sol","exportedSymbols":{"ContextUpgradeable":[2028],"ECDSA":[3877],"ERC1155SupplyUpgradeable":[1990],"ERC1155Upgradeable":[1761],"ERC165":[3901],"ERC1967Utils":[2538],"ERC2981":[2983],"HoldrArtistsERC1155":[5463],"IERC165":[3913],"IERC1822Proxiable":[2098],"IERC2981":[2088],"Initializable":[448],"OwnableUpgradeable":[194],"UUPSUpgradeable":[630]},"id":5464,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4969,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:23"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol","id":4970,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5464,"sourceUnit":1991,"src":"58:99:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":4971,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5464,"sourceUnit":195,"src":"158:75:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol","id":4972,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5464,"sourceUnit":631,"src":"234:77:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/common/ERC2981.sol","file":"@openzeppelin/contracts/token/common/ERC2981.sol","id":4973,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5464,"sourceUnit":2984,"src":"312:58:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":4974,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5464,"sourceUnit":3878,"src":"371:62:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":4975,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5464,"sourceUnit":449,"src":"434:75:23","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4976,"name":"Initializable","nameLocations":["543:13:23"],"nodeType":"IdentifierPath","referencedDeclaration":448,"src":"543:13:23"},"id":4977,"nodeType":"InheritanceSpecifier","src":"543:13:23"},{"baseName":{"id":4978,"name":"ERC1155SupplyUpgradeable","nameLocations":["558:24:23"],"nodeType":"IdentifierPath","referencedDeclaration":1990,"src":"558:24:23"},"id":4979,"nodeType":"InheritanceSpecifier","src":"558:24:23"},{"baseName":{"id":4980,"name":"OwnableUpgradeable","nameLocations":["584:18:23"],"nodeType":"IdentifierPath","referencedDeclaration":194,"src":"584:18:23"},"id":4981,"nodeType":"InheritanceSpecifier","src":"584:18:23"},{"baseName":{"id":4982,"name":"UUPSUpgradeable","nameLocations":["604:15:23"],"nodeType":"IdentifierPath","referencedDeclaration":630,"src":"604:15:23"},"id":4983,"nodeType":"InheritanceSpecifier","src":"604:15:23"}],"canonicalName":"HoldrArtistsERC1155","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5463,"linearizedBaseContracts":[5463,630,2098,194,1990,1761,2235,2729,2671,2068,3913,2028,448],"name":"HoldrArtistsERC1155","nameLocation":"520:19:23","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"429b62e5","id":4987,"mutability":"mutable","name":"admins","nameLocation":"657:6:23","nodeType":"VariableDeclaration","scope":5463,"src":"625:38:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4986,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4984,"name":"address","nodeType":"ElementaryTypeName","src":"633:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"625:24:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4985,"name":"bool","nodeType":"ElementaryTypeName","src":"644:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"831ffd05","id":4991,"mutability":"mutable","name":"artistAddresses","nameLocation":"702:15:23","nodeType":"VariableDeclaration","scope":5463,"src":"667:50:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":4990,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4988,"name":"uint256","nodeType":"ElementaryTypeName","src":"675:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"667:27:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4989,"name":"address","nodeType":"ElementaryTypeName","src":"686:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"constant":false,"functionSelector":"fbe0a892","id":4995,"mutability":"mutable","name":"tokenSupplyLimits","nameLocation":"756:17:23","nodeType":"VariableDeclaration","scope":5463,"src":"721:52:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":4994,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4992,"name":"uint256","nodeType":"ElementaryTypeName","src":"729:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"721:27:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4993,"name":"uint256","nodeType":"ElementaryTypeName","src":"740:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"body":{"id":5042,"nodeType":"Block","src":"884:215:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5007,"name":"__ERC1155Supply_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"890:20:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"890:22:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5009,"nodeType":"ExpressionStatement","src":"890:22:23"},{"expression":{"arguments":[{"id":5011,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4997,"src":"933:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5010,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"918:14:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":5012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5013,"nodeType":"ExpressionStatement","src":"918:28:23"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5014,"name":"__UUPSUpgradeable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"952:22:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5016,"nodeType":"ExpressionStatement","src":"952:24:23"},{"expression":{"arguments":[{"id":5018,"name":"uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5002,"src":"990:3:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5017,"name":"_setURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"982:7:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":5019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"982:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5020,"nodeType":"ExpressionStatement","src":"982:12:23"},{"body":{"id":5040,"nodeType":"Block","src":"1049:46:23","statements":[{"expression":{"id":5038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5032,"name":"admins","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"1057:6:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5036,"indexExpression":{"baseExpression":{"id":5033,"name":"initialAdmins","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5000,"src":"1064:13:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5035,"indexExpression":{"id":5034,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5022,"src":"1078:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1064:16:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1057:24:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1084:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1057:31:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5039,"nodeType":"ExpressionStatement","src":"1057:31:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5025,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5022,"src":"1018:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5026,"name":"initialAdmins","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5000,"src":"1022:13:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1036:6:23","memberName":"length","nodeType":"MemberAccess","src":"1022:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1018:24:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5041,"initializationExpression":{"assignments":[5022],"declarations":[{"constant":false,"id":5022,"mutability":"mutable","name":"i","nameLocation":"1011:1:23","nodeType":"VariableDeclaration","scope":5041,"src":"1006:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5021,"name":"uint","nodeType":"ElementaryTypeName","src":"1006:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5024,"initialValue":{"hexValue":"30","id":5023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1015:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1006:10:23"},"loopExpression":{"expression":{"id":5030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1044:3:23","subExpression":{"id":5029,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5022,"src":"1044:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5031,"nodeType":"ExpressionStatement","src":"1044:3:23"},"nodeType":"ForStatement","src":"1001:94:23"}]},"functionSelector":"bb625509","id":5043,"implemented":true,"kind":"function","modifiers":[{"id":5005,"kind":"modifierInvocation","modifierName":{"id":5004,"name":"initializer","nameLocations":["872:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":302,"src":"872:11:23"},"nodeType":"ModifierInvocation","src":"872:11:23"}],"name":"init","nameLocation":"787:4:23","nodeType":"FunctionDefinition","parameters":{"id":5003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4997,"mutability":"mutable","name":"initialOwner","nameLocation":"800:12:23","nodeType":"VariableDeclaration","scope":5043,"src":"792:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4996,"name":"address","nodeType":"ElementaryTypeName","src":"792:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5000,"mutability":"mutable","name":"initialAdmins","nameLocation":"831:13:23","nodeType":"VariableDeclaration","scope":5043,"src":"814:30:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4998,"name":"address","nodeType":"ElementaryTypeName","src":"814:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4999,"nodeType":"ArrayTypeName","src":"814:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5002,"mutability":"mutable","name":"uri","nameLocation":"860:3:23","nodeType":"VariableDeclaration","scope":5043,"src":"846:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5001,"name":"string","nodeType":"ElementaryTypeName","src":"846:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"791:73:23"},"returnParameters":{"id":5006,"nodeType":"ParameterList","parameters":[],"src":"884:0:23"},"scope":5463,"src":"778:321:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5072,"nodeType":"Block","src":"1386:141:23","statements":[{"expression":{"arguments":[{"baseExpression":{"id":5052,"name":"admins","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"1400:6:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5055,"indexExpression":{"expression":{"id":5053,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1407:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1411:6:23","memberName":"sender","nodeType":"MemberAccess","src":"1407:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1400:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e6f742061646d696e","id":5056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1420:11:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","typeString":"literal_string \"not admin\""},"value":"not admin"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","typeString":"literal_string \"not admin\""}],"id":5051,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1392:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1392:40:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5058,"nodeType":"ExpressionStatement","src":"1392:40:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5060,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5046,"src":"1446:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1457:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1446:12:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"30206e6f7420616c6c6f776564","id":5063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1460:15:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2","typeString":"literal_string \"0 not allowed\""},"value":"0 not allowed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2","typeString":"literal_string \"0 not allowed\""}],"id":5059,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1438:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1438:38:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5065,"nodeType":"ExpressionStatement","src":"1438:38:23"},{"expression":{"id":5070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5066,"name":"artistAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4991,"src":"1482:15:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5068,"indexExpression":{"id":5067,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5046,"src":"1498:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1482:24:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5069,"name":"artistAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5048,"src":"1509:13:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1482:40:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5071,"nodeType":"ExpressionStatement","src":"1482:40:23"}]},"documentation":{"id":5044,"nodeType":"StructuredDocumentation","src":"1103:205:23","text":" @dev Update the artist address for a particular token\n Params:\n tokenId: the id of the token being updated\n artistAddress: the new address of the artist for this token"},"functionSelector":"9eca4b7b","id":5073,"implemented":true,"kind":"function","modifiers":[],"name":"setArtistAddress","nameLocation":"1320:16:23","nodeType":"FunctionDefinition","parameters":{"id":5049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5046,"mutability":"mutable","name":"tokenId","nameLocation":"1345:7:23","nodeType":"VariableDeclaration","scope":5073,"src":"1337:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5045,"name":"uint256","nodeType":"ElementaryTypeName","src":"1337:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5048,"mutability":"mutable","name":"artistAddress","nameLocation":"1362:13:23","nodeType":"VariableDeclaration","scope":5073,"src":"1354:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5047,"name":"address","nodeType":"ElementaryTypeName","src":"1354:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1336:40:23"},"returnParameters":{"id":5050,"nodeType":"ParameterList","parameters":[],"src":"1386:0:23"},"scope":5463,"src":"1311:216:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5110,"nodeType":"Block","src":"1811:229:23","statements":[{"expression":{"arguments":[{"baseExpression":{"id":5082,"name":"admins","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"1825:6:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5085,"indexExpression":{"expression":{"id":5083,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1832:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1836:6:23","memberName":"sender","nodeType":"MemberAccess","src":"1832:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1825:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e6f742061646d696e","id":5086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1845:11:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","typeString":"literal_string \"not admin\""},"value":"not admin"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","typeString":"literal_string \"not admin\""}],"id":5081,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1817:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1817:40:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5088,"nodeType":"ExpressionStatement","src":"1817:40:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5090,"name":"tokenSupplyLimits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4995,"src":"1871:17:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5092,"indexExpression":{"id":5091,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"1889:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1871:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5093,"name":"extraSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5078,"src":"1900:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1871:40:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"31303030","id":5095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1915:4:23","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"src":"1871:48:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e6577206d6178696d756d20737570706c7920776f756c64206578636565642031303030","id":5097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1921:38:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae","typeString":"literal_string \"new maximum supply would exceed 1000\""},"value":"new maximum supply would exceed 1000"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae","typeString":"literal_string \"new maximum supply would exceed 1000\""}],"id":5089,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1863:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1863:97:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5099,"nodeType":"ExpressionStatement","src":"1863:97:23"},{"expression":{"id":5108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5100,"name":"tokenSupplyLimits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4995,"src":"1966:17:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5102,"indexExpression":{"id":5101,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"1984:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1966:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5103,"name":"tokenSupplyLimits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4995,"src":"1995:17:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5105,"indexExpression":{"id":5104,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5076,"src":"2013:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1995:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5106,"name":"extraSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5078,"src":"2024:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1995:40:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1966:69:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5109,"nodeType":"ExpressionStatement","src":"1966:69:23"}]},"documentation":{"id":5074,"nodeType":"StructuredDocumentation","src":"1531:196:23","text":" @dev Increase the max allowed supply of an artist token\n Params:\n tokenId: the id of the token being updated\n extraSupply: the additional supply to be allowed"},"functionSelector":"c36497e5","id":5111,"implemented":true,"kind":"function","modifiers":[],"name":"increaseTokenSupplyLimit","nameLocation":"1739:24:23","nodeType":"FunctionDefinition","parameters":{"id":5079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5076,"mutability":"mutable","name":"tokenId","nameLocation":"1772:7:23","nodeType":"VariableDeclaration","scope":5111,"src":"1764:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5075,"name":"uint256","nodeType":"ElementaryTypeName","src":"1764:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5078,"mutability":"mutable","name":"extraSupply","nameLocation":"1789:11:23","nodeType":"VariableDeclaration","scope":5111,"src":"1781:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5077,"name":"uint256","nodeType":"ElementaryTypeName","src":"1781:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1763:38:23"},"returnParameters":{"id":5080,"nodeType":"ParameterList","parameters":[],"src":"1811:0:23"},"scope":5463,"src":"1730:310:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5123,"nodeType":"Block","src":"2198:23:23","statements":[{"expression":{"arguments":[{"id":5120,"name":"uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5114,"src":"2212:3:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5119,"name":"_setURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"2204:7:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":5121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5122,"nodeType":"ExpressionStatement","src":"2204:12:23"}]},"documentation":{"id":5112,"nodeType":"StructuredDocumentation","src":"2044:97:23","text":" @dev Update the uri template\n Params:\n _uri: the new uri template"},"functionSelector":"02fe5305","id":5124,"implemented":true,"kind":"function","modifiers":[{"id":5117,"kind":"modifierInvocation","modifierName":{"id":5116,"name":"onlyOwner","nameLocations":["2188:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":89,"src":"2188:9:23"},"nodeType":"ModifierInvocation","src":"2188:9:23"}],"name":"setURI","nameLocation":"2153:6:23","nodeType":"FunctionDefinition","parameters":{"id":5115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5114,"mutability":"mutable","name":"uri","nameLocation":"2174:3:23","nodeType":"VariableDeclaration","scope":5124,"src":"2160:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5113,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:19:23"},"returnParameters":{"id":5118,"nodeType":"ParameterList","parameters":[],"src":"2198:0:23"},"scope":5463,"src":"2144:77:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5138,"nodeType":"Block","src":"2396:46:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5132,"name":"admins","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"2409:6:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5134,"indexExpression":{"id":5133,"name":"adminAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5127,"src":"2416:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2409:20:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":5135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2433:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2409:28:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5131,"id":5137,"nodeType":"Return","src":"2402:35:23"}]},"documentation":{"id":5125,"nodeType":"StructuredDocumentation","src":"2225:100:23","text":" @dev Check address is admin\n Params:\n _address: the address to check"},"functionSelector":"24d7806c","id":5139,"implemented":true,"kind":"function","modifiers":[],"name":"isAdmin","nameLocation":"2337:7:23","nodeType":"FunctionDefinition","parameters":{"id":5128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5127,"mutability":"mutable","name":"adminAddress","nameLocation":"2353:12:23","nodeType":"VariableDeclaration","scope":5139,"src":"2345:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5126,"name":"address","nodeType":"ElementaryTypeName","src":"2345:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2344:22:23"},"returnParameters":{"id":5131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5139,"src":"2390:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5129,"name":"bool","nodeType":"ElementaryTypeName","src":"2390:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2389:6:23"},"scope":5463,"src":"2328:114:23","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5153,"nodeType":"Block","src":"2598:38:23","statements":[{"expression":{"id":5151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5147,"name":"admins","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"2604:6:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5149,"indexExpression":{"id":5148,"name":"adminAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5142,"src":"2611:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2604:20:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2627:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2604:27:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5152,"nodeType":"ExpressionStatement","src":"2604:27:23"}]},"documentation":{"id":5140,"nodeType":"StructuredDocumentation","src":"2446:90:23","text":" @dev Add an admin\n Params:\n _adminAddress: the new address"},"functionSelector":"70480275","id":5154,"implemented":true,"kind":"function","modifiers":[{"id":5145,"kind":"modifierInvocation","modifierName":{"id":5144,"name":"onlyOwner","nameLocations":["2588:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":89,"src":"2588:9:23"},"nodeType":"ModifierInvocation","src":"2588:9:23"}],"name":"addAdmin","nameLocation":"2548:8:23","nodeType":"FunctionDefinition","parameters":{"id":5143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5142,"mutability":"mutable","name":"adminAddress","nameLocation":"2565:12:23","nodeType":"VariableDeclaration","scope":5154,"src":"2557:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5141,"name":"address","nodeType":"ElementaryTypeName","src":"2557:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2556:22:23"},"returnParameters":{"id":5146,"nodeType":"ParameterList","parameters":[],"src":"2598:0:23"},"scope":5463,"src":"2539:97:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5167,"nodeType":"Block","src":"2803:38:23","statements":[{"expression":{"id":5165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"2809:27:23","subExpression":{"baseExpression":{"id":5162,"name":"admins","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"2816:6:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5164,"indexExpression":{"id":5163,"name":"adminAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5157,"src":"2823:12:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2816:20:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5166,"nodeType":"ExpressionStatement","src":"2809:27:23"}]},"documentation":{"id":5155,"nodeType":"StructuredDocumentation","src":"2640:98:23","text":" @dev Remove an admin\n Params:\n adminAddress: the address to remove"},"functionSelector":"1785f53c","id":5168,"implemented":true,"kind":"function","modifiers":[{"id":5160,"kind":"modifierInvocation","modifierName":{"id":5159,"name":"onlyOwner","nameLocations":["2793:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":89,"src":"2793:9:23"},"nodeType":"ModifierInvocation","src":"2793:9:23"}],"name":"removeAdmin","nameLocation":"2750:11:23","nodeType":"FunctionDefinition","parameters":{"id":5158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5157,"mutability":"mutable","name":"adminAddress","nameLocation":"2770:12:23","nodeType":"VariableDeclaration","scope":5168,"src":"2762:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5156,"name":"address","nodeType":"ElementaryTypeName","src":"2762:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2761:22:23"},"returnParameters":{"id":5161,"nodeType":"ParameterList","parameters":[],"src":"2803:0:23"},"scope":5463,"src":"2741:100:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5208,"nodeType":"Block","src":"3087:257:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5177,"name":"artistAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4991,"src":"3101:15:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5179,"indexExpression":{"id":5178,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5171,"src":"3117:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3101:24:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5180,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3129:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3133:6:23","memberName":"sender","nodeType":"MemberAccess","src":"3129:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3101:38:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"73656e646572206973206e6f74206f776e657220666f72207468697320746f6b656e","id":5183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3141:36:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75","typeString":"literal_string \"sender is not owner for this token\""},"value":"sender is not owner for this token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75","typeString":"literal_string \"sender is not owner for this token\""}],"id":5176,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3093:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3093:85:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5185,"nodeType":"ExpressionStatement","src":"3093:85:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5188,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5171,"src":"3204:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5187,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[1823,1839],"referencedDeclaration":1823,"src":"3192:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":5189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3192:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5190,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5173,"src":"3215:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3192:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"baseExpression":{"id":5192,"name":"tokenSupplyLimits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4995,"src":"3224:17:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5194,"indexExpression":{"id":5193,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5171,"src":"3242:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3224:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3192:58:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e657720737570706c7920776f756c6420657863656564206d6178","id":5196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3252:29:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483","typeString":"literal_string \"new supply would exceed max\""},"value":"new supply would exceed max"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483","typeString":"literal_string \"new supply would exceed max\""}],"id":5186,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3184:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3184:98:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5198,"nodeType":"ExpressionStatement","src":"3184:98:23"},{"expression":{"arguments":[{"baseExpression":{"id":5200,"name":"artistAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4991,"src":"3294:15:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5202,"indexExpression":{"id":5201,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5171,"src":"3310:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3294:24:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5203,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5171,"src":"3320:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5204,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5173,"src":"3329:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":5205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3336:2:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":5199,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"3288:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory)"}},"id":5206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3288:51:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5207,"nodeType":"ExpressionStatement","src":"3288:51:23"}]},"documentation":{"id":5169,"nodeType":"StructuredDocumentation","src":"2845:184:23","text":" @dev The mint function (mints new tokens of a particular id)\n Params:\n tokenId: the token id to be minted\n count: the number of new tokens to mint"},"functionSelector":"1b2ef1ca","id":5209,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"3041:4:23","nodeType":"FunctionDefinition","parameters":{"id":5174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5171,"mutability":"mutable","name":"tokenId","nameLocation":"3054:7:23","nodeType":"VariableDeclaration","scope":5209,"src":"3046:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5170,"name":"uint256","nodeType":"ElementaryTypeName","src":"3046:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5173,"mutability":"mutable","name":"count","nameLocation":"3071:5:23","nodeType":"VariableDeclaration","scope":5209,"src":"3063:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5172,"name":"uint256","nodeType":"ElementaryTypeName","src":"3063:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3045:32:23"},"returnParameters":{"id":5175,"nodeType":"ParameterList","parameters":[],"src":"3087:0:23"},"scope":5463,"src":"3032:312:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5259,"nodeType":"Block","src":"3601:298:23","statements":[{"expression":{"arguments":[{"baseExpression":{"id":5218,"name":"admins","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"3615:6:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5221,"indexExpression":{"expression":{"id":5219,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3622:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3626:6:23","memberName":"sender","nodeType":"MemberAccess","src":"3622:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3615:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e6f742061646d696e","id":5222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3635:11:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","typeString":"literal_string \"not admin\""},"value":"not admin"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","typeString":"literal_string \"not admin\""}],"id":5217,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3607:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3607:40:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5224,"nodeType":"ExpressionStatement","src":"3607:40:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5226,"name":"artistAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4991,"src":"3661:15:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5228,"indexExpression":{"id":5227,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5212,"src":"3677:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3661:24:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":5231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3697:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3689:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5229,"name":"address","nodeType":"ElementaryTypeName","src":"3689:7:23","typeDescriptions":{}}},"id":5232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3689:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3661:38:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"617274697374206e6f742073657420666f72207468697320746f6b656e","id":5234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3701:31:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51","typeString":"literal_string \"artist not set for this token\""},"value":"artist not set for this token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51","typeString":"literal_string \"artist not set for this token\""}],"id":5225,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3653:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3653:80:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5236,"nodeType":"ExpressionStatement","src":"3653:80:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5239,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5212,"src":"3759:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5238,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[1823,1839],"referencedDeclaration":1823,"src":"3747:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":5240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3747:20:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5241,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5214,"src":"3770:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3747:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"baseExpression":{"id":5243,"name":"tokenSupplyLimits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4995,"src":"3779:17:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5245,"indexExpression":{"id":5244,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5212,"src":"3797:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3779:26:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3747:58:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e657720737570706c7920776f756c6420657863656564206d6178","id":5247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3807:29:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483","typeString":"literal_string \"new supply would exceed max\""},"value":"new supply would exceed max"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483","typeString":"literal_string \"new supply would exceed max\""}],"id":5237,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3739:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3739:98:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5249,"nodeType":"ExpressionStatement","src":"3739:98:23"},{"expression":{"arguments":[{"baseExpression":{"id":5251,"name":"artistAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4991,"src":"3849:15:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":5253,"indexExpression":{"id":5252,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5212,"src":"3865:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3849:24:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5254,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5212,"src":"3875:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5255,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5214,"src":"3884:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":5256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3891:2:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":5250,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"3843:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory)"}},"id":5257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3843:51:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5258,"nodeType":"ExpressionStatement","src":"3843:51:23"}]},"documentation":{"id":5210,"nodeType":"StructuredDocumentation","src":"3348:190:23","text":" @dev The admin mint function (mints new tokens of a particular id)\n Params:\n tokenId: the token id to be minted\n count: the number of new tokens to mint"},"functionSelector":"d00e40ce","id":5260,"implemented":true,"kind":"function","modifiers":[],"name":"adminMint","nameLocation":"3550:9:23","nodeType":"FunctionDefinition","parameters":{"id":5215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5212,"mutability":"mutable","name":"tokenId","nameLocation":"3568:7:23","nodeType":"VariableDeclaration","scope":5260,"src":"3560:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5211,"name":"uint256","nodeType":"ElementaryTypeName","src":"3560:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5214,"mutability":"mutable","name":"count","nameLocation":"3585:5:23","nodeType":"VariableDeclaration","scope":5260,"src":"3577:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5213,"name":"uint256","nodeType":"ElementaryTypeName","src":"3577:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3559:32:23"},"returnParameters":{"id":5216,"nodeType":"ParameterList","parameters":[],"src":"3601:0:23"},"scope":5463,"src":"3541:358:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5284,"nodeType":"Block","src":"4115:86:23","statements":[{"expression":{"arguments":[{"baseExpression":{"id":5269,"name":"admins","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"4129:6:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5272,"indexExpression":{"expression":{"id":5270,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4136:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4140:6:23","memberName":"sender","nodeType":"MemberAccess","src":"4136:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4129:18:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e6f742061646d696e","id":5273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4149:11:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","typeString":"literal_string \"not admin\""},"value":"not admin"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","typeString":"literal_string \"not admin\""}],"id":5268,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4121:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4121:40:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5275,"nodeType":"ExpressionStatement","src":"4121:40:23"},{"expression":{"arguments":[{"id":5279,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5263,"src":"4179:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5280,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"4185:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":5281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4194:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":5276,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"4167:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_HoldrArtistsERC1155_$5463_$","typeString":"type(contract super HoldrArtistsERC1155)"}},"id":5278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4173:5:23","memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":1519,"src":"4167:11:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":5282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4167:29:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5283,"nodeType":"ExpressionStatement","src":"4167:29:23"}]},"documentation":{"id":5261,"nodeType":"StructuredDocumentation","src":"3903:150:23","text":" @dev The admin burn function for burning a user's token\n Params:\n from: the owner of the token\n tokenId: the token id"},"functionSelector":"06dd0419","id":5285,"implemented":true,"kind":"function","modifiers":[],"name":"adminBurn","nameLocation":"4065:9:23","nodeType":"FunctionDefinition","parameters":{"id":5266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5263,"mutability":"mutable","name":"from","nameLocation":"4083:4:23","nodeType":"VariableDeclaration","scope":5285,"src":"4075:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5262,"name":"address","nodeType":"ElementaryTypeName","src":"4075:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5265,"mutability":"mutable","name":"tokenId","nameLocation":"4097:7:23","nodeType":"VariableDeclaration","scope":5285,"src":"4089:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5264,"name":"uint256","nodeType":"ElementaryTypeName","src":"4089:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4074:31:23"},"returnParameters":{"id":5267,"nodeType":"ParameterList","parameters":[],"src":"4115:0:23"},"scope":5463,"src":"4056:145:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5319,"nodeType":"Block","src":"4450:100:23","statements":[{"body":{"id":5317,"nodeType":"Block","src":"4495:51:23","statements":[{"expression":{"arguments":[{"baseExpression":{"id":5309,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5289,"src":"4518:4:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5311,"indexExpression":{"id":5310,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5296,"src":"4523:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4518:7:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":5312,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5292,"src":"4527:8:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":5314,"indexExpression":{"id":5313,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5296,"src":"4536:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4527:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5306,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4503:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_HoldrArtistsERC1155_$5463","typeString":"contract HoldrArtistsERC1155"}},"id":5308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4508:9:23","memberName":"adminBurn","nodeType":"MemberAccess","referencedDeclaration":5285,"src":"4503:14:23","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":5315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4503:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5316,"nodeType":"ExpressionStatement","src":"4503:36:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5299,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5296,"src":"4473:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5300,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5289,"src":"4477:4:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":5301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4482:6:23","memberName":"length","nodeType":"MemberAccess","src":"4477:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4473:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5318,"initializationExpression":{"assignments":[5296],"declarations":[{"constant":false,"id":5296,"mutability":"mutable","name":"i","nameLocation":"4466:1:23","nodeType":"VariableDeclaration","scope":5318,"src":"4461:6:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5295,"name":"uint","nodeType":"ElementaryTypeName","src":"4461:4:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5298,"initialValue":{"hexValue":"30","id":5297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4470:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4461:10:23"},"loopExpression":{"expression":{"id":5304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4490:3:23","subExpression":{"id":5303,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5296,"src":"4490:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5305,"nodeType":"ExpressionStatement","src":"4490:3:23"},"nodeType":"ForStatement","src":"4456:90:23"}]},"documentation":{"id":5286,"nodeType":"StructuredDocumentation","src":"4205:159:23","text":" @dev The admin burn batch function for burning a user's token\n Params:\n from: the owners of the token\n tokenIds: the token ids"},"functionSelector":"077d9234","id":5320,"implemented":true,"kind":"function","modifiers":[],"name":"adminBurnBatch","nameLocation":"4376:14:23","nodeType":"FunctionDefinition","parameters":{"id":5293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5289,"mutability":"mutable","name":"from","nameLocation":"4408:4:23","nodeType":"VariableDeclaration","scope":5320,"src":"4391:21:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5287,"name":"address","nodeType":"ElementaryTypeName","src":"4391:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5288,"nodeType":"ArrayTypeName","src":"4391:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5292,"mutability":"mutable","name":"tokenIds","nameLocation":"4431:8:23","nodeType":"VariableDeclaration","scope":5320,"src":"4414:25:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5290,"name":"uint256","nodeType":"ElementaryTypeName","src":"4414:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5291,"nodeType":"ArrayTypeName","src":"4414:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4390:50:23"},"returnParameters":{"id":5294,"nodeType":"ParameterList","parameters":[],"src":"4450:0:23"},"scope":5463,"src":"4367:183:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[882],"body":{"id":5335,"nodeType":"Block","src":"4630:54:23","statements":[{"expression":{"arguments":[{"id":5331,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5322,"src":"4660:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5332,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5324,"src":"4670:8:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5328,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"4636:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_HoldrArtistsERC1155_$5463_$","typeString":"type(contract super HoldrArtistsERC1155)"}},"id":5330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4642:17:23","memberName":"setApprovalForAll","nodeType":"MemberAccess","referencedDeclaration":882,"src":"4636:23:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bool_$returns$__$","typeString":"function (address,bool)"}},"id":5333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4636:43:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5334,"nodeType":"ExpressionStatement","src":"4636:43:23"}]},"functionSelector":"a22cb465","id":5336,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4563:17:23","nodeType":"FunctionDefinition","overrides":{"id":5326,"nodeType":"OverrideSpecifier","overrides":[],"src":"4621:8:23"},"parameters":{"id":5325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5322,"mutability":"mutable","name":"operator","nameLocation":"4589:8:23","nodeType":"VariableDeclaration","scope":5336,"src":"4581:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5321,"name":"address","nodeType":"ElementaryTypeName","src":"4581:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5324,"mutability":"mutable","name":"approved","nameLocation":"4604:8:23","nodeType":"VariableDeclaration","scope":5336,"src":"4599:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5323,"name":"bool","nodeType":"ElementaryTypeName","src":"4599:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4580:33:23"},"returnParameters":{"id":5327,"nodeType":"ParameterList","parameters":[],"src":"4630:0:23"},"scope":5463,"src":"4554:130:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[950],"body":{"id":5369,"nodeType":"Block","src":"4808:118:23","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":5353,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4835:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4839:6:23","memberName":"sender","nodeType":"MemberAccess","src":"4835:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5351,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4822:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_HoldrArtistsERC1155_$5463","typeString":"contract HoldrArtistsERC1155"}},"id":5352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4827:7:23","memberName":"isAdmin","nodeType":"MemberAccess","referencedDeclaration":5139,"src":"4822:12:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":5355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4822:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e6f742061646d696e","id":5356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4848:11:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","typeString":"literal_string \"not admin\""},"value":"not admin"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","typeString":"literal_string \"not admin\""}],"id":5350,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4814:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4814:46:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5358,"nodeType":"ExpressionStatement","src":"4814:46:23"},{"expression":{"arguments":[{"id":5362,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5338,"src":"4889:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5363,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5340,"src":"4895:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5364,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5342,"src":"4899:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5365,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5344,"src":"4908:6:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5366,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5346,"src":"4916:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5359,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"4866:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_HoldrArtistsERC1155_$5463_$","typeString":"type(contract super HoldrArtistsERC1155)"}},"id":5361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4872:16:23","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":950,"src":"4866:22:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,uint256,bytes memory)"}},"id":5367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4866:55:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5368,"nodeType":"ExpressionStatement","src":"4866:55:23"}]},"functionSelector":"f242432a","id":5370,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4697:16:23","nodeType":"FunctionDefinition","overrides":{"id":5348,"nodeType":"OverrideSpecifier","overrides":[],"src":"4799:8:23"},"parameters":{"id":5347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5338,"mutability":"mutable","name":"from","nameLocation":"4722:4:23","nodeType":"VariableDeclaration","scope":5370,"src":"4714:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5337,"name":"address","nodeType":"ElementaryTypeName","src":"4714:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5340,"mutability":"mutable","name":"to","nameLocation":"4736:2:23","nodeType":"VariableDeclaration","scope":5370,"src":"4728:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5339,"name":"address","nodeType":"ElementaryTypeName","src":"4728:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5342,"mutability":"mutable","name":"tokenId","nameLocation":"4748:7:23","nodeType":"VariableDeclaration","scope":5370,"src":"4740:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5341,"name":"uint256","nodeType":"ElementaryTypeName","src":"4740:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5344,"mutability":"mutable","name":"amount","nameLocation":"4765:6:23","nodeType":"VariableDeclaration","scope":5370,"src":"4757:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5343,"name":"uint256","nodeType":"ElementaryTypeName","src":"4757:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5346,"mutability":"mutable","name":"data","nameLocation":"4786:4:23","nodeType":"VariableDeclaration","scope":5370,"src":"4773:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5345,"name":"bytes","nodeType":"ElementaryTypeName","src":"4773:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4713:78:23"},"returnParameters":{"id":5349,"nodeType":"ParameterList","parameters":[],"src":"4808:0:23"},"scope":5463,"src":"4688:238:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[996],"body":{"id":5405,"nodeType":"Block","src":"5078:120:23","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":5389,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5105:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5109:6:23","memberName":"sender","nodeType":"MemberAccess","src":"5105:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5387,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5092:4:23","typeDescriptions":{"typeIdentifier":"t_contract$_HoldrArtistsERC1155_$5463","typeString":"contract HoldrArtistsERC1155"}},"id":5388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5097:7:23","memberName":"isAdmin","nodeType":"MemberAccess","referencedDeclaration":5139,"src":"5092:12:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":5391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5092:24:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e6f742061646d696e","id":5392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5118:11:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","typeString":"literal_string \"not admin\""},"value":"not admin"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","typeString":"literal_string \"not admin\""}],"id":5386,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5084:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5084:46:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5394,"nodeType":"ExpressionStatement","src":"5084:46:23"},{"expression":{"arguments":[{"id":5398,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5372,"src":"5164:4:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5399,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5374,"src":"5170:2:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5400,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"5174:3:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":5401,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5380,"src":"5179:7:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":5402,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5382,"src":"5188:4:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5395,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5136:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_HoldrArtistsERC1155_$5463_$","typeString":"type(contract super HoldrArtistsERC1155)"}},"id":5397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5142:21:23","memberName":"safeBatchTransferFrom","nodeType":"MemberAccess","referencedDeclaration":996,"src":"5136:27:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory)"}},"id":5403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5136:57:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5404,"nodeType":"ExpressionStatement","src":"5136:57:23"}]},"functionSelector":"2eb2c2d6","id":5406,"implemented":true,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"4939:21:23","nodeType":"FunctionDefinition","overrides":{"id":5384,"nodeType":"OverrideSpecifier","overrides":[],"src":"5069:8:23"},"parameters":{"id":5383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5372,"mutability":"mutable","name":"from","nameLocation":"4969:4:23","nodeType":"VariableDeclaration","scope":5406,"src":"4961:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5371,"name":"address","nodeType":"ElementaryTypeName","src":"4961:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5374,"mutability":"mutable","name":"to","nameLocation":"4983:2:23","nodeType":"VariableDeclaration","scope":5406,"src":"4975:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5373,"name":"address","nodeType":"ElementaryTypeName","src":"4975:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5377,"mutability":"mutable","name":"ids","nameLocation":"5004:3:23","nodeType":"VariableDeclaration","scope":5406,"src":"4987:20:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5375,"name":"uint256","nodeType":"ElementaryTypeName","src":"4987:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5376,"nodeType":"ArrayTypeName","src":"4987:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5380,"mutability":"mutable","name":"amounts","nameLocation":"5026:7:23","nodeType":"VariableDeclaration","scope":5406,"src":"5009:24:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5378,"name":"uint256","nodeType":"ElementaryTypeName","src":"5009:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5379,"nodeType":"ArrayTypeName","src":"5009:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5382,"mutability":"mutable","name":"data","nameLocation":"5048:4:23","nodeType":"VariableDeclaration","scope":5406,"src":"5035:17:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5381,"name":"bytes","nodeType":"ElementaryTypeName","src":"5035:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4960:93:23"},"returnParameters":{"id":5385,"nodeType":"ParameterList","parameters":[],"src":"5078:0:23"},"scope":5463,"src":"4930:268:23","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[754],"body":{"id":5428,"nodeType":"Block","src":"5313:121:23","statements":[{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":5420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5415,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5408,"src":"5334:11:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":5417,"name":"IERC2981","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"5354:8:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC2981_$2088_$","typeString":"type(contract IERC2981)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC2981_$2088_$","typeString":"type(contract IERC2981)"}],"id":5416,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"5349:4:23","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5349:14:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC2981_$2088","typeString":"type(contract IERC2981)"}},"id":5419,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5364:11:23","memberName":"interfaceId","nodeType":"MemberAccess","src":"5349:26:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"5334:41:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":5423,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5408,"src":"5411:11:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":5421,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5387:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_HoldrArtistsERC1155_$5463_$","typeString":"type(contract super HoldrArtistsERC1155)"}},"id":5422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5393:17:23","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":754,"src":"5387:23:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":5424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5387:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5334:89:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5426,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5326:103:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5414,"id":5427,"nodeType":"Return","src":"5319:110:23"}]},"functionSelector":"01ffc9a7","id":5429,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"5211:17:23","nodeType":"FunctionDefinition","overrides":{"id":5411,"nodeType":"OverrideSpecifier","overrides":[{"id":5410,"name":"ERC1155Upgradeable","nameLocations":["5278:18:23"],"nodeType":"IdentifierPath","referencedDeclaration":1761,"src":"5278:18:23"}],"src":"5269:28:23"},"parameters":{"id":5409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5408,"mutability":"mutable","name":"interfaceId","nameLocation":"5236:11:23","nodeType":"VariableDeclaration","scope":5429,"src":"5229:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5407,"name":"bytes4","nodeType":"ElementaryTypeName","src":"5229:6:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"5228:20:23"},"returnParameters":{"id":5414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5413,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5429,"src":"5307:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5412,"name":"bool","nodeType":"ElementaryTypeName","src":"5307:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5306:6:23"},"scope":5463,"src":"5202:232:23","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[906],"body":{"id":5452,"nodeType":"Block","src":"5533:110:23","statements":[{"condition":{"baseExpression":{"id":5439,"name":"admins","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4987,"src":"5543:6:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5441,"indexExpression":{"id":5440,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"5550:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5543:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5445,"nodeType":"IfStatement","src":"5539:48:23","trueBody":{"id":5444,"nodeType":"Block","src":"5561:26:23","statements":[{"expression":{"hexValue":"74727565","id":5442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5576:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5438,"id":5443,"nodeType":"Return","src":"5569:11:23"}]}},{"expression":{"arguments":[{"id":5448,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5431,"src":"5622:5:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5449,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"5629:8:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5446,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"5599:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_HoldrArtistsERC1155_$5463_$","typeString":"type(contract super HoldrArtistsERC1155)"}},"id":5447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5605:16:23","memberName":"isApprovedForAll","nodeType":"MemberAccess","referencedDeclaration":906,"src":"5599:22:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":5450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5599:39:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5438,"id":5451,"nodeType":"Return","src":"5592:46:23"}]},"functionSelector":"e985e9c5","id":5453,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5447:16:23","nodeType":"FunctionDefinition","overrides":{"id":5435,"nodeType":"OverrideSpecifier","overrides":[],"src":"5509:8:23"},"parameters":{"id":5434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5431,"mutability":"mutable","name":"owner","nameLocation":"5472:5:23","nodeType":"VariableDeclaration","scope":5453,"src":"5464:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5430,"name":"address","nodeType":"ElementaryTypeName","src":"5464:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5433,"mutability":"mutable","name":"operator","nameLocation":"5487:8:23","nodeType":"VariableDeclaration","scope":5453,"src":"5479:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5432,"name":"address","nodeType":"ElementaryTypeName","src":"5479:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5463:33:23"},"returnParameters":{"id":5438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5453,"src":"5527:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5436,"name":"bool","nodeType":"ElementaryTypeName","src":"5527:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5526:6:23"},"scope":5463,"src":"5438:205:23","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[584],"body":{"id":5461,"nodeType":"Block","src":"5737:18:23","statements":[]},"id":5462,"implemented":true,"kind":"function","modifiers":[{"id":5459,"kind":"modifierInvocation","modifierName":{"id":5458,"name":"onlyOwner","nameLocations":["5727:9:23"],"nodeType":"IdentifierPath","referencedDeclaration":89,"src":"5727:9:23"},"nodeType":"ModifierInvocation","src":"5727:9:23"}],"name":"_authorizeUpgrade","nameLocation":"5656:17:23","nodeType":"FunctionDefinition","overrides":{"id":5457,"nodeType":"OverrideSpecifier","overrides":[],"src":"5701:8:23"},"parameters":{"id":5456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5455,"mutability":"mutable","name":"newImplementation","nameLocation":"5682:17:23","nodeType":"VariableDeclaration","scope":5462,"src":"5674:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5454,"name":"address","nodeType":"ElementaryTypeName","src":"5674:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5673:27:23"},"returnParameters":{"id":5460,"nodeType":"ParameterList","parameters":[],"src":"5737:0:23"},"scope":5463,"src":"5647:108:23","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":5464,"src":"511:5247:23","usedErrors":[30,35,211,214,475,480,2200,2205,2210,2217,2222,2227,2234,2270,2283,2996,2999],"usedEvents":[41,219,2249,2568,2583,2592,2599]}],"src":"32:5727:23"},"id":23},"contracts/HoldrArtistsERC1155UpgradeTest.sol":{"ast":{"absolutePath":"contracts/HoldrArtistsERC1155UpgradeTest.sol","exportedSymbols":{"ContextUpgradeable":[2028],"ECDSA":[3877],"ERC1155SupplyUpgradeable":[1990],"ERC1155Upgradeable":[1761],"ERC165":[3901],"ERC1967Utils":[2538],"ERC2981":[2983],"HoldrArtistsERC1155":[5463],"HoldrArtistsERC1155UpgradeTest":[5483],"IERC165":[3913],"IERC1822Proxiable":[2098],"IERC2981":[2088],"Initializable":[448],"OwnableUpgradeable":[194],"UUPSUpgradeable":[630]},"id":5484,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5465,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:24"},{"absolutePath":"contracts/HoldrArtistsERC1155.sol","file":"./HoldrArtistsERC1155.sol","id":5466,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5484,"sourceUnit":5464,"src":"58:35:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5467,"name":"HoldrArtistsERC1155","nameLocations":["138:19:24"],"nodeType":"IdentifierPath","referencedDeclaration":5463,"src":"138:19:24"},"id":5468,"nodeType":"InheritanceSpecifier","src":"138:19:24"}],"canonicalName":"HoldrArtistsERC1155UpgradeTest","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5483,"linearizedBaseContracts":[5483,5463,630,2098,194,1990,1761,2235,2729,2671,2068,3913,2028,448],"name":"HoldrArtistsERC1155UpgradeTest","nameLocation":"104:30:24","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[5429],"body":{"id":5481,"nodeType":"Block","src":"275:42:24","statements":[{"expression":{"arguments":[{"hexValue":"5468697320697320612064756d6d79206572726f72","id":5478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"288:23:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d","typeString":"literal_string \"This is a dummy error\""},"value":"This is a dummy error"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d","typeString":"literal_string \"This is a dummy error\""}],"id":5477,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"281:6:24","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":5479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"281:31:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5480,"nodeType":"ExpressionStatement","src":"281:31:24"}]},"functionSelector":"01ffc9a7","id":5482,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"172:17:24","nodeType":"FunctionDefinition","overrides":{"id":5473,"nodeType":"OverrideSpecifier","overrides":[{"id":5472,"name":"HoldrArtistsERC1155","nameLocations":["239:19:24"],"nodeType":"IdentifierPath","referencedDeclaration":5463,"src":"239:19:24"}],"src":"230:29:24"},"parameters":{"id":5471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5470,"mutability":"mutable","name":"interfaceId","nameLocation":"197:11:24","nodeType":"VariableDeclaration","scope":5482,"src":"190:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5469,"name":"bytes4","nodeType":"ElementaryTypeName","src":"190:6:24","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"189:20:24"},"returnParameters":{"id":5476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5475,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5482,"src":"269:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5474,"name":"bool","nodeType":"ElementaryTypeName","src":"269:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"268:6:24"},"scope":5483,"src":"163:154:24","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":5484,"src":"95:225:24","usedErrors":[30,35,211,214,475,480,2200,2205,2210,2217,2222,2227,2234,2270,2283,2996,2999],"usedEvents":[41,219,2249,2568,2583,2592,2599]}],"src":"32:289:24"},"id":24}},"contracts":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x72d47aebad24c59f6e78d0c3e827440173419a333fd910a37fa1e532c98f7e4c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"UUPSUpgradeable":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"implementation","type":"address"}],"name":"ERC1967InvalidImplementation","type":"error"},{"inputs":[],"name":"ERC1967NonPayable","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[],"name":"UUPSUnauthorizedCallContext","type":"error"},{"inputs":[{"internalType":"bytes32","name":"slot","type":"bytes32"}],"name":"UUPSUnsupportedProxiableUUID","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"UPGRADE_INTERFACE_VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.","errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"ERC1967InvalidImplementation(address)":[{"details":"The `implementation` of the proxy is invalid."}],"ERC1967NonPayable()":[{"details":"An upgrade function sees `msg.value > 0` that may be lost."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"UUPSUnauthorizedCallContext()":[{"details":"The call is from an unauthorized context."}],"UUPSUnsupportedProxiableUUID(bytes32)":[{"details":"The storage `slot` is unsupported as a UUID."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"stateVariables":{"UPGRADE_INTERFACE_VERSION":{"details":"The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)` and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called, while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string. If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must be the empty byte string if no function should be called, making it impossible to invoke the `receive` function during an upgrade."},"__self":{"custom:oz-upgrades-unsafe-allow":"state-variable-immutable"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"UPGRADE_INTERFACE_VERSION()":"ad3cb1cc","proxiableUUID()":"52d1902d","upgradeToAndCall(address,bytes)":"4f1ef286"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy. A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing `UUPSUpgradeable` with a custom implementation of upgrades. The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"UPGRADE_INTERFACE_VERSION\":{\"details\":\"The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)` and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called, while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string. If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must be the empty byte string if no function should be called, making it impossible to invoke the `receive` function during an upgrade.\"},\"__self\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":\"UUPSUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol":{"ERC1155Upgradeable":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the basic standard multi-token. See https://eips.ethereum.org/EIPS/eip-1155 Originally based on code by Enjin: https://github.com/enjin/erc-1155\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":\"ERC1155Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Arrays} from \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155\\n    struct ERC1155Storage {\\n        mapping(uint256 id => mapping(address account => uint256)) _balances;\\n\\n        mapping(address account => mapping(address operator => bool)) _operatorApprovals;\\n\\n        // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n        string _uri;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC1155\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC1155StorageLocation = 0x88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500;\\n\\n    function _getERC1155Storage() private pure returns (ERC1155Storage storage $) {\\n        assembly {\\n            $.slot := ERC1155StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = $._balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    $._balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                $._balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        $._uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x070826217a19b56724fe97adc7e5daef1d614e45b98ab964bda02b3be01e9870\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x72d47aebad24c59f6e78d0c3e827440173419a333fd910a37fa1e532c98f7e4c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol":{"ERC1155SupplyUpgradeable":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"exists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Extension of ERC1155 that adds tracking of total supply per id. Useful for scenarios where Fungible and Non-fungible tokens have to be clearly identified. Note: While a totalSupply of 1 might mean the corresponding is an NFT, there is no guarantees that no other token with the same id are not going to be minted. NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens that can be minted. CAUTION: This extension should not be added in an upgrade to an already deployed contract.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"exists(uint256)":{"details":"Indicates whether any token exist with a given id, or not."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"totalSupply()":{"details":"Total value of tokens."},"totalSupply(uint256)":{"details":"Total value of tokens in with a given id."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","exists(uint256)":"4f558e79","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","totalSupply(uint256)":"bd85b039","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of ERC1155 that adds tracking of total supply per id. Useful for scenarios where Fungible and Non-fungible tokens have to be clearly identified. Note: While a totalSupply of 1 might mean the corresponding is an NFT, there is no guarantees that no other token with the same id are not going to be minted. NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens that can be minted. CAUTION: This extension should not be added in an upgrade to an already deployed contract.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply()\":{\"details\":\"Total value of tokens.\"},\"totalSupply(uint256)\":{\"details\":\"Total value of tokens in with a given id.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":\"ERC1155SupplyUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Arrays} from \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155\\n    struct ERC1155Storage {\\n        mapping(uint256 id => mapping(address account => uint256)) _balances;\\n\\n        mapping(address account => mapping(address operator => bool)) _operatorApprovals;\\n\\n        // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n        string _uri;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC1155\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC1155StorageLocation = 0x88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500;\\n\\n    function _getERC1155Storage() private pure returns (ERC1155Storage storage $) {\\n        assembly {\\n            $.slot := ERC1155StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = $._balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    $._balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                $._balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        $._uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x070826217a19b56724fe97adc7e5daef1d614e45b98ab964bda02b3be01e9870\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155Upgradeable} from \\\"../ERC1155Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n *\\n * NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens\\n * that can be minted.\\n *\\n * CAUTION: This extension should not be added in an upgrade to an already deployed contract.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155Supply\\n    struct ERC1155SupplyStorage {\\n        mapping(uint256 id => uint256) _totalSupply;\\n        uint256 _totalSupplyAll;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC1155Supply\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC1155SupplyStorageLocation = 0x4a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e2800;\\n\\n    function _getERC1155SupplyStorage() private pure returns (ERC1155SupplyStorage storage $) {\\n        assembly {\\n            $.slot := ERC1155SupplyStorageLocation\\n        }\\n    }\\n\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Total value of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        return $._totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Total value of tokens.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        return $._totalSupplyAll;\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_update}.\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) internal virtual override {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        super._update(from, to, ids, values);\\n\\n        if (from == address(0)) {\\n            uint256 totalMintValue = 0;\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 value = values[i];\\n                // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n                $._totalSupply[ids[i]] += value;\\n                totalMintValue += value;\\n            }\\n            // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\\n            $._totalSupplyAll += totalMintValue;\\n        }\\n\\n        if (to == address(0)) {\\n            uint256 totalBurnValue = 0;\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 value = values[i];\\n\\n                unchecked {\\n                    // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\\n                    $._totalSupply[ids[i]] -= value;\\n                    // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\\n                    totalBurnValue += value;\\n                }\\n            }\\n            unchecked {\\n                // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\\n                $._totalSupplyAll -= totalBurnValue;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x734e28bc55a4939ff5b831d733f6d6414b35251cd85b1155cefb66e73ae844f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x72d47aebad24c59f6e78d0c3e827440173419a333fd910a37fa1e532c98f7e4c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x72d47aebad24c59f6e78d0c3e827440173419a333fd910a37fa1e532c98f7e4c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"ERC165Upgradeable":{"abi":[{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","errors":{"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":\"ERC165Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC2981.sol":{"IERC2981":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"salePrice","type":"uint256"}],"name":"royaltyInfo","outputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"royaltyAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface for the NFT Royalty Standard. A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal support for royalty payments across all NFT marketplaces and ecosystem participants.","kind":"dev","methods":{"royaltyInfo(uint256,uint256)":{"details":"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"royaltyInfo(uint256,uint256)":"2a55205a","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the NFT Royalty Standard. A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal support for royalty payments across all NFT marketplaces and ecosystem participants.\",\"kind\":\"dev\",\"methods\":{\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":\"IERC2981\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x89b84f7b1b2d6c294cd6b9a9f661c1cfb1b9b10ca7bac5b3445850a8ce96dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"IERC1822Proxiable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":\"IERC1822Proxiable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol":{"ERC1967Utils":{"abi":[{"inputs":[{"internalType":"address","name":"admin","type":"address"}],"name":"ERC1967InvalidAdmin","type":"error"},{"inputs":[{"internalType":"address","name":"beacon","type":"address"}],"name":"ERC1967InvalidBeacon","type":"error"},{"inputs":[{"internalType":"address","name":"implementation","type":"address"}],"name":"ERC1967InvalidImplementation","type":"error"},{"inputs":[],"name":"ERC1967NonPayable","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.","errors":{"ERC1967InvalidAdmin(address)":[{"details":"The `admin` of the proxy is invalid."}],"ERC1967InvalidBeacon(address)":[{"details":"The `beacon` of the proxy is invalid."}],"ERC1967InvalidImplementation(address)":[{"details":"The `implementation` of the proxy is invalid."}],"ERC1967NonPayable()":[{"details":"An upgrade function sees `msg.value > 0` that may be lost."}]},"events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"stateVariables":{"ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1."},"BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1."},"IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f9b8d33a0960eae279bdafd20e3bc0f794ce08bcddbc5af27cb5987198ad1c2a64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 0xB8 0xD3 GASPRICE MULMOD PUSH1 0xEA 0xE2 PUSH26 0xBDAFD20E3BC0F794CE08BCDDBC5AF27CB5987198AD1C2A64736F PUSH13 0x63430008140033000000000000 ","sourceMap":"449:6273:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f9b8d33a0960eae279bdafd20e3bc0f794ce08bcddbc5af27cb5987198ad1c2a64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 0xB8 0xD3 GASPRICE MULMOD PUSH1 0xEA 0xE2 PUSH26 0xBDAFD20E3BC0F794CE08BCDDBC5AF27CB5987198AD1C2A64736F PUSH13 0x63430008140033000000000000 ","sourceMap":"449:6273:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_checkNonPayable()":"infinite","_setAdmin(address)":"infinite","_setBeacon(address)":"infinite","_setImplementation(address)":"infinite","changeAdmin(address)":"infinite","getAdmin()":"infinite","getBeacon()":"infinite","getImplementation()":"infinite","upgradeBeaconToAndCall(address,bytes memory)":"infinite","upgradeToAndCall(address,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidBeacon\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\",\"errors\":{\"ERC1967InvalidAdmin(address)\":[{\"details\":\"The `admin` of the proxy is invalid.\"}],\"ERC1967InvalidBeacon(address)\":[{\"details\":\"The `beacon` of the proxy is invalid.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}]},\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\"},\"BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\"},\"IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":\"ERC1967Utils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"IBeacon":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {UpgradeableBeacon} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {UpgradeableBeacon} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":\"IBeacon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155.sol":{"IERC1155":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP].","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the value of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferBatch} event. Requirements: - `ids` and `values` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers a `value` amount of tokens of type `id` from `from` to `to`. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155Received} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `value` amount. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC1155 compliant contract, as defined in the https://eips.ethereum.org/EIPS/eip-1155[EIP].\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the value of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferBatch} event. Requirements: - `ids` and `values` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers a `value` amount of tokens of type `id` from `from` to `to`. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155Received} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `value` amount. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol":{"IERC1155Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface that must be implemented by smart contracts in order to receive ERC-1155 token transfers.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match ids array)"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"_0":"`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface that must be implemented by smart contracts in order to receive ERC-1155 token transfers.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":\"IERC1155Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol":{"IERC1155MetadataURI":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].","events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."}},"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the value of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferBatch} event. Requirements: - `ids` and `values` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers a `value` amount of tokens of type `id` from `from` to `to`. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155Received} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `value` amount. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"uri(uint256)":{"details":"Returns the URI for token type `id`. If the `\\{id\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the optional ERC1155MetadataExtension interface, as defined in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the value of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferBatch} event. Requirements: - `ids` and `values` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers a `value` amount of tokens of type `id` from `from` to `to`. WARNING: This function can potentially allow a reentrancy attack when transferring tokens to an untrusted contract, when invoking {onERC1155Received} on the receiver. Ensure to follow the checks-effects-interactions pattern and consider employing reentrancy guards when interacting with untrusted contracts. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `value` amount. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"uri(uint256)\":{\"details\":\"Returns the URI for token type `id`. If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":\"IERC1155MetadataURI\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/common/ERC2981.sol":{"ERC2981":{"abi":[{"inputs":[{"internalType":"uint256","name":"numerator","type":"uint256"},{"internalType":"uint256","name":"denominator","type":"uint256"}],"name":"ERC2981InvalidDefaultRoyalty","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC2981InvalidDefaultRoyaltyReceiver","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"numerator","type":"uint256"},{"internalType":"uint256","name":"denominator","type":"uint256"}],"name":"ERC2981InvalidTokenRoyalty","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC2981InvalidTokenRoyaltyReceiver","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"salePrice","type":"uint256"}],"name":"royaltyInfo","outputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information. Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first. Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the fee is specified in basis points by default. IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.","errors":{"ERC2981InvalidDefaultRoyalty(uint256,uint256)":[{"details":"The default royalty set is invalid (eg. (numerator / denominator) >= 1)."}],"ERC2981InvalidDefaultRoyaltyReceiver(address)":[{"details":"The default royalty receiver is invalid."}],"ERC2981InvalidTokenRoyalty(uint256,uint256,uint256)":[{"details":"The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1)."}],"ERC2981InvalidTokenRoyaltyReceiver(uint256,address)":[{"details":"The royalty receiver for `tokenId` is invalid."}]},"kind":"dev","methods":{"royaltyInfo(uint256,uint256)":{"details":"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"royaltyInfo(uint256,uint256)":"2a55205a","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"ERC2981InvalidDefaultRoyalty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC2981InvalidDefaultRoyaltyReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"ERC2981InvalidTokenRoyalty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC2981InvalidTokenRoyaltyReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information. Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first. Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the fee is specified in basis points by default. IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\",\"errors\":{\"ERC2981InvalidDefaultRoyalty(uint256,uint256)\":[{\"details\":\"The default royalty set is invalid (eg. (numerator / denominator) >= 1).\"}],\"ERC2981InvalidDefaultRoyaltyReceiver(address)\":[{\"details\":\"The default royalty receiver is invalid.\"}],\"ERC2981InvalidTokenRoyalty(uint256,uint256,uint256)\":[{\"details\":\"The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\"}],\"ERC2981InvalidTokenRoyaltyReceiver(uint256,address)\":[{\"details\":\"The royalty receiver for `tokenId` is invalid.\"}]},\"kind\":\"dev\",\"methods\":{\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/common/ERC2981.sol\":\"ERC2981\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x89b84f7b1b2d6c294cd6b9a9f661c1cfb1b9b10ca7bac5b3445850a8ce96dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC2981} from \\\"../../interfaces/IERC2981.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 tokenId => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev The default royalty set is invalid (eg. (numerator / denominator) >= 1).\\n     */\\n    error ERC2981InvalidDefaultRoyalty(uint256 numerator, uint256 denominator);\\n\\n    /**\\n     * @dev The default royalty receiver is invalid.\\n     */\\n    error ERC2981InvalidDefaultRoyaltyReceiver(address receiver);\\n\\n    /**\\n     * @dev The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\\n     */\\n    error ERC2981InvalidTokenRoyalty(uint256 tokenId, uint256 numerator, uint256 denominator);\\n\\n    /**\\n     * @dev The royalty receiver for `tokenId` is invalid.\\n     */\\n    error ERC2981InvalidTokenRoyaltyReceiver(uint256 tokenId, address receiver);\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        uint256 denominator = _feeDenominator();\\n        if (feeNumerator > denominator) {\\n            // Royalty fee will exceed the sale price\\n            revert ERC2981InvalidDefaultRoyalty(feeNumerator, denominator);\\n        }\\n        if (receiver == address(0)) {\\n            revert ERC2981InvalidDefaultRoyaltyReceiver(address(0));\\n        }\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        uint256 denominator = _feeDenominator();\\n        if (feeNumerator > denominator) {\\n            // Royalty fee will exceed the sale price\\n            revert ERC2981InvalidTokenRoyalty(tokenId, feeNumerator, denominator);\\n        }\\n        if (receiver == address(0)) {\\n            revert ERC2981InvalidTokenRoyaltyReceiver(tokenId, address(0));\\n        }\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x87e4eac873515f713e858d72150a7d2a69ddd531967e60a5d6ba77127db1fd54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2749,"contract":"@openzeppelin/contracts/token/common/ERC2981.sol:ERC2981","label":"_defaultRoyaltyInfo","offset":0,"slot":"0","type":"t_struct(RoyaltyInfo)2746_storage"},{"astId":2754,"contract":"@openzeppelin/contracts/token/common/ERC2981.sol:ERC2981","label":"_tokenRoyaltyInfo","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_struct(RoyaltyInfo)2746_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_uint256,t_struct(RoyaltyInfo)2746_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct ERC2981.RoyaltyInfo)","numberOfBytes":"32","value":"t_struct(RoyaltyInfo)2746_storage"},"t_struct(RoyaltyInfo)2746_storage":{"encoding":"inplace","label":"struct ERC2981.RoyaltyInfo","members":[{"astId":2743,"contract":"@openzeppelin/contracts/token/common/ERC2981.sol:ERC2981","label":"receiver","offset":0,"slot":"0","type":"t_address"},{"astId":2745,"contract":"@openzeppelin/contracts/token/common/ERC2981.sol:ERC2981","label":"royaltyFraction","offset":20,"slot":"0","type":"t_uint96"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"}],"devdoc":{"details":"Collection of functions related to the address type","errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"AddressInsufficientBalance(address)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122029b12d6db01e6fe8f85382116c8b039b32476054896d2cacb6dd3355d1499aa364736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 0xB1 0x2D PUSH14 0xB01E6FE8F85382116C8B039B3247 PUSH1 0x54 DUP10 PUSH14 0x2CACB6DD3355D1499AA364736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"195:6066:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122029b12d6db01e6fe8f85382116c8b039b32476054896d2cacb6dd3355d1499aa364736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 0xB1 0x2D PUSH14 0xB01E6FE8F85382116C8B039B3247 PUSH1 0x54 DUP10 PUSH14 0x2CACB6DD3355D1499AA364736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"195:6066:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Arrays.sol":{"Arrays":{"abi":[],"devdoc":{"details":"Collection of functions related to array types.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122022fb1904c9e942958caf3f8f481640c855d748af0e10e5bf624f6da821a8513864736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 0xFB NOT DIV 0xC9 0xE9 TIMESTAMP SWAP6 DUP13 0xAF EXTCODEHASH DUP16 BASEFEE AND BLOCKHASH 0xC8 SSTORE 0xD7 BASEFEE 0xAF 0xE LT 0xE5 0xBF PUSH3 0x4F6DA8 0x21 0xA8 MLOAD CODESIZE PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"276:4526:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122022fb1904c9e942958caf3f8f481640c855d748af0e10e5bf624f6da821a8513864736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 0xFB NOT DIV 0xC9 0xE9 TIMESTAMP SWAP6 DUP13 0xAF EXTCODEHASH DUP16 BASEFEE AND BLOCKHASH 0xC8 SSTORE 0xD7 BASEFEE 0xAF 0xE LT 0xE5 0xBF PUSH3 0x4F6DA8 0x21 0xA8 MLOAD CODESIZE PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"276:4526:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"findUpperBound(uint256[] storage pointer,uint256)":"infinite","unsafeAccess(address[] storage pointer,uint256)":"infinite","unsafeAccess(bytes32[] storage pointer,uint256)":"infinite","unsafeAccess(uint256[] storage pointer,uint256)":"infinite","unsafeMemoryAccess(address[] memory,uint256)":"infinite","unsafeMemoryAccess(uint256[] memory,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to array types.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Arrays.sol\":\"Arrays\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ca1595973fd439c5bf54ecb399e3bbb86bff8a362f2c39af80e988822322fa2b64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA ISZERO SWAP6 SWAP8 EXTCODEHASH 0xD4 CODECOPY 0xC5 0xBF SLOAD 0xEC 0xB3 SWAP10 0xE3 0xBB 0xB8 PUSH12 0xFF8A362F2C39AF80E9888223 0x22 STATICCALL 0x2B PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"1245:2685:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ca1595973fd439c5bf54ecb399e3bbb86bff8a362f2c39af80e988822322fa2b64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCA ISZERO SWAP6 SWAP8 EXTCODEHASH 0xD4 CODECOPY 0xC5 0xBF SLOAD 0xEC 0xB3 SWAP10 0xE3 0xBB 0xB8 PUSH12 0xFF8A362F2C39AF80E9888223 0x22 STATICCALL 0x2B PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"1245:2685:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"}],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","errors":{"ECDSAInvalidSignature()":[{"details":"The signature derives the `address(0)`."}],"ECDSAInvalidSignatureLength(uint256)":[{"details":"The signature has an invalid length."}],"ECDSAInvalidSignatureS(bytes32)":[{"details":"The signature has an S value that is in the upper half order."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ae35b5b007244dc137b12fc97e6ccbb51f382a2853ac7b32e7dfc638302b45d164736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE CALLDATALOAD 0xB5 0xB0 SMOD 0x24 0x4D 0xC1 CALLDATACOPY 0xB1 0x2F 0xC9 PUSH31 0x6CCBB51F382A2853AC7B32E7DFC638302B45D164736F6C6343000814003300 ","sourceMap":"344:7386:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ae35b5b007244dc137b12fc97e6ccbb51f382a2853ac7b32e7dfc638302b45d164736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE CALLDATALOAD 0xB5 0xB0 SMOD 0x24 0x4D 0xC1 CALLDATACOPY 0xB1 0x2F 0xC9 PUSH31 0x6CCBB51F382A2853AC7B32E7DFC638302B45D164736F6C6343000814003300 ","sourceMap":"344:7386:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSA.RecoverError,bytes32)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9332d4b0da81becbc8931c24d2cd33cbff57a93f4d2e609e7f243f8b0d2b8dc64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 CALLER 0x2D 0x4B 0xD 0xA8 SHL 0xEC 0xBC DUP10 BALANCE 0xC2 0x4D 0x2C 0xD3 EXTCODECOPY 0xBF CREATE2 PUSH27 0x93F4D2E609E7F243F8B0D2B8DC64736F6C63430008140033000000 ","sourceMap":"203:14914:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9332d4b0da81becbc8931c24d2cd33cbff57a93f4d2e609e7f243f8b0d2b8dc64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 CALLER 0x2D 0x4B 0xD 0xA8 SHL 0xEC 0xBC DUP10 BALANCE 0xC2 0x4D 0x2C 0xD3 EXTCODECOPY 0xBF CREATE2 PUSH27 0x93F4D2E609E7F243F8B0D2B8DC64736F6C63430008140033000000 ","sourceMap":"203:14914:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/HoldrArtistsERC1155.sol":{"HoldrArtistsERC1155":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"},{"inputs":[{"internalType":"address","name":"implementation","type":"address"}],"name":"ERC1967InvalidImplementation","type":"error"},{"inputs":[],"name":"ERC1967NonPayable","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"UUPSUnauthorizedCallContext","type":"error"},{"inputs":[{"internalType":"bytes32","name":"slot","type":"bytes32"}],"name":"UUPSUnsupportedProxiableUUID","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"UPGRADE_INTERFACE_VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adminAddress","type":"address"}],"name":"addAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"adminBurn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"adminBurnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"count","type":"uint256"}],"name":"adminMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"admins","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"artistAddresses","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"exists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"extraSupply","type":"uint256"}],"name":"increaseTokenSupplyLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"initialOwner","type":"address"},{"internalType":"address[]","name":"initialAdmins","type":"address[]"},{"internalType":"string","name":"uri","type":"string"}],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"adminAddress","type":"address"}],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"count","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adminAddress","type":"address"}],"name":"removeAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"artistAddress","type":"address"}],"name":"setArtistAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"uri","type":"string"}],"name":"setURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenSupplyLimits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}],"ERC1967InvalidImplementation(address)":[{"details":"The `implementation` of the proxy is invalid."}],"ERC1967NonPayable()":[{"details":"An upgrade function sees `msg.value > 0` that may be lost."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}],"UUPSUnauthorizedCallContext()":[{"details":"The call is from an unauthorized context."}],"UUPSUnsupportedProxiableUUID(bytes32)":[{"details":"The storage `slot` is unsupported as a UUID."}]},"events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"addAdmin(address)":{"details":"Add an admin Params: _adminAddress: the new address"},"adminBurn(address,uint256)":{"details":"The admin burn function for burning a user's token Params: from: the owner of the token tokenId: the token id"},"adminBurnBatch(address[],uint256[])":{"details":"The admin burn batch function for burning a user's token Params: from: the owners of the token tokenIds: the token ids"},"adminMint(uint256,uint256)":{"details":"The admin mint function (mints new tokens of a particular id) Params: tokenId: the token id to be minted count: the number of new tokens to mint"},"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"exists(uint256)":{"details":"Indicates whether any token exist with a given id, or not."},"increaseTokenSupplyLimit(uint256,uint256)":{"details":"Increase the max allowed supply of an artist token Params: tokenId: the id of the token being updated extraSupply: the additional supply to be allowed"},"isAdmin(address)":{"details":"Check address is admin Params: _address: the address to check"},"mint(uint256,uint256)":{"details":"The mint function (mints new tokens of a particular id) Params: tokenId: the token id to be minted count: the number of new tokens to mint"},"owner()":{"details":"Returns the address of the current owner."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"removeAdmin(address)":{"details":"Remove an admin Params: adminAddress: the address to remove"},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"setArtistAddress(uint256,address)":{"details":"Update the artist address for a particular token Params: tokenId: the id of the token being updated artistAddress: the new address of the artist for this token"},"setURI(string)":{"details":"Update the uri template Params: _uri: the new uri template"},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"totalSupply()":{"details":"Total value of tokens."},"totalSupply(uint256)":{"details":"Total value of tokens in with a given id."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b506080516149f061006d60003960008181611ca601528181611cfb0152611eb601526149f06000f3fe6080604052600436106101d75760003560e01c806352d1902d11610102578063bb62550911610095578063e985e9c511610064578063e985e9c5146106cc578063f242432a14610709578063f2fde38b14610732578063fbe0a8921461075b576101d7565b8063bb62550914610614578063bd85b0391461063d578063c36497e51461067a578063d00e40ce146106a3576101d7565b80638da5cb5b116100d15780638da5cb5b1461056c5780639eca4b7b14610597578063a22cb465146105c0578063ad3cb1cc146105e9576101d7565b806352d1902d146104c457806370480275146104ef578063715018a614610518578063831ffd051461052f576101d7565b806318160ddd1161017a578063429b62e511610149578063429b62e5146103f15780634e1273f41461042e5780634f1ef2861461046b5780634f558e7914610487576101d7565b806318160ddd146103375780631b2ef1ca1461036257806324d7806c1461038b5780632eb2c2d6146103c8576101d7565b806306dd0419116101b657806306dd04191461027f578063077d9234146102a85780630e89341c146102d15780631785f53c1461030e576101d7565b8062fdd58e146101dc57806301ffc9a71461021957806302fe530514610256575b600080fd5b3480156101e857600080fd5b5061020360048036038101906101fe919061347c565b610798565b60405161021091906134cb565b60405180910390f35b34801561022557600080fd5b50610240600480360381019061023b919061353e565b610801565b60405161024d9190613586565b60405180910390f35b34801561026257600080fd5b5061027d600480360381019061027891906136e7565b61087b565b005b34801561028b57600080fd5b506102a660048036038101906102a1919061347c565b61088f565b005b3480156102b457600080fd5b506102cf60048036038101906102ca91906138bb565b61092a565b005b3480156102dd57600080fd5b506102f860048036038101906102f39190613933565b6109ef565b60405161030591906139df565b60405180910390f35b34801561031a57600080fd5b5061033560048036038101906103309190613a01565b610a92565b005b34801561034357600080fd5b5061034c610aeb565b60405161035991906134cb565b60405180910390f35b34801561036e57600080fd5b5061038960048036038101906103849190613a2e565b610b03565b005b34801561039757600080fd5b506103b260048036038101906103ad9190613a01565b610c5f565b6040516103bf9190613586565b60405180910390f35b3480156103d457600080fd5b506103ef60048036038101906103ea9190613b0f565b610cbb565b005b3480156103fd57600080fd5b5061041860048036038101906104139190613a01565b610d88565b6040516104259190613586565b60405180910390f35b34801561043a57600080fd5b50610455600480360381019061045091906138bb565b610da8565b6040516104629190613c9c565b60405180910390f35b61048560048036038101906104809190613cbe565b610eb7565b005b34801561049357600080fd5b506104ae60048036038101906104a99190613933565b610ed6565b6040516104bb9190613586565b60405180910390f35b3480156104d057600080fd5b506104d9610eea565b6040516104e69190613d33565b60405180910390f35b3480156104fb57600080fd5b5061051660048036038101906105119190613a01565b610f1d565b005b34801561052457600080fd5b5061052d610f7f565b005b34801561053b57600080fd5b5061055660048036038101906105519190613933565b610f93565b6040516105639190613d5d565b60405180910390f35b34801561057857600080fd5b50610581610fc6565b60405161058e9190613d5d565b60405180910390f35b3480156105a357600080fd5b506105be60048036038101906105b99190613d78565b610ffe565b005b3480156105cc57600080fd5b506105e760048036038101906105e29190613de4565b611122565b005b3480156105f557600080fd5b506105fe611130565b60405161060b91906139df565b60405180910390f35b34801561062057600080fd5b5061063b60048036038101906106369190613e24565b611169565b005b34801561064957600080fd5b50610664600480360381019061065f9190613933565b6113a4565b60405161067191906134cb565b60405180910390f35b34801561068657600080fd5b506106a1600480360381019061069c9190613a2e565b6113cf565b005b3480156106af57600080fd5b506106ca60048036038101906106c59190613a2e565b6114f7565b005b3480156106d857600080fd5b506106f360048036038101906106ee9190613eaf565b6116df565b6040516107009190613586565b60405180910390f35b34801561071557600080fd5b50610730600480360381019061072b9190613eef565b61174e565b005b34801561073e57600080fd5b5061075960048036038101906107549190613a01565b61181b565b005b34801561076757600080fd5b50610782600480360381019061077d9190613933565b6118a1565b60405161078f91906134cb565b60405180910390f35b6000806107a36118b9565b905080600001600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108745750610873826118e1565b5b9050919050565b6108836119c3565b61088c81611a4a565b50565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661091a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091190613fd2565b60405180910390fd5b61092682826001611a6c565b5050565b60005b82518110156109ea573073ffffffffffffffffffffffffffffffffffffffff166306dd041984838151811061096557610964613ff2565b5b60200260200101518484815181106109805761097f613ff2565b5b60200260200101516040518363ffffffff1660e01b81526004016109a5929190614021565b600060405180830381600087803b1580156109bf57600080fd5b505af11580156109d3573d6000803e3d6000fd5b5050505080806109e290614079565b91505061092d565b505050565b606060006109fb6118b9565b9050806002018054610a0c906140f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610a38906140f0565b8015610a855780601f10610a5a57610100808354040283529160200191610a85565b820191906000526020600020905b815481529060010190602001808311610a6857829003601f168201915b5050505050915050919050565b610a9a6119c3565b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905550565b600080610af6611b13565b9050806001015491505090565b3373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b90614193565b60405180910390fd5b600260008381526020019081526020016000205481610bc2846113a4565b610bcc91906141b3565b1115610c0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0490614233565b60405180910390fd5b610c5b6001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838360405180602001604052806000815250611b3b565b5050565b6000600115156000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515149050919050565b3073ffffffffffffffffffffffffffffffffffffffff166324d7806c336040518263ffffffff1660e01b8152600401610cf49190613d5d565b602060405180830381865afa158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d359190614268565b610d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6b90613fd2565b60405180910390fd5b610d818585858585611bd4565b5050505050565b60006020528060005260406000206000915054906101000a900460ff1681565b60608151835114610df457815183516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401610deb929190614295565b60405180910390fd5b6000835167ffffffffffffffff811115610e1157610e106135bc565b5b604051908082528060200260200182016040528015610e3f5781602001602082028036833780820191505090505b50905060005b8451811015610eac57610e7c610e648287611c7c90919063ffffffff16565b610e778387611c9090919063ffffffff16565b610798565b828281518110610e8f57610e8e613ff2565b5b60200260200101818152505080610ea590614079565b9050610e45565b508091505092915050565b610ebf611ca4565b610ec882611d8a565b610ed28282611d95565b5050565b600080610ee2836113a4565b119050919050565b6000610ef4611eb4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b610f256119c3565b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610f876119c3565b610f916000611f3b565b565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610fd1612012565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611089576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108090613fd2565b60405180910390fd5b600082036110cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c39061430a565b60405180910390fd5b806001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61112c828261203a565b5050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b6000611173612050565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156111c15750825b9050600060018367ffffffffffffffff161480156111f6575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015611204575080155b1561123b576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561128b5760018560000160086101000a81548160ff0219169083151502179055505b611293612078565b61129c88612082565b6112a4612096565b6112ad86611a4a565b60005b875181101561133d5760016000808a84815181106112d1576112d0613ff2565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061133590614079565b9150506112b0565b50831561139a5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516113919190614383565b60405180910390a15b5050505050505050565b6000806113af611b13565b905080600001600084815260200190815260200160002054915050919050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661145a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145190613fd2565b60405180910390fd5b6103e881600260008581526020019081526020016000205461147c91906141b3565b11156114bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b490614410565b60405180910390fd5b8060026000848152602001908152602001600020546114dc91906141b3565b60026000848152602001908152602001600020819055505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157990613fd2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161b9061447c565b60405180910390fd5b600260008381526020019081526020016000205481611642846113a4565b61164c91906141b3565b111561168d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168490614233565b60405180910390fd5b6116db6001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838360405180602001604052806000815250611b3b565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561173b5760019050611748565b61174583836120a0565b90505b92915050565b3073ffffffffffffffffffffffffffffffffffffffff166324d7806c336040518263ffffffff1660e01b81526004016117879190613d5d565b602060405180830381865afa1580156117a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c89190614268565b611807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fe90613fd2565b60405180910390fd5b6118148585858585612142565b5050505050565b6118236119c3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118955760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161188c9190613d5d565b60405180910390fd5b61189e81611f3b565b50565b60026020528060005260406000206000915090505481565b60007f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500905090565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806119ac57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806119bc57506119bb826121ea565b5b9050919050565b6119cb612254565b73ffffffffffffffffffffffffffffffffffffffff166119e9610fc6565b73ffffffffffffffffffffffffffffffffffffffff1614611a4857611a0c612254565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611a3f9190613d5d565b60405180910390fd5b565b6000611a546118b9565b905081816002019081611a67919061463e565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ade5760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401611ad59190613d5d565b60405180910390fd5b600080611aeb848461225c565b91509150611b0c85600084846040518060200160405280600081525061228c565b5050505050565b60007f4a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e2800905090565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611bad5760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611ba49190613d5d565b60405180910390fd5b600080611bba858561225c565b91509150611bcc60008784848761228c565b505050505050565b6000611bde612254565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015611c235750611c2186826116df565b155b15611c675780866040517fe237d922000000000000000000000000000000000000000000000000000000008152600401611c5e929190614710565b60405180910390fd5b611c74868686868661233e565b505050505050565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480611d5157507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611d38612436565b73ffffffffffffffffffffffffffffffffffffffff1614155b15611d88576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611d926119c3565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611dfd57506040513d601f19601f82011682018060405250810190611dfa9190614765565b60015b611e3e57816040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401611e359190613d5d565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114611ea557806040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600401611e9c9190613d33565b60405180910390fd5b611eaf838361248d565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611f39576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000611f45612012565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b61204c612045612254565b8383612500565b5050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b61208061267f565b565b61208a61267f565b612093816126bf565b50565b61209e61267f565b565b6000806120ab6118b9565b90508060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b600061214c612254565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015612191575061218f86826116df565b155b156121d55780866040517fe237d9220000000000000000000000000000000000000000000000000000000081526004016121cc929190614710565b60405180910390fd5b6121e28686868686612745565b505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b61229885858585612850565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146123375760006122d6612254565b905060018451036123265760006122f7600086611c9090919063ffffffff16565b9050600061230f600086611c9090919063ffffffff16565b905061231f838989858589612a1c565b5050612335565b612334818787878787612bd0565b5b505b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036123b05760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016123a79190613d5d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036124225760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016124199190613d5d565b60405180910390fd5b61242f858585858561228c565b5050505050565b60006124647f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612d84565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61249682612d8e565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a26000815111156124f3576124ed8282612e5b565b506124fc565b6124fb612edf565b5b5050565b600061250a6118b9565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361257e5760006040517fced3e1000000000000000000000000000000000000000000000000000000000081526004016125759190613d5d565b60405180910390fd5b818160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31846040516126719190613586565b60405180910390a350505050565b612687612f1c565b6126bd576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6126c761267f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036127395760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016127309190613d5d565b60405180910390fd5b61274281611f3b565b50565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036127b75760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016127ae9190613d5d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036128295760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016128209190613d5d565b60405180910390fd5b600080612836858561225c565b91509150612847878784848761228c565b50505050505050565b600061285a611b13565b905061286885858585612f3c565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361294c576000805b845181101561292e5760008482815181106128be576128bd613ff2565b5b60200260200101519050808460000160008885815181106128e2576128e1613ff2565b5b60200260200101518152602001908152602001600020600082825461290791906141b3565b92505081905550808361291a91906141b3565b9250508061292790614079565b90506128a0565b508082600101600082825461294391906141b3565b92505081905550505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612a15576000805b8451811015612a005760008482815181106129a2576129a1613ff2565b5b60200260200101519050808460000160008885815181106129c6576129c5613ff2565b5b6020026020010151815260200190815260200160002060008282540392505081905550808301925050806129f990614079565b9050612984565b50808260010160008282540392505081905550505b5050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115612bc8578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612a7d9594939291906147e7565b6020604051808303816000875af1925050508015612ab957506040513d601f19601f82011682018060405250810190612ab69190614856565b60015b612b3d573d8060008114612ae9576040519150601f19603f3d011682016040523d82523d6000602084013e612aee565b606091505b506000815103612b3557846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612b2c9190613d5d565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612bc657846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612bbd9190613d5d565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115612d7c578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612c31959493929190614883565b6020604051808303816000875af1925050508015612c6d57506040513d601f19601f82011682018060405250810190612c6a9190614856565b60015b612cf1573d8060008114612c9d576040519150601f19603f3d011682016040523d82523d6000602084013e612ca2565b606091505b506000815103612ce957846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612ce09190613d5d565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612d7a57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612d719190613d5d565b60405180910390fd5b505b505050505050565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b03612dea57806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401612de19190613d5d565b60405180910390fd5b80612e177f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612d84565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051612e859190614927565b600060405180830381855af49150503d8060008114612ec0576040519150601f19603f3d011682016040523d82523d6000602084013e612ec5565b606091505b5091509150612ed5858383613300565b9250505092915050565b6000341115612f1a576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612f26612050565b60000160089054906101000a900460ff16905090565b6000612f466118b9565b90508151835114612f9257825182516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401612f89929190614295565b60405180910390fd5b6000612f9c612254565b905060005b84518110156131ba576000612fbf8287611c9090919063ffffffff16565b90506000612fd68387611c9090919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161461310957600085600001600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156130ae57898183856040517f03dee4c50000000000000000000000000000000000000000000000000000000081526004016130a5949392919061493e565b60405180910390fd5b81810386600001600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146131a7578085600001600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461319f91906141b3565b925050819055505b5050806131b390614079565b9050612fa1565b5060018451036132795760006131da600086611c9090919063ffffffff16565b905060006131f2600086611c9090919063ffffffff16565b90508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62858560405161326a929190614295565b60405180910390a450506132f8565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516132ef929190614983565b60405180910390a45b505050505050565b606082613315576133108261338f565b613387565b6000825114801561333d575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561337f57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016133769190613d5d565b60405180910390fd5b819050613388565b5b9392505050565b6000815111156133a25780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613413826133e8565b9050919050565b61342381613408565b811461342e57600080fd5b50565b6000813590506134408161341a565b92915050565b6000819050919050565b61345981613446565b811461346457600080fd5b50565b60008135905061347681613450565b92915050565b60008060408385031215613493576134926133de565b5b60006134a185828601613431565b92505060206134b285828601613467565b9150509250929050565b6134c581613446565b82525050565b60006020820190506134e060008301846134bc565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61351b816134e6565b811461352657600080fd5b50565b60008135905061353881613512565b92915050565b600060208284031215613554576135536133de565b5b600061356284828501613529565b91505092915050565b60008115159050919050565b6135808161356b565b82525050565b600060208201905061359b6000830184613577565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6135f4826135ab565b810181811067ffffffffffffffff82111715613613576136126135bc565b5b80604052505050565b60006136266133d4565b905061363282826135eb565b919050565b600067ffffffffffffffff821115613652576136516135bc565b5b61365b826135ab565b9050602081019050919050565b82818337600083830152505050565b600061368a61368584613637565b61361c565b9050828152602081018484840111156136a6576136a56135a6565b5b6136b1848285613668565b509392505050565b600082601f8301126136ce576136cd6135a1565b5b81356136de848260208601613677565b91505092915050565b6000602082840312156136fd576136fc6133de565b5b600082013567ffffffffffffffff81111561371b5761371a6133e3565b5b613727848285016136b9565b91505092915050565b600067ffffffffffffffff82111561374b5761374a6135bc565b5b602082029050602081019050919050565b600080fd5b600061377461376f84613730565b61361c565b905080838252602082019050602084028301858111156137975761379661375c565b5b835b818110156137c057806137ac8882613431565b845260208401935050602081019050613799565b5050509392505050565b600082601f8301126137df576137de6135a1565b5b81356137ef848260208601613761565b91505092915050565b600067ffffffffffffffff821115613813576138126135bc565b5b602082029050602081019050919050565b6000613837613832846137f8565b61361c565b9050808382526020820190506020840283018581111561385a5761385961375c565b5b835b81811015613883578061386f8882613467565b84526020840193505060208101905061385c565b5050509392505050565b600082601f8301126138a2576138a16135a1565b5b81356138b2848260208601613824565b91505092915050565b600080604083850312156138d2576138d16133de565b5b600083013567ffffffffffffffff8111156138f0576138ef6133e3565b5b6138fc858286016137ca565b925050602083013567ffffffffffffffff81111561391d5761391c6133e3565b5b6139298582860161388d565b9150509250929050565b600060208284031215613949576139486133de565b5b600061395784828501613467565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561399a57808201518184015260208101905061397f565b60008484015250505050565b60006139b182613960565b6139bb818561396b565b93506139cb81856020860161397c565b6139d4816135ab565b840191505092915050565b600060208201905081810360008301526139f981846139a6565b905092915050565b600060208284031215613a1757613a166133de565b5b6000613a2584828501613431565b91505092915050565b60008060408385031215613a4557613a446133de565b5b6000613a5385828601613467565b9250506020613a6485828601613467565b9150509250929050565b600067ffffffffffffffff821115613a8957613a886135bc565b5b613a92826135ab565b9050602081019050919050565b6000613ab2613aad84613a6e565b61361c565b905082815260208101848484011115613ace57613acd6135a6565b5b613ad9848285613668565b509392505050565b600082601f830112613af657613af56135a1565b5b8135613b06848260208601613a9f565b91505092915050565b600080600080600060a08688031215613b2b57613b2a6133de565b5b6000613b3988828901613431565b9550506020613b4a88828901613431565b945050604086013567ffffffffffffffff811115613b6b57613b6a6133e3565b5b613b778882890161388d565b935050606086013567ffffffffffffffff811115613b9857613b976133e3565b5b613ba48882890161388d565b925050608086013567ffffffffffffffff811115613bc557613bc46133e3565b5b613bd188828901613ae1565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613c1381613446565b82525050565b6000613c258383613c0a565b60208301905092915050565b6000602082019050919050565b6000613c4982613bde565b613c538185613be9565b9350613c5e83613bfa565b8060005b83811015613c8f578151613c768882613c19565b9750613c8183613c31565b925050600181019050613c62565b5085935050505092915050565b60006020820190508181036000830152613cb68184613c3e565b905092915050565b60008060408385031215613cd557613cd46133de565b5b6000613ce385828601613431565b925050602083013567ffffffffffffffff811115613d0457613d036133e3565b5b613d1085828601613ae1565b9150509250929050565b6000819050919050565b613d2d81613d1a565b82525050565b6000602082019050613d486000830184613d24565b92915050565b613d5781613408565b82525050565b6000602082019050613d726000830184613d4e565b92915050565b60008060408385031215613d8f57613d8e6133de565b5b6000613d9d85828601613467565b9250506020613dae85828601613431565b9150509250929050565b613dc18161356b565b8114613dcc57600080fd5b50565b600081359050613dde81613db8565b92915050565b60008060408385031215613dfb57613dfa6133de565b5b6000613e0985828601613431565b9250506020613e1a85828601613dcf565b9150509250929050565b600080600060608486031215613e3d57613e3c6133de565b5b6000613e4b86828701613431565b935050602084013567ffffffffffffffff811115613e6c57613e6b6133e3565b5b613e78868287016137ca565b925050604084013567ffffffffffffffff811115613e9957613e986133e3565b5b613ea5868287016136b9565b9150509250925092565b60008060408385031215613ec657613ec56133de565b5b6000613ed485828601613431565b9250506020613ee585828601613431565b9150509250929050565b600080600080600060a08688031215613f0b57613f0a6133de565b5b6000613f1988828901613431565b9550506020613f2a88828901613431565b9450506040613f3b88828901613467565b9350506060613f4c88828901613467565b925050608086013567ffffffffffffffff811115613f6d57613f6c6133e3565b5b613f7988828901613ae1565b9150509295509295909350565b7f6e6f742061646d696e0000000000000000000000000000000000000000000000600082015250565b6000613fbc60098361396b565b9150613fc782613f86565b602082019050919050565b60006020820190508181036000830152613feb81613faf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506140366000830185613d4e565b61404360208301846134bc565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061408482613446565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036140b6576140b561404a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061410857607f821691505b60208210810361411b5761411a6140c1565b5b50919050565b7f73656e646572206973206e6f74206f776e657220666f72207468697320746f6b60008201527f656e000000000000000000000000000000000000000000000000000000000000602082015250565b600061417d60228361396b565b915061418882614121565b604082019050919050565b600060208201905081810360008301526141ac81614170565b9050919050565b60006141be82613446565b91506141c983613446565b92508282019050808211156141e1576141e061404a565b5b92915050565b7f6e657720737570706c7920776f756c6420657863656564206d61780000000000600082015250565b600061421d601b8361396b565b9150614228826141e7565b602082019050919050565b6000602082019050818103600083015261424c81614210565b9050919050565b60008151905061426281613db8565b92915050565b60006020828403121561427e5761427d6133de565b5b600061428c84828501614253565b91505092915050565b60006040820190506142aa60008301856134bc565b6142b760208301846134bc565b9392505050565b7f30206e6f7420616c6c6f77656400000000000000000000000000000000000000600082015250565b60006142f4600d8361396b565b91506142ff826142be565b602082019050919050565b60006020820190508181036000830152614323816142e7565b9050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b600061436d6143686143638461432a565b614348565b614334565b9050919050565b61437d81614352565b82525050565b60006020820190506143986000830184614374565b92915050565b7f6e6577206d6178696d756d20737570706c7920776f756c64206578636565642060008201527f3130303000000000000000000000000000000000000000000000000000000000602082015250565b60006143fa60248361396b565b91506144058261439e565b604082019050919050565b60006020820190508181036000830152614429816143ed565b9050919050565b7f617274697374206e6f742073657420666f72207468697320746f6b656e000000600082015250565b6000614466601d8361396b565b915061447182614430565b602082019050919050565b6000602082019050818103600083015261449581614459565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026144fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826144c1565b61450886836144c1565b95508019841693508086168417925050509392505050565b600061453b61453661453184613446565b614348565b613446565b9050919050565b6000819050919050565b61455583614520565b61456961456182614542565b8484546144ce565b825550505050565b600090565b61457e614571565b61458981848461454c565b505050565b5b818110156145ad576145a2600082614576565b60018101905061458f565b5050565b601f8211156145f2576145c38161449c565b6145cc846144b1565b810160208510156145db578190505b6145ef6145e7856144b1565b83018261458e565b50505b505050565b600082821c905092915050565b6000614615600019846008026145f7565b1980831691505092915050565b600061462e8383614604565b9150826002028217905092915050565b61464782613960565b67ffffffffffffffff8111156146605761465f6135bc565b5b61466a82546140f0565b6146758282856145b1565b600060209050601f8311600181146146a85760008415614696578287015190505b6146a08582614622565b865550614708565b601f1984166146b68661449c565b60005b828110156146de578489015182556001820191506020850194506020810190506146b9565b868310156146fb57848901516146f7601f891682614604565b8355505b6001600288020188555050505b505050505050565b60006040820190506147256000830185613d4e565b6147326020830184613d4e565b9392505050565b61474281613d1a565b811461474d57600080fd5b50565b60008151905061475f81614739565b92915050565b60006020828403121561477b5761477a6133de565b5b600061478984828501614750565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006147b982614792565b6147c3818561479d565b93506147d381856020860161397c565b6147dc816135ab565b840191505092915050565b600060a0820190506147fc6000830188613d4e565b6148096020830187613d4e565b61481660408301866134bc565b61482360608301856134bc565b818103608083015261483581846147ae565b90509695505050505050565b60008151905061485081613512565b92915050565b60006020828403121561486c5761486b6133de565b5b600061487a84828501614841565b91505092915050565b600060a0820190506148986000830188613d4e565b6148a56020830187613d4e565b81810360408301526148b78186613c3e565b905081810360608301526148cb8185613c3e565b905081810360808301526148df81846147ae565b90509695505050505050565b600081905092915050565b600061490182614792565b61490b81856148eb565b935061491b81856020860161397c565b80840191505092915050565b600061493382846148f6565b915081905092915050565b60006080820190506149536000830187613d4e565b61496060208301866134bc565b61496d60408301856134bc565b61497a60608301846134bc565b95945050505050565b6000604082019050818103600083015261499d8185613c3e565b905081810360208301526149b18184613c3e565b9050939250505056fea2646970667358221220957aa2b07f1769f8bd7664da736d9e956bf37f4cd52508d8767fc79b8f852bd964736f6c63430008140033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP CALLVALUE DUP1 ISZERO PUSH2 0x43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH2 0x49F0 PUSH2 0x6D PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x1CA6 ADD MSTORE DUP2 DUP2 PUSH2 0x1CFB ADD MSTORE PUSH2 0x1EB6 ADD MSTORE PUSH2 0x49F0 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x52D1902D GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xBB625509 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE985E9C5 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x6CC JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x709 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x732 JUMPI DUP1 PUSH4 0xFBE0A892 EQ PUSH2 0x75B JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0xBB625509 EQ PUSH2 0x614 JUMPI DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x63D JUMPI DUP1 PUSH4 0xC36497E5 EQ PUSH2 0x67A JUMPI DUP1 PUSH4 0xD00E40CE EQ PUSH2 0x6A3 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x56C JUMPI DUP1 PUSH4 0x9ECA4B7B EQ PUSH2 0x597 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x5C0 JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x5E9 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x52D1902D EQ PUSH2 0x4C4 JUMPI DUP1 PUSH4 0x70480275 EQ PUSH2 0x4EF JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x518 JUMPI DUP1 PUSH4 0x831FFD05 EQ PUSH2 0x52F JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x429B62E5 GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x429B62E5 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x42E JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x46B JUMPI DUP1 PUSH4 0x4F558E79 EQ PUSH2 0x487 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD EQ PUSH2 0x337 JUMPI DUP1 PUSH4 0x1B2EF1CA EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0x24D7806C EQ PUSH2 0x38B JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x3C8 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x6DD0419 GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x6DD0419 EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0x77D9234 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x1785F53C EQ PUSH2 0x30E JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0x2FE5305 EQ PUSH2 0x256 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x347C JUMP JUMPDEST PUSH2 0x798 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x210 SWAP2 SWAP1 PUSH2 0x34CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23B SWAP2 SWAP1 PUSH2 0x353E JUMP JUMPDEST PUSH2 0x801 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24D SWAP2 SWAP1 PUSH2 0x3586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x278 SWAP2 SWAP1 PUSH2 0x36E7 JUMP JUMPDEST PUSH2 0x87B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x347C JUMP JUMPDEST PUSH2 0x88F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CA SWAP2 SWAP1 PUSH2 0x38BB JUMP JUMPDEST PUSH2 0x92A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F3 SWAP2 SWAP1 PUSH2 0x3933 JUMP JUMPDEST PUSH2 0x9EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x39DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x335 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x330 SWAP2 SWAP1 PUSH2 0x3A01 JUMP JUMPDEST PUSH2 0xA92 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x34C PUSH2 0xAEB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x359 SWAP2 SWAP1 PUSH2 0x34CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x389 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x384 SWAP2 SWAP1 PUSH2 0x3A2E JUMP JUMPDEST PUSH2 0xB03 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x397 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3AD SWAP2 SWAP1 PUSH2 0x3A01 JUMP JUMPDEST PUSH2 0xC5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3BF SWAP2 SWAP1 PUSH2 0x3586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3EA SWAP2 SWAP1 PUSH2 0x3B0F JUMP JUMPDEST PUSH2 0xCBB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x418 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x413 SWAP2 SWAP1 PUSH2 0x3A01 JUMP JUMPDEST PUSH2 0xD88 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x425 SWAP2 SWAP1 PUSH2 0x3586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x455 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x450 SWAP2 SWAP1 PUSH2 0x38BB JUMP JUMPDEST PUSH2 0xDA8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x462 SWAP2 SWAP1 PUSH2 0x3C9C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x485 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x480 SWAP2 SWAP1 PUSH2 0x3CBE JUMP JUMPDEST PUSH2 0xEB7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4A9 SWAP2 SWAP1 PUSH2 0x3933 JUMP JUMPDEST PUSH2 0xED6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4BB SWAP2 SWAP1 PUSH2 0x3586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D9 PUSH2 0xEEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E6 SWAP2 SWAP1 PUSH2 0x3D33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x516 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x511 SWAP2 SWAP1 PUSH2 0x3A01 JUMP JUMPDEST PUSH2 0xF1D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x524 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x52D PUSH2 0xF7F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x556 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x551 SWAP2 SWAP1 PUSH2 0x3933 JUMP JUMPDEST PUSH2 0xF93 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x563 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x581 PUSH2 0xFC6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x58E SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5BE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B9 SWAP2 SWAP1 PUSH2 0x3D78 JUMP JUMPDEST PUSH2 0xFFE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5E2 SWAP2 SWAP1 PUSH2 0x3DE4 JUMP JUMPDEST PUSH2 0x1122 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5FE PUSH2 0x1130 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x60B SWAP2 SWAP1 PUSH2 0x39DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x620 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x63B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x636 SWAP2 SWAP1 PUSH2 0x3E24 JUMP JUMPDEST PUSH2 0x1169 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x664 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x65F SWAP2 SWAP1 PUSH2 0x3933 JUMP JUMPDEST PUSH2 0x13A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x671 SWAP2 SWAP1 PUSH2 0x34CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x686 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x69C SWAP2 SWAP1 PUSH2 0x3A2E JUMP JUMPDEST PUSH2 0x13CF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6C5 SWAP2 SWAP1 PUSH2 0x3A2E JUMP JUMPDEST PUSH2 0x14F7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6EE SWAP2 SWAP1 PUSH2 0x3EAF JUMP JUMPDEST PUSH2 0x16DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x700 SWAP2 SWAP1 PUSH2 0x3586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x730 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x72B SWAP2 SWAP1 PUSH2 0x3EEF JUMP JUMPDEST PUSH2 0x174E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x759 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x754 SWAP2 SWAP1 PUSH2 0x3A01 JUMP JUMPDEST PUSH2 0x181B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x767 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x782 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x77D SWAP2 SWAP1 PUSH2 0x3933 JUMP JUMPDEST PUSH2 0x18A1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78F SWAP2 SWAP1 PUSH2 0x34CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7A3 PUSH2 0x18B9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x2A55205A00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x874 JUMPI POP PUSH2 0x873 DUP3 PUSH2 0x18E1 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x883 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0x88C DUP2 PUSH2 0x1A4A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x91A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x911 SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x926 DUP3 DUP3 PUSH1 0x1 PUSH2 0x1A6C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x9EA JUMPI ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6DD0419 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x965 JUMPI PUSH2 0x964 PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x980 JUMPI PUSH2 0x97F PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A5 SWAP3 SWAP2 SWAP1 PUSH2 0x4021 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0x9E2 SWAP1 PUSH2 0x4079 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x92D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x9FB PUSH2 0x18B9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xA0C SWAP1 PUSH2 0x40F0 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA38 SWAP1 PUSH2 0x40F0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA85 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA5A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA85 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA68 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA9A PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAF6 PUSH2 0x1B13 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD SLOAD SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBA4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB9B SWAP1 PUSH2 0x4193 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 PUSH2 0xBC2 DUP5 PUSH2 0x13A4 JUMP JUMPDEST PUSH2 0xBCC SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST GT ISZERO PUSH2 0xC0D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC04 SWAP1 PUSH2 0x4233 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC5B PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1B3B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 ISZERO ISZERO PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x24D7806C CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCF4 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD35 SWAP2 SWAP1 PUSH2 0x4268 JUMP JUMPDEST PUSH2 0xD74 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD6B SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD81 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1BD4 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xDF4 JUMPI DUP2 MLOAD DUP4 MLOAD PUSH1 0x40 MLOAD PUSH32 0x5B05999100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDEB SWAP3 SWAP2 SWAP1 PUSH2 0x4295 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE11 JUMPI PUSH2 0xE10 PUSH2 0x35BC JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE3F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xEAC JUMPI PUSH2 0xE7C PUSH2 0xE64 DUP3 DUP8 PUSH2 0x1C7C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xE77 DUP4 DUP8 PUSH2 0x1C90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x798 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xE8F JUMPI PUSH2 0xE8E PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 PUSH2 0xEA5 SWAP1 PUSH2 0x4079 JUMP JUMPDEST SWAP1 POP PUSH2 0xE45 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xEBF PUSH2 0x1CA4 JUMP JUMPDEST PUSH2 0xEC8 DUP3 PUSH2 0x1D8A JUMP JUMPDEST PUSH2 0xED2 DUP3 DUP3 PUSH2 0x1D95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xEE2 DUP4 PUSH2 0x13A4 JUMP JUMPDEST GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEF4 PUSH2 0x1EB4 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xF25 PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0xF87 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0xF91 PUSH1 0x0 PUSH2 0x1F3B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xFD1 PUSH2 0x2012 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1089 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1080 SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SUB PUSH2 0x10CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10C3 SWAP1 PUSH2 0x430A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x112C DUP3 DUP3 PUSH2 0x203A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x352E302E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1173 PUSH2 0x2050 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x11C1 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x11F6 JUMPI POP PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x1204 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x123B JUMPI PUSH1 0x40 MLOAD PUSH32 0xF92EE8A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 ISZERO PUSH2 0x128B JUMPI PUSH1 0x1 DUP6 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x1293 PUSH2 0x2078 JUMP JUMPDEST PUSH2 0x129C DUP9 PUSH2 0x2082 JUMP JUMPDEST PUSH2 0x12A4 PUSH2 0x2096 JUMP JUMPDEST PUSH2 0x12AD DUP7 PUSH2 0x1A4A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x133D JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x12D1 JUMPI PUSH2 0x12D0 PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x1335 SWAP1 PUSH2 0x4079 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12B0 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x139A JUMPI PUSH1 0x0 DUP6 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x1391 SWAP2 SWAP1 PUSH2 0x4383 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13AF PUSH2 0x1B13 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x145A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1451 SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3E8 DUP2 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x147C SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST GT ISZERO PUSH2 0x14BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14B4 SWAP1 PUSH2 0x4410 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x14DC SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1582 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1579 SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1624 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x161B SWAP1 PUSH2 0x447C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 PUSH2 0x1642 DUP5 PUSH2 0x13A4 JUMP JUMPDEST PUSH2 0x164C SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST GT ISZERO PUSH2 0x168D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1684 SWAP1 PUSH2 0x4233 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x16DB PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1B3B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x173B JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x1748 JUMP JUMPDEST PUSH2 0x1745 DUP4 DUP4 PUSH2 0x20A0 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x24D7806C CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1787 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17C8 SWAP2 SWAP1 PUSH2 0x4268 JUMP JUMPDEST PUSH2 0x1807 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17FE SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1814 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2142 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1823 PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1895 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x188C SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x189E DUP2 PUSH2 0x1F3B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x88BE536D5240C274A3B1D3A1BE54482FD9CAA294F08C62A7CDE569F49A3C4500 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x19AC JUMPI POP PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x19BC JUMPI POP PUSH2 0x19BB DUP3 PUSH2 0x21EA JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19CB PUSH2 0x2254 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x19E9 PUSH2 0xFC6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1A48 JUMPI PUSH2 0x1A0C PUSH2 0x2254 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A3F SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A54 PUSH2 0x18B9 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 PUSH1 0x2 ADD SWAP1 DUP2 PUSH2 0x1A67 SWAP2 SWAP1 PUSH2 0x463E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1ADE JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1A8351400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AD5 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1AEB DUP5 DUP5 PUSH2 0x225C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1B0C DUP6 PUSH1 0x0 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x228C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4A593662EE04D27B6A00EBB31BE7FE0C102C2ADE82A7C5D764F2DF05DC4E2800 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1BAD JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BA4 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1BBA DUP6 DUP6 PUSH2 0x225C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1BCC PUSH1 0x0 DUP8 DUP5 DUP5 DUP8 PUSH2 0x228C JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BDE PUSH2 0x2254 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1C23 JUMPI POP PUSH2 0x1C21 DUP7 DUP3 PUSH2 0x16DF JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1C67 JUMPI DUP1 DUP7 PUSH1 0x40 MLOAD PUSH32 0xE237D92200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C5E SWAP3 SWAP2 SWAP1 PUSH2 0x4710 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C74 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x233E JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MUL PUSH1 0x20 DUP5 ADD ADD MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MUL PUSH1 0x20 DUP5 ADD ADD MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1D51 JUMPI POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1D38 PUSH2 0x2436 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1D88 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE07C8DBA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x1D92 PUSH2 0x19C3 JUMP JUMPDEST POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1DFD JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DFA SWAP2 SWAP1 PUSH2 0x4765 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1E3E JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x4C9C8CE300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E35 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL DUP2 EQ PUSH2 0x1EA5 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xAA1D49A400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E9C SWAP2 SWAP1 PUSH2 0x3D33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1EAF DUP4 DUP4 PUSH2 0x248D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1F39 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE07C8DBA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F45 PUSH2 0x2012 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x204C PUSH2 0x2045 PUSH2 0x2254 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x2500 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2080 PUSH2 0x267F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x208A PUSH2 0x267F JUMP JUMPDEST PUSH2 0x2093 DUP2 PUSH2 0x26BF JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x209E PUSH2 0x267F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x20AB PUSH2 0x18B9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x214C PUSH2 0x2254 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2191 JUMPI POP PUSH2 0x218F DUP7 DUP3 PUSH2 0x16DF JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x21D5 JUMPI DUP1 DUP7 PUSH1 0x40 MLOAD PUSH32 0xE237D92200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21CC SWAP3 SWAP2 SWAP1 PUSH2 0x4710 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x21E2 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x2745 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH1 0x1 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 MSTORE SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2298 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2850 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2337 JUMPI PUSH1 0x0 PUSH2 0x22D6 PUSH2 0x2254 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP5 MLOAD SUB PUSH2 0x2326 JUMPI PUSH1 0x0 PUSH2 0x22F7 PUSH1 0x0 DUP7 PUSH2 0x1C90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x230F PUSH1 0x0 DUP7 PUSH2 0x1C90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x231F DUP4 DUP10 DUP10 DUP6 DUP6 DUP10 PUSH2 0x2A1C JUMP JUMPDEST POP POP PUSH2 0x2335 JUMP JUMPDEST PUSH2 0x2334 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2BD0 JUMP JUMPDEST JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x23B0 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23A7 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2422 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1A8351400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2419 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x242F DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x228C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2464 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x2D84 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2496 DUP3 PUSH2 0x2D8E JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x24F3 JUMPI PUSH2 0x24ED DUP3 DUP3 PUSH2 0x2E5B JUMP JUMPDEST POP PUSH2 0x24FC JUMP JUMPDEST PUSH2 0x24FB PUSH2 0x2EDF JUMP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x250A PUSH2 0x18B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x257E JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xCED3E10000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2575 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP5 PUSH1 0x40 MLOAD PUSH2 0x2671 SWAP2 SWAP1 PUSH2 0x3586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x2687 PUSH2 0x2F1C JUMP JUMPDEST PUSH2 0x26BD JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7E6BCF800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x26C7 PUSH2 0x267F JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2739 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2730 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2742 DUP2 PUSH2 0x1F3B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x27B7 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27AE SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2829 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1A8351400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2820 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2836 DUP6 DUP6 PUSH2 0x225C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2847 DUP8 DUP8 DUP5 DUP5 DUP8 PUSH2 0x228C JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x285A PUSH2 0x1B13 JUMP JUMPDEST SWAP1 POP PUSH2 0x2868 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2F3C JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x294C JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x292E JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x28BE JUMPI PUSH2 0x28BD PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x28E2 JUMPI PUSH2 0x28E1 PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2907 SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP4 PUSH2 0x291A SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST SWAP3 POP POP DUP1 PUSH2 0x2927 SWAP1 PUSH2 0x4079 JUMP JUMPDEST SWAP1 POP PUSH2 0x28A0 JUMP JUMPDEST POP DUP1 DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2943 SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2A15 JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2A00 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x29A2 JUMPI PUSH2 0x29A1 PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x29C6 JUMPI PUSH2 0x29C5 PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP4 ADD SWAP3 POP POP DUP1 PUSH2 0x29F9 SWAP1 PUSH2 0x4079 JUMP JUMPDEST SWAP1 POP PUSH2 0x2984 JUMP JUMPDEST POP DUP1 DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x2BC8 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF23A6E61 DUP8 DUP8 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A7D SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2AB9 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2AB6 SWAP2 SWAP1 PUSH2 0x4856 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2B3D JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2AE9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2AEE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x2B35 JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2C SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x2BC6 JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2BBD SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x2D7C JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBC197C81 DUP8 DUP8 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C31 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4883 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2C6D JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C6A SWAP2 SWAP1 PUSH2 0x4856 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2CF1 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2C9D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2CA2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x2CE9 JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2CE0 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x2D7A JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D71 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE SUB PUSH2 0x2DEA JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x4C9C8CE300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DE1 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x2E17 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x2D84 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x2E85 SWAP2 SWAP1 PUSH2 0x4927 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2EC0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2ED5 DUP6 DUP4 DUP4 PUSH2 0x3300 JUMP JUMPDEST SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT ISZERO PUSH2 0x2F1A JUMPI PUSH1 0x40 MLOAD PUSH32 0xB398979F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F26 PUSH2 0x2050 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F46 PUSH2 0x18B9 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x2F92 JUMPI DUP3 MLOAD DUP3 MLOAD PUSH1 0x40 MLOAD PUSH32 0x5B05999100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F89 SWAP3 SWAP2 SWAP1 PUSH2 0x4295 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2F9C PUSH2 0x2254 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x31BA JUMPI PUSH1 0x0 PUSH2 0x2FBF DUP3 DUP8 PUSH2 0x1C90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2FD6 DUP4 DUP8 PUSH2 0x1C90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3109 JUMPI PUSH1 0x0 DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x30AE JUMPI DUP10 DUP2 DUP4 DUP6 PUSH1 0x40 MLOAD PUSH32 0x3DEE4C500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30A5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x493E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x31A7 JUMPI DUP1 DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x319F SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST POP POP DUP1 PUSH2 0x31B3 SWAP1 PUSH2 0x4079 JUMP JUMPDEST SWAP1 POP PUSH2 0x2FA1 JUMP JUMPDEST POP PUSH1 0x1 DUP5 MLOAD SUB PUSH2 0x3279 JUMPI PUSH1 0x0 PUSH2 0x31DA PUSH1 0x0 DUP7 PUSH2 0x1C90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x31F2 PUSH1 0x0 DUP7 PUSH2 0x1C90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x326A SWAP3 SWAP2 SWAP1 PUSH2 0x4295 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH2 0x32F8 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x32EF SWAP3 SWAP2 SWAP1 PUSH2 0x4983 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x3315 JUMPI PUSH2 0x3310 DUP3 PUSH2 0x338F JUMP JUMPDEST PUSH2 0x3387 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD EQ DUP1 ISZERO PUSH2 0x333D JUMPI POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x337F JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3376 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP PUSH2 0x3388 JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x33A2 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3413 DUP3 PUSH2 0x33E8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3423 DUP2 PUSH2 0x3408 JUMP JUMPDEST DUP2 EQ PUSH2 0x342E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3440 DUP2 PUSH2 0x341A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3459 DUP2 PUSH2 0x3446 JUMP JUMPDEST DUP2 EQ PUSH2 0x3464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3476 DUP2 PUSH2 0x3450 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3493 JUMPI PUSH2 0x3492 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34A1 DUP6 DUP3 DUP7 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x34B2 DUP6 DUP3 DUP7 ADD PUSH2 0x3467 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x34C5 DUP2 PUSH2 0x3446 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x34E0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x34BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x351B DUP2 PUSH2 0x34E6 JUMP JUMPDEST DUP2 EQ PUSH2 0x3526 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3538 DUP2 PUSH2 0x3512 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3554 JUMPI PUSH2 0x3553 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3562 DUP5 DUP3 DUP6 ADD PUSH2 0x3529 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3580 DUP2 PUSH2 0x356B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x359B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3577 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x35F4 DUP3 PUSH2 0x35AB JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3613 JUMPI PUSH2 0x3612 PUSH2 0x35BC JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3626 PUSH2 0x33D4 JUMP JUMPDEST SWAP1 POP PUSH2 0x3632 DUP3 DUP3 PUSH2 0x35EB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3652 JUMPI PUSH2 0x3651 PUSH2 0x35BC JUMP JUMPDEST JUMPDEST PUSH2 0x365B DUP3 PUSH2 0x35AB JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x368A PUSH2 0x3685 DUP5 PUSH2 0x3637 JUMP JUMPDEST PUSH2 0x361C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x36A6 JUMPI PUSH2 0x36A5 PUSH2 0x35A6 JUMP JUMPDEST JUMPDEST PUSH2 0x36B1 DUP5 DUP3 DUP6 PUSH2 0x3668 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x36CE JUMPI PUSH2 0x36CD PUSH2 0x35A1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x36DE DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3677 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x36FD JUMPI PUSH2 0x36FC PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x371B JUMPI PUSH2 0x371A PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3727 DUP5 DUP3 DUP6 ADD PUSH2 0x36B9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x374B JUMPI PUSH2 0x374A PUSH2 0x35BC JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3774 PUSH2 0x376F DUP5 PUSH2 0x3730 JUMP JUMPDEST PUSH2 0x361C JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x3797 JUMPI PUSH2 0x3796 PUSH2 0x375C JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x37C0 JUMPI DUP1 PUSH2 0x37AC DUP9 DUP3 PUSH2 0x3431 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3799 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x37DF JUMPI PUSH2 0x37DE PUSH2 0x35A1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x37EF DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3761 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3813 JUMPI PUSH2 0x3812 PUSH2 0x35BC JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3837 PUSH2 0x3832 DUP5 PUSH2 0x37F8 JUMP JUMPDEST PUSH2 0x361C JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x385A JUMPI PUSH2 0x3859 PUSH2 0x375C JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3883 JUMPI DUP1 PUSH2 0x386F DUP9 DUP3 PUSH2 0x3467 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x385C JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x38A2 JUMPI PUSH2 0x38A1 PUSH2 0x35A1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x38B2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3824 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38D2 JUMPI PUSH2 0x38D1 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x38F0 JUMPI PUSH2 0x38EF PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x38FC DUP6 DUP3 DUP7 ADD PUSH2 0x37CA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x391D JUMPI PUSH2 0x391C PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3929 DUP6 DUP3 DUP7 ADD PUSH2 0x388D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3949 JUMPI PUSH2 0x3948 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3957 DUP5 DUP3 DUP6 ADD PUSH2 0x3467 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x399A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x397F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39B1 DUP3 PUSH2 0x3960 JUMP JUMPDEST PUSH2 0x39BB DUP2 DUP6 PUSH2 0x396B JUMP JUMPDEST SWAP4 POP PUSH2 0x39CB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x397C JUMP JUMPDEST PUSH2 0x39D4 DUP2 PUSH2 0x35AB JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39F9 DUP2 DUP5 PUSH2 0x39A6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A17 JUMPI PUSH2 0x3A16 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A25 DUP5 DUP3 DUP6 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A45 JUMPI PUSH2 0x3A44 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A53 DUP6 DUP3 DUP7 ADD PUSH2 0x3467 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3A64 DUP6 DUP3 DUP7 ADD PUSH2 0x3467 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3A89 JUMPI PUSH2 0x3A88 PUSH2 0x35BC JUMP JUMPDEST JUMPDEST PUSH2 0x3A92 DUP3 PUSH2 0x35AB JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AB2 PUSH2 0x3AAD DUP5 PUSH2 0x3A6E JUMP JUMPDEST PUSH2 0x361C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x3ACE JUMPI PUSH2 0x3ACD PUSH2 0x35A6 JUMP JUMPDEST JUMPDEST PUSH2 0x3AD9 DUP5 DUP3 DUP6 PUSH2 0x3668 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3AF6 JUMPI PUSH2 0x3AF5 PUSH2 0x35A1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3B06 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3A9F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3B2B JUMPI PUSH2 0x3B2A PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3B39 DUP9 DUP3 DUP10 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x3B4A DUP9 DUP3 DUP10 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B6B JUMPI PUSH2 0x3B6A PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3B77 DUP9 DUP3 DUP10 ADD PUSH2 0x388D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B98 JUMPI PUSH2 0x3B97 PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3BA4 DUP9 DUP3 DUP10 ADD PUSH2 0x388D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3BC5 JUMPI PUSH2 0x3BC4 PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3BD1 DUP9 DUP3 DUP10 ADD PUSH2 0x3AE1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3C13 DUP2 PUSH2 0x3446 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C25 DUP4 DUP4 PUSH2 0x3C0A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C49 DUP3 PUSH2 0x3BDE JUMP JUMPDEST PUSH2 0x3C53 DUP2 DUP6 PUSH2 0x3BE9 JUMP JUMPDEST SWAP4 POP PUSH2 0x3C5E DUP4 PUSH2 0x3BFA JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3C8F JUMPI DUP2 MLOAD PUSH2 0x3C76 DUP9 DUP3 PUSH2 0x3C19 JUMP JUMPDEST SWAP8 POP PUSH2 0x3C81 DUP4 PUSH2 0x3C31 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3C62 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CB6 DUP2 DUP5 PUSH2 0x3C3E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3CD5 JUMPI PUSH2 0x3CD4 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3CE3 DUP6 DUP3 DUP7 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D04 JUMPI PUSH2 0x3D03 PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3D10 DUP6 DUP3 DUP7 ADD PUSH2 0x3AE1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3D2D DUP2 PUSH2 0x3D1A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3D48 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3D24 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3D57 DUP2 PUSH2 0x3408 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3D72 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3D4E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3D8F JUMPI PUSH2 0x3D8E PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3D9D DUP6 DUP3 DUP7 ADD PUSH2 0x3467 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3DAE DUP6 DUP3 DUP7 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x3DC1 DUP2 PUSH2 0x356B JUMP JUMPDEST DUP2 EQ PUSH2 0x3DCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3DDE DUP2 PUSH2 0x3DB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3DFB JUMPI PUSH2 0x3DFA PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3E09 DUP6 DUP3 DUP7 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3E1A DUP6 DUP3 DUP7 ADD PUSH2 0x3DCF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3E3D JUMPI PUSH2 0x3E3C PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3E4B DUP7 DUP3 DUP8 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E6C JUMPI PUSH2 0x3E6B PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3E78 DUP7 DUP3 DUP8 ADD PUSH2 0x37CA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E99 JUMPI PUSH2 0x3E98 PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3EA5 DUP7 DUP3 DUP8 ADD PUSH2 0x36B9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3EC6 JUMPI PUSH2 0x3EC5 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3ED4 DUP6 DUP3 DUP7 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3EE5 DUP6 DUP3 DUP7 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3F0B JUMPI PUSH2 0x3F0A PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F19 DUP9 DUP3 DUP10 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x3F2A DUP9 DUP3 DUP10 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x3F3B DUP9 DUP3 DUP10 ADD PUSH2 0x3467 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x3F4C DUP9 DUP3 DUP10 ADD PUSH2 0x3467 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F6D JUMPI PUSH2 0x3F6C PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3F79 DUP9 DUP3 DUP10 ADD PUSH2 0x3AE1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH32 0x6E6F742061646D696E0000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FBC PUSH1 0x9 DUP4 PUSH2 0x396B JUMP JUMPDEST SWAP2 POP PUSH2 0x3FC7 DUP3 PUSH2 0x3F86 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3FEB DUP2 PUSH2 0x3FAF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x4036 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3D4E JUMP JUMPDEST PUSH2 0x4043 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x34BC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4084 DUP3 PUSH2 0x3446 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x40B6 JUMPI PUSH2 0x40B5 PUSH2 0x404A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x4108 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x411B JUMPI PUSH2 0x411A PUSH2 0x40C1 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x73656E646572206973206E6F74206F776E657220666F72207468697320746F6B PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x656E000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x417D PUSH1 0x22 DUP4 PUSH2 0x396B JUMP JUMPDEST SWAP2 POP PUSH2 0x4188 DUP3 PUSH2 0x4121 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x41AC DUP2 PUSH2 0x4170 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41BE DUP3 PUSH2 0x3446 JUMP JUMPDEST SWAP2 POP PUSH2 0x41C9 DUP4 PUSH2 0x3446 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x41E1 JUMPI PUSH2 0x41E0 PUSH2 0x404A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x6E657720737570706C7920776F756C6420657863656564206D61780000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x421D PUSH1 0x1B DUP4 PUSH2 0x396B JUMP JUMPDEST SWAP2 POP PUSH2 0x4228 DUP3 PUSH2 0x41E7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x424C DUP2 PUSH2 0x4210 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4262 DUP2 PUSH2 0x3DB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x427E JUMPI PUSH2 0x427D PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x428C DUP5 DUP3 DUP6 ADD PUSH2 0x4253 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x42AA PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x34BC JUMP JUMPDEST PUSH2 0x42B7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x34BC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x30206E6F7420616C6C6F77656400000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42F4 PUSH1 0xD DUP4 PUSH2 0x396B JUMP JUMPDEST SWAP2 POP PUSH2 0x42FF DUP3 PUSH2 0x42BE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4323 DUP2 PUSH2 0x42E7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x436D PUSH2 0x4368 PUSH2 0x4363 DUP5 PUSH2 0x432A JUMP JUMPDEST PUSH2 0x4348 JUMP JUMPDEST PUSH2 0x4334 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x437D DUP2 PUSH2 0x4352 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4398 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4374 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x6E6577206D6178696D756D20737570706C7920776F756C642065786365656420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x3130303000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43FA PUSH1 0x24 DUP4 PUSH2 0x396B JUMP JUMPDEST SWAP2 POP PUSH2 0x4405 DUP3 PUSH2 0x439E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4429 DUP2 PUSH2 0x43ED JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x617274697374206E6F742073657420666F72207468697320746F6B656E000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4466 PUSH1 0x1D DUP4 PUSH2 0x396B JUMP JUMPDEST SWAP2 POP PUSH2 0x4471 DUP3 PUSH2 0x4430 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4495 DUP2 PUSH2 0x4459 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x44FE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x44C1 JUMP JUMPDEST PUSH2 0x4508 DUP7 DUP4 PUSH2 0x44C1 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x453B PUSH2 0x4536 PUSH2 0x4531 DUP5 PUSH2 0x3446 JUMP JUMPDEST PUSH2 0x4348 JUMP JUMPDEST PUSH2 0x3446 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4555 DUP4 PUSH2 0x4520 JUMP JUMPDEST PUSH2 0x4569 PUSH2 0x4561 DUP3 PUSH2 0x4542 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x44CE JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x457E PUSH2 0x4571 JUMP JUMPDEST PUSH2 0x4589 DUP2 DUP5 DUP5 PUSH2 0x454C JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x45AD JUMPI PUSH2 0x45A2 PUSH1 0x0 DUP3 PUSH2 0x4576 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x458F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x45F2 JUMPI PUSH2 0x45C3 DUP2 PUSH2 0x449C JUMP JUMPDEST PUSH2 0x45CC DUP5 PUSH2 0x44B1 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x45DB JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x45EF PUSH2 0x45E7 DUP6 PUSH2 0x44B1 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x458E JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4615 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x45F7 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x462E DUP4 DUP4 PUSH2 0x4604 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4647 DUP3 PUSH2 0x3960 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4660 JUMPI PUSH2 0x465F PUSH2 0x35BC JUMP JUMPDEST JUMPDEST PUSH2 0x466A DUP3 SLOAD PUSH2 0x40F0 JUMP JUMPDEST PUSH2 0x4675 DUP3 DUP3 DUP6 PUSH2 0x45B1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x46A8 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x4696 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x46A0 DUP6 DUP3 PUSH2 0x4622 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x4708 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x46B6 DUP7 PUSH2 0x449C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x46DE JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x46B9 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x46FB JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x46F7 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x4604 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x4725 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3D4E JUMP JUMPDEST PUSH2 0x4732 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3D4E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x4742 DUP2 PUSH2 0x3D1A JUMP JUMPDEST DUP2 EQ PUSH2 0x474D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x475F DUP2 PUSH2 0x4739 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x477B JUMPI PUSH2 0x477A PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4789 DUP5 DUP3 DUP6 ADD PUSH2 0x4750 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x47B9 DUP3 PUSH2 0x4792 JUMP JUMPDEST PUSH2 0x47C3 DUP2 DUP6 PUSH2 0x479D JUMP JUMPDEST SWAP4 POP PUSH2 0x47D3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x397C JUMP JUMPDEST PUSH2 0x47DC DUP2 PUSH2 0x35AB JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x47FC PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3D4E JUMP JUMPDEST PUSH2 0x4809 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3D4E JUMP JUMPDEST PUSH2 0x4816 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x34BC JUMP JUMPDEST PUSH2 0x4823 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x34BC JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x4835 DUP2 DUP5 PUSH2 0x47AE JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4850 DUP2 PUSH2 0x3512 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x486C JUMPI PUSH2 0x486B PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x487A DUP5 DUP3 DUP6 ADD PUSH2 0x4841 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x4898 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3D4E JUMP JUMPDEST PUSH2 0x48A5 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3D4E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x48B7 DUP2 DUP7 PUSH2 0x3C3E JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x48CB DUP2 DUP6 PUSH2 0x3C3E JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x48DF DUP2 DUP5 PUSH2 0x47AE JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4901 DUP3 PUSH2 0x4792 JUMP JUMPDEST PUSH2 0x490B DUP2 DUP6 PUSH2 0x48EB JUMP JUMPDEST SWAP4 POP PUSH2 0x491B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x397C JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4933 DUP3 DUP5 PUSH2 0x48F6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x4953 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x3D4E JUMP JUMPDEST PUSH2 0x4960 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x34BC JUMP JUMPDEST PUSH2 0x496D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x34BC JUMP JUMPDEST PUSH2 0x497A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x34BC JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x499D DUP2 DUP6 PUSH2 0x3C3E JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x49B1 DUP2 DUP5 PUSH2 0x3C3E JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 PUSH27 0xA2B07F1769F8BD7664DA736D9E956BF37F4CD52508D8767FC79B8F DUP6 0x2B 0xD9 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"511:5247:23:-:0;;;1171:4:2;1128:48;;;;;;;;;511:5247:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@UPGRADE_INTERFACE_VERSION_472":{"entryPoint":4400,"id":472,"parameterSlots":0,"returnSlots":0},"@__ERC1155Supply_init_1797":{"entryPoint":8312,"id":1797,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_54":{"entryPoint":8322,"id":54,"parameterSlots":1,"returnSlots":0},"@__Ownable_init_unchained_81":{"entryPoint":9919,"id":81,"parameterSlots":1,"returnSlots":0},"@__UUPSUpgradeable_init_502":{"entryPoint":8342,"id":502,"parameterSlots":0,"returnSlots":0},"@_asSingletonArrays_1760":{"entryPoint":8796,"id":1760,"parameterSlots":2,"returnSlots":2},"@_authorizeUpgrade_5462":{"entryPoint":7562,"id":5462,"parameterSlots":1,"returnSlots":0},"@_burn_1519":{"entryPoint":6764,"id":1519,"parameterSlots":3,"returnSlots":0},"@_checkInitializing_370":{"entryPoint":9855,"id":370,"parameterSlots":0,"returnSlots":0},"@_checkNonPayable_2537":{"entryPoint":11999,"id":2537,"parameterSlots":0,"returnSlots":0},"@_checkNotDelegated_578":{"entryPoint":7860,"id":578,"parameterSlots":0,"returnSlots":0},"@_checkOwner_122":{"entryPoint":6595,"id":122,"parameterSlots":0,"returnSlots":0},"@_checkProxy_562":{"entryPoint":7332,"id":562,"parameterSlots":0,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_1744":{"entryPoint":11216,"id":1744,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_1674":{"entryPoint":10780,"id":1674,"parameterSlots":6,"returnSlots":0},"@_getERC1155Storage_698":{"entryPoint":6329,"id":698,"parameterSlots":0,"returnSlots":1},"@_getERC1155SupplyStorage_1791":{"entryPoint":6931,"id":1791,"parameterSlots":0,"returnSlots":1},"@_getInitializableStorage_447":{"entryPoint":8272,"id":447,"parameterSlots":0,"returnSlots":1},"@_getOwnableStorage_25":{"entryPoint":8210,"id":25,"parameterSlots":0,"returnSlots":1},"@_isInitializing_438":{"entryPoint":12060,"id":438,"parameterSlots":0,"returnSlots":1},"@_mint_1428":{"entryPoint":6971,"id":1428,"parameterSlots":4,"returnSlots":0},"@_msgSender_2018":{"entryPoint":8788,"id":2018,"parameterSlots":0,"returnSlots":1},"@_revert_3235":{"entryPoint":13199,"id":3235,"parameterSlots":1,"returnSlots":0},"@_safeBatchTransferFrom_1357":{"entryPoint":9022,"id":1357,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_1302":{"entryPoint":10053,"id":1302,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_1606":{"entryPoint":9472,"id":1606,"parameterSlots":3,"returnSlots":0},"@_setImplementation_2323":{"entryPoint":11662,"id":2323,"parameterSlots":1,"returnSlots":0},"@_setURI_1376":{"entryPoint":6730,"id":1376,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_193":{"entryPoint":7995,"id":193,"parameterSlots":1,"returnSlots":0},"@_updateWithAcceptanceCheck_1236":{"entryPoint":8844,"id":1236,"parameterSlots":5,"returnSlots":0},"@_update_1160":{"entryPoint":12092,"id":1160,"parameterSlots":4,"returnSlots":0},"@_update_1989":{"entryPoint":10320,"id":1989,"parameterSlots":4,"returnSlots":0},"@_upgradeToAndCallUUPS_629":{"entryPoint":7573,"id":629,"parameterSlots":2,"returnSlots":0},"@addAdmin_5154":{"entryPoint":3869,"id":5154,"parameterSlots":1,"returnSlots":0},"@adminBurnBatch_5320":{"entryPoint":2346,"id":5320,"parameterSlots":2,"returnSlots":0},"@adminBurn_5285":{"entryPoint":2191,"id":5285,"parameterSlots":2,"returnSlots":0},"@adminMint_5260":{"entryPoint":5367,"id":5260,"parameterSlots":2,"returnSlots":0},"@admins_4987":{"entryPoint":3464,"id":4987,"parameterSlots":0,"returnSlots":0},"@artistAddresses_4991":{"entryPoint":3987,"id":4991,"parameterSlots":0,"returnSlots":0},"@balanceOfBatch_866":{"entryPoint":3496,"id":866,"parameterSlots":2,"returnSlots":1},"@balanceOf_796":{"entryPoint":1944,"id":796,"parameterSlots":2,"returnSlots":1},"@exists_1854":{"entryPoint":3798,"id":1854,"parameterSlots":1,"returnSlots":1},"@functionDelegateCall_3155":{"entryPoint":11867,"id":3155,"parameterSlots":2,"returnSlots":1},"@getAddressSlot_3451":{"entryPoint":11652,"id":3451,"parameterSlots":1,"returnSlots":1},"@getImplementation_2296":{"entryPoint":9270,"id":2296,"parameterSlots":0,"returnSlots":1},"@increaseTokenSupplyLimit_5111":{"entryPoint":5071,"id":5111,"parameterSlots":2,"returnSlots":0},"@init_5043":{"entryPoint":4457,"id":5043,"parameterSlots":3,"returnSlots":0},"@isAdmin_5139":{"entryPoint":3167,"id":5139,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_5453":{"entryPoint":5855,"id":5453,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_906":{"entryPoint":8352,"id":906,"parameterSlots":2,"returnSlots":1},"@mint_5209":{"entryPoint":2819,"id":5209,"parameterSlots":2,"returnSlots":0},"@owner_105":{"entryPoint":4038,"id":105,"parameterSlots":0,"returnSlots":1},"@proxiableUUID_520":{"entryPoint":3818,"id":520,"parameterSlots":0,"returnSlots":1},"@removeAdmin_5168":{"entryPoint":2706,"id":5168,"parameterSlots":1,"returnSlots":0},"@renounceOwnership_136":{"entryPoint":3967,"id":136,"parameterSlots":0,"returnSlots":0},"@safeBatchTransferFrom_5406":{"entryPoint":3259,"id":5406,"parameterSlots":5,"returnSlots":0},"@safeBatchTransferFrom_996":{"entryPoint":7124,"id":996,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_5370":{"entryPoint":5966,"id":5370,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_950":{"entryPoint":8514,"id":950,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_5336":{"entryPoint":4386,"id":5336,"parameterSlots":2,"returnSlots":0},"@setApprovalForAll_882":{"entryPoint":8250,"id":882,"parameterSlots":2,"returnSlots":0},"@setArtistAddress_5073":{"entryPoint":4094,"id":5073,"parameterSlots":2,"returnSlots":0},"@setURI_5124":{"entryPoint":2171,"id":5124,"parameterSlots":1,"returnSlots":0},"@supportsInterface_2067":{"entryPoint":8682,"id":2067,"parameterSlots":1,"returnSlots":1},"@supportsInterface_5429":{"entryPoint":2049,"id":5429,"parameterSlots":1,"returnSlots":1},"@supportsInterface_754":{"entryPoint":6369,"id":754,"parameterSlots":1,"returnSlots":1},"@tokenSupplyLimits_4995":{"entryPoint":6305,"id":4995,"parameterSlots":0,"returnSlots":0},"@totalSupply_1823":{"entryPoint":5028,"id":1823,"parameterSlots":1,"returnSlots":1},"@totalSupply_1839":{"entryPoint":2795,"id":1839,"parameterSlots":0,"returnSlots":1},"@transferOwnership_164":{"entryPoint":6171,"id":164,"parameterSlots":1,"returnSlots":0},"@unsafeMemoryAccess_3405":{"entryPoint":7312,"id":3405,"parameterSlots":2,"returnSlots":1},"@unsafeMemoryAccess_3418":{"entryPoint":7292,"id":3418,"parameterSlots":2,"returnSlots":1},"@upgradeToAndCall_2357":{"entryPoint":9357,"id":2357,"parameterSlots":2,"returnSlots":0},"@upgradeToAndCall_540":{"entryPoint":3767,"id":540,"parameterSlots":2,"returnSlots":0},"@uri_772":{"entryPoint":2543,"id":772,"parameterSlots":1,"returnSlots":1},"@verifyCallResultFromTarget_3195":{"entryPoint":13056,"id":3195,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":14177,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":14372,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":15007,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":13943,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":13361,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":14282,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":14477,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":15823,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":16979,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":18256,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":13609,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":18497,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":15073,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr":{"entryPoint":14009,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":13415,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":14849,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":16047,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":15119,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":16111,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_array$_t_address_$dyn_memory_ptrt_string_memory_ptr":{"entryPoint":15908,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_bool":{"entryPoint":15844,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":15550,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":13436,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":14523,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":17000,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":18277,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":13630,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":18518,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":14055,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":14643,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":15736,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":14894,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encodeUpdatedPos_t_uint256_to_t_uint256":{"entryPoint":15385,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":15694,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":15422,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":13687,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":15652,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":18350,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":18678,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_rational_1_by_1_to_t_uint64_fromStack":{"entryPoint":17268,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":14758,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2_to_t_string_memory_ptr_fromStack":{"entryPoint":17127,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51_to_t_string_memory_ptr_fromStack":{"entryPoint":17497,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae_to_t_string_memory_ptr_fromStack":{"entryPoint":17389,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483_to_t_string_memory_ptr_fromStack":{"entryPoint":16912,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75_to_t_string_memory_ptr_fromStack":{"entryPoint":16752,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283_to_t_string_memory_ptr_fromStack":{"entryPoint":16303,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":15370,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":13500,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":18727,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":15709,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":18192,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":18563,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":18407,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":16417,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":18750,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":15516,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":18819,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":13702,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":15667,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed":{"entryPoint":17283,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14815,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17162,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17532,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17424,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16947,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16787,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16338,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":13515,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":17045,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_memory":{"entryPoint":13852,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":13268,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":14128,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":14328,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":14958,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":13879,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":15354,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":17564,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":15326,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":18322,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":14688,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":15409,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":15337,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":18333,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":18667,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":14699,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":16819,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":17841,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":13320,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":13675,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":15642,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":13542,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":17194,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":13288,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":13382,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":17204,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":17806,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_rational_1_by_1_to_t_uint64":{"entryPoint":17234,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":17696,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":17982,"id":null,"parameterSlots":2,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":13928,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":14716,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":17585,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":16624,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":17954,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":13803,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":17224,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":16505,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":17924,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":16458,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":16577,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":16370,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":13756,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":17730,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":13729,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":14172,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":13734,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":13283,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":13278,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":13739,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":17601,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":17911,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":17782,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2":{"entryPoint":17086,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51":{"entryPoint":17456,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae":{"entryPoint":17310,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483":{"entryPoint":16871,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75":{"entryPoint":16673,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283":{"entryPoint":16262,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":17614,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":17740,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":13338,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":15800,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":18233,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":13586,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":13392,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":17777,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:41605:25","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:25","statements":[{"nodeType":"YulAssignment","src":"57:19:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:25"},"nodeType":"YulFunctionCall","src":"67:9:25"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:25"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:25","type":""}],"src":"7:75:25"},{"body":{"nodeType":"YulBlock","src":"177:28:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:25"},"nodeType":"YulFunctionCall","src":"187:12:25"},"nodeType":"YulExpressionStatement","src":"187:12:25"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:25"},{"body":{"nodeType":"YulBlock","src":"300:28:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:25"},"nodeType":"YulFunctionCall","src":"310:12:25"},"nodeType":"YulExpressionStatement","src":"310:12:25"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:25"},{"body":{"nodeType":"YulBlock","src":"379:81:25","statements":[{"nodeType":"YulAssignment","src":"389:65:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:25","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:25"},"nodeType":"YulFunctionCall","src":"400:54:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:25"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:25","type":""}],"src":"334:126:25"},{"body":{"nodeType":"YulBlock","src":"511:51:25","statements":[{"nodeType":"YulAssignment","src":"521:35:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:25"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:25"},"nodeType":"YulFunctionCall","src":"532:24:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:25"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:25","type":""}],"src":"466:96:25"},{"body":{"nodeType":"YulBlock","src":"611:79:25","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:25"},"nodeType":"YulFunctionCall","src":"670:12:25"},"nodeType":"YulExpressionStatement","src":"670:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:25"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:25"},"nodeType":"YulFunctionCall","src":"641:24:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:25"},"nodeType":"YulFunctionCall","src":"631:35:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:25"},"nodeType":"YulFunctionCall","src":"624:43:25"},"nodeType":"YulIf","src":"621:63:25"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:25","type":""}],"src":"568:122:25"},{"body":{"nodeType":"YulBlock","src":"748:87:25","statements":[{"nodeType":"YulAssignment","src":"758:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"780:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"767:12:25"},"nodeType":"YulFunctionCall","src":"767:20:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"758:5:25"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"823:5:25"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"796:26:25"},"nodeType":"YulFunctionCall","src":"796:33:25"},"nodeType":"YulExpressionStatement","src":"796:33:25"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"726:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"734:3:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"742:5:25","type":""}],"src":"696:139:25"},{"body":{"nodeType":"YulBlock","src":"886:32:25","statements":[{"nodeType":"YulAssignment","src":"896:16:25","value":{"name":"value","nodeType":"YulIdentifier","src":"907:5:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"896:7:25"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"868:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"878:7:25","type":""}],"src":"841:77:25"},{"body":{"nodeType":"YulBlock","src":"967:79:25","statements":[{"body":{"nodeType":"YulBlock","src":"1024:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1033:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1036:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1026:6:25"},"nodeType":"YulFunctionCall","src":"1026:12:25"},"nodeType":"YulExpressionStatement","src":"1026:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"990:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1015:5:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"997:17:25"},"nodeType":"YulFunctionCall","src":"997:24:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"987:2:25"},"nodeType":"YulFunctionCall","src":"987:35:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"980:6:25"},"nodeType":"YulFunctionCall","src":"980:43:25"},"nodeType":"YulIf","src":"977:63:25"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"960:5:25","type":""}],"src":"924:122:25"},{"body":{"nodeType":"YulBlock","src":"1104:87:25","statements":[{"nodeType":"YulAssignment","src":"1114:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1136:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1123:12:25"},"nodeType":"YulFunctionCall","src":"1123:20:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1114:5:25"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1179:5:25"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1152:26:25"},"nodeType":"YulFunctionCall","src":"1152:33:25"},"nodeType":"YulExpressionStatement","src":"1152:33:25"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1082:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"1090:3:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1098:5:25","type":""}],"src":"1052:139:25"},{"body":{"nodeType":"YulBlock","src":"1280:391:25","statements":[{"body":{"nodeType":"YulBlock","src":"1326:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1328:77:25"},"nodeType":"YulFunctionCall","src":"1328:79:25"},"nodeType":"YulExpressionStatement","src":"1328:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1301:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"1310:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1297:3:25"},"nodeType":"YulFunctionCall","src":"1297:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"1322:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1293:3:25"},"nodeType":"YulFunctionCall","src":"1293:32:25"},"nodeType":"YulIf","src":"1290:119:25"},{"nodeType":"YulBlock","src":"1419:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1434:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1448:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1438:6:25","type":""}]},{"nodeType":"YulAssignment","src":"1463:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1498:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"1509:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1494:3:25"},"nodeType":"YulFunctionCall","src":"1494:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1518:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1473:20:25"},"nodeType":"YulFunctionCall","src":"1473:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1463:6:25"}]}]},{"nodeType":"YulBlock","src":"1546:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1561:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1575:2:25","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1565:6:25","type":""}]},{"nodeType":"YulAssignment","src":"1591:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1626:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"1637:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1622:3:25"},"nodeType":"YulFunctionCall","src":"1622:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1646:7:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1601:20:25"},"nodeType":"YulFunctionCall","src":"1601:53:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1591:6:25"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1242:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1253:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1265:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1273:6:25","type":""}],"src":"1197:474:25"},{"body":{"nodeType":"YulBlock","src":"1742:53:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1759:3:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1782:5:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1764:17:25"},"nodeType":"YulFunctionCall","src":"1764:24:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1752:6:25"},"nodeType":"YulFunctionCall","src":"1752:37:25"},"nodeType":"YulExpressionStatement","src":"1752:37:25"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1730:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1737:3:25","type":""}],"src":"1677:118:25"},{"body":{"nodeType":"YulBlock","src":"1899:124:25","statements":[{"nodeType":"YulAssignment","src":"1909:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1921:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1932:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1917:3:25"},"nodeType":"YulFunctionCall","src":"1917:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1909:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1989:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2002:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2013:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1998:3:25"},"nodeType":"YulFunctionCall","src":"1998:17:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"1945:43:25"},"nodeType":"YulFunctionCall","src":"1945:71:25"},"nodeType":"YulExpressionStatement","src":"1945:71:25"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1871:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1883:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1894:4:25","type":""}],"src":"1801:222:25"},{"body":{"nodeType":"YulBlock","src":"2073:105:25","statements":[{"nodeType":"YulAssignment","src":"2083:89:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2098:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"2105:66:25","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2094:3:25"},"nodeType":"YulFunctionCall","src":"2094:78:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2083:7:25"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2055:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2065:7:25","type":""}],"src":"2029:149:25"},{"body":{"nodeType":"YulBlock","src":"2226:78:25","statements":[{"body":{"nodeType":"YulBlock","src":"2282:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2291:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2294:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2284:6:25"},"nodeType":"YulFunctionCall","src":"2284:12:25"},"nodeType":"YulExpressionStatement","src":"2284:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2249:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2273:5:25"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"2256:16:25"},"nodeType":"YulFunctionCall","src":"2256:23:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2246:2:25"},"nodeType":"YulFunctionCall","src":"2246:34:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2239:6:25"},"nodeType":"YulFunctionCall","src":"2239:42:25"},"nodeType":"YulIf","src":"2236:62:25"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2219:5:25","type":""}],"src":"2184:120:25"},{"body":{"nodeType":"YulBlock","src":"2361:86:25","statements":[{"nodeType":"YulAssignment","src":"2371:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2393:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2380:12:25"},"nodeType":"YulFunctionCall","src":"2380:20:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2371:5:25"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2435:5:25"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"2409:25:25"},"nodeType":"YulFunctionCall","src":"2409:32:25"},"nodeType":"YulExpressionStatement","src":"2409:32:25"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2339:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"2347:3:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2355:5:25","type":""}],"src":"2310:137:25"},{"body":{"nodeType":"YulBlock","src":"2518:262:25","statements":[{"body":{"nodeType":"YulBlock","src":"2564:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2566:77:25"},"nodeType":"YulFunctionCall","src":"2566:79:25"},"nodeType":"YulExpressionStatement","src":"2566:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2539:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2548:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2535:3:25"},"nodeType":"YulFunctionCall","src":"2535:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"2560:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2531:3:25"},"nodeType":"YulFunctionCall","src":"2531:32:25"},"nodeType":"YulIf","src":"2528:119:25"},{"nodeType":"YulBlock","src":"2657:116:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2672:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2686:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2676:6:25","type":""}]},{"nodeType":"YulAssignment","src":"2701:62:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2735:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"2746:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2731:3:25"},"nodeType":"YulFunctionCall","src":"2731:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2755:7:25"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"2711:19:25"},"nodeType":"YulFunctionCall","src":"2711:52:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2701:6:25"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2488:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2499:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2511:6:25","type":""}],"src":"2453:327:25"},{"body":{"nodeType":"YulBlock","src":"2828:48:25","statements":[{"nodeType":"YulAssignment","src":"2838:32:25","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2863:5:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2856:6:25"},"nodeType":"YulFunctionCall","src":"2856:13:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2849:6:25"},"nodeType":"YulFunctionCall","src":"2849:21:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2838:7:25"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2810:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2820:7:25","type":""}],"src":"2786:90:25"},{"body":{"nodeType":"YulBlock","src":"2941:50:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2958:3:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2978:5:25"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"2963:14:25"},"nodeType":"YulFunctionCall","src":"2963:21:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2951:6:25"},"nodeType":"YulFunctionCall","src":"2951:34:25"},"nodeType":"YulExpressionStatement","src":"2951:34:25"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2929:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2936:3:25","type":""}],"src":"2882:109:25"},{"body":{"nodeType":"YulBlock","src":"3089:118:25","statements":[{"nodeType":"YulAssignment","src":"3099:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3111:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3122:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3107:3:25"},"nodeType":"YulFunctionCall","src":"3107:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3099:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3173:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3186:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3197:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3182:3:25"},"nodeType":"YulFunctionCall","src":"3182:17:25"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3135:37:25"},"nodeType":"YulFunctionCall","src":"3135:65:25"},"nodeType":"YulExpressionStatement","src":"3135:65:25"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3061:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3073:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3084:4:25","type":""}],"src":"2997:210:25"},{"body":{"nodeType":"YulBlock","src":"3302:28:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3319:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3322:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3312:6:25"},"nodeType":"YulFunctionCall","src":"3312:12:25"},"nodeType":"YulExpressionStatement","src":"3312:12:25"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"3213:117:25"},{"body":{"nodeType":"YulBlock","src":"3425:28:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3442:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3445:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3435:6:25"},"nodeType":"YulFunctionCall","src":"3435:12:25"},"nodeType":"YulExpressionStatement","src":"3435:12:25"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"3336:117:25"},{"body":{"nodeType":"YulBlock","src":"3507:54:25","statements":[{"nodeType":"YulAssignment","src":"3517:38:25","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3535:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"3542:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3531:3:25"},"nodeType":"YulFunctionCall","src":"3531:14:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3551:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3547:3:25"},"nodeType":"YulFunctionCall","src":"3547:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3527:3:25"},"nodeType":"YulFunctionCall","src":"3527:28:25"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3517:6:25"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3490:5:25","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"3500:6:25","type":""}],"src":"3459:102:25"},{"body":{"nodeType":"YulBlock","src":"3595:152:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3612:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3615:77:25","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3605:6:25"},"nodeType":"YulFunctionCall","src":"3605:88:25"},"nodeType":"YulExpressionStatement","src":"3605:88:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3709:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3712:4:25","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3702:6:25"},"nodeType":"YulFunctionCall","src":"3702:15:25"},"nodeType":"YulExpressionStatement","src":"3702:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3733:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3736:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3726:6:25"},"nodeType":"YulFunctionCall","src":"3726:15:25"},"nodeType":"YulExpressionStatement","src":"3726:15:25"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3567:180:25"},{"body":{"nodeType":"YulBlock","src":"3796:238:25","statements":[{"nodeType":"YulVariableDeclaration","src":"3806:58:25","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3828:6:25"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3858:4:25"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"3836:21:25"},"nodeType":"YulFunctionCall","src":"3836:27:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3824:3:25"},"nodeType":"YulFunctionCall","src":"3824:40:25"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3810:10:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3975:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3977:16:25"},"nodeType":"YulFunctionCall","src":"3977:18:25"},"nodeType":"YulExpressionStatement","src":"3977:18:25"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3918:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"3930:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3915:2:25"},"nodeType":"YulFunctionCall","src":"3915:34:25"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3954:10:25"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3966:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3951:2:25"},"nodeType":"YulFunctionCall","src":"3951:22:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3912:2:25"},"nodeType":"YulFunctionCall","src":"3912:62:25"},"nodeType":"YulIf","src":"3909:88:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4013:2:25","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4017:10:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4006:6:25"},"nodeType":"YulFunctionCall","src":"4006:22:25"},"nodeType":"YulExpressionStatement","src":"4006:22:25"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"3782:6:25","type":""},{"name":"size","nodeType":"YulTypedName","src":"3790:4:25","type":""}],"src":"3753:281:25"},{"body":{"nodeType":"YulBlock","src":"4081:88:25","statements":[{"nodeType":"YulAssignment","src":"4091:30:25","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"4101:18:25"},"nodeType":"YulFunctionCall","src":"4101:20:25"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4091:6:25"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4150:6:25"},{"name":"size","nodeType":"YulIdentifier","src":"4158:4:25"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"4130:19:25"},"nodeType":"YulFunctionCall","src":"4130:33:25"},"nodeType":"YulExpressionStatement","src":"4130:33:25"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"4065:4:25","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4074:6:25","type":""}],"src":"4040:129:25"},{"body":{"nodeType":"YulBlock","src":"4242:241:25","statements":[{"body":{"nodeType":"YulBlock","src":"4347:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4349:16:25"},"nodeType":"YulFunctionCall","src":"4349:18:25"},"nodeType":"YulExpressionStatement","src":"4349:18:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4319:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"4327:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4316:2:25"},"nodeType":"YulFunctionCall","src":"4316:30:25"},"nodeType":"YulIf","src":"4313:56:25"},{"nodeType":"YulAssignment","src":"4379:37:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4409:6:25"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"4387:21:25"},"nodeType":"YulFunctionCall","src":"4387:29:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4379:4:25"}]},{"nodeType":"YulAssignment","src":"4453:23:25","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"4465:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"4471:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4461:3:25"},"nodeType":"YulFunctionCall","src":"4461:15:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4453:4:25"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"4226:6:25","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"4237:4:25","type":""}],"src":"4175:308:25"},{"body":{"nodeType":"YulBlock","src":"4553:82:25","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4576:3:25"},{"name":"src","nodeType":"YulIdentifier","src":"4581:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"4586:6:25"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4563:12:25"},"nodeType":"YulFunctionCall","src":"4563:30:25"},"nodeType":"YulExpressionStatement","src":"4563:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4613:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"4618:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4609:3:25"},"nodeType":"YulFunctionCall","src":"4609:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"4627:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4602:6:25"},"nodeType":"YulFunctionCall","src":"4602:27:25"},"nodeType":"YulExpressionStatement","src":"4602:27:25"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"4535:3:25","type":""},{"name":"dst","nodeType":"YulTypedName","src":"4540:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"4545:6:25","type":""}],"src":"4489:146:25"},{"body":{"nodeType":"YulBlock","src":"4725:341:25","statements":[{"nodeType":"YulAssignment","src":"4735:75:25","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4802:6:25"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"4760:41:25"},"nodeType":"YulFunctionCall","src":"4760:49:25"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4744:15:25"},"nodeType":"YulFunctionCall","src":"4744:66:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4735:5:25"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4826:5:25"},{"name":"length","nodeType":"YulIdentifier","src":"4833:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4819:6:25"},"nodeType":"YulFunctionCall","src":"4819:21:25"},"nodeType":"YulExpressionStatement","src":"4819:21:25"},{"nodeType":"YulVariableDeclaration","src":"4849:27:25","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4864:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"4871:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4860:3:25"},"nodeType":"YulFunctionCall","src":"4860:16:25"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4853:3:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"4914:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"4916:77:25"},"nodeType":"YulFunctionCall","src":"4916:79:25"},"nodeType":"YulExpressionStatement","src":"4916:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4895:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"4900:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4891:3:25"},"nodeType":"YulFunctionCall","src":"4891:16:25"},{"name":"end","nodeType":"YulIdentifier","src":"4909:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4888:2:25"},"nodeType":"YulFunctionCall","src":"4888:25:25"},"nodeType":"YulIf","src":"4885:112:25"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5043:3:25"},{"name":"dst","nodeType":"YulIdentifier","src":"5048:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"5053:6:25"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5006:36:25"},"nodeType":"YulFunctionCall","src":"5006:54:25"},"nodeType":"YulExpressionStatement","src":"5006:54:25"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"4698:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"4703:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"4711:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4719:5:25","type":""}],"src":"4641:425:25"},{"body":{"nodeType":"YulBlock","src":"5148:278:25","statements":[{"body":{"nodeType":"YulBlock","src":"5197:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"5199:77:25"},"nodeType":"YulFunctionCall","src":"5199:79:25"},"nodeType":"YulExpressionStatement","src":"5199:79:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5176:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"5184:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5172:3:25"},"nodeType":"YulFunctionCall","src":"5172:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"5191:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5168:3:25"},"nodeType":"YulFunctionCall","src":"5168:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5161:6:25"},"nodeType":"YulFunctionCall","src":"5161:35:25"},"nodeType":"YulIf","src":"5158:122:25"},{"nodeType":"YulVariableDeclaration","src":"5289:34:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5316:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5303:12:25"},"nodeType":"YulFunctionCall","src":"5303:20:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5293:6:25","type":""}]},{"nodeType":"YulAssignment","src":"5332:88:25","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5393:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"5401:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5389:3:25"},"nodeType":"YulFunctionCall","src":"5389:17:25"},{"name":"length","nodeType":"YulIdentifier","src":"5408:6:25"},{"name":"end","nodeType":"YulIdentifier","src":"5416:3:25"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"5341:47:25"},"nodeType":"YulFunctionCall","src":"5341:79:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"5332:5:25"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5126:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"5134:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"5142:5:25","type":""}],"src":"5086:340:25"},{"body":{"nodeType":"YulBlock","src":"5508:433:25","statements":[{"body":{"nodeType":"YulBlock","src":"5554:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5556:77:25"},"nodeType":"YulFunctionCall","src":"5556:79:25"},"nodeType":"YulExpressionStatement","src":"5556:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5529:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"5538:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5525:3:25"},"nodeType":"YulFunctionCall","src":"5525:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"5550:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5521:3:25"},"nodeType":"YulFunctionCall","src":"5521:32:25"},"nodeType":"YulIf","src":"5518:119:25"},{"nodeType":"YulBlock","src":"5647:287:25","statements":[{"nodeType":"YulVariableDeclaration","src":"5662:45:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5693:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5704:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5689:3:25"},"nodeType":"YulFunctionCall","src":"5689:17:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5676:12:25"},"nodeType":"YulFunctionCall","src":"5676:31:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5666:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"5754:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5756:77:25"},"nodeType":"YulFunctionCall","src":"5756:79:25"},"nodeType":"YulExpressionStatement","src":"5756:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5726:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"5734:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5723:2:25"},"nodeType":"YulFunctionCall","src":"5723:30:25"},"nodeType":"YulIf","src":"5720:117:25"},{"nodeType":"YulAssignment","src":"5851:73:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5896:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"5907:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5892:3:25"},"nodeType":"YulFunctionCall","src":"5892:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5916:7:25"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"5861:30:25"},"nodeType":"YulFunctionCall","src":"5861:63:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5851:6:25"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5478:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5489:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5501:6:25","type":""}],"src":"5432:509:25"},{"body":{"nodeType":"YulBlock","src":"6029:229:25","statements":[{"body":{"nodeType":"YulBlock","src":"6134:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6136:16:25"},"nodeType":"YulFunctionCall","src":"6136:18:25"},"nodeType":"YulExpressionStatement","src":"6136:18:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6106:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"6114:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6103:2:25"},"nodeType":"YulFunctionCall","src":"6103:30:25"},"nodeType":"YulIf","src":"6100:56:25"},{"nodeType":"YulAssignment","src":"6166:25:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6178:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"6186:4:25","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6174:3:25"},"nodeType":"YulFunctionCall","src":"6174:17:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6166:4:25"}]},{"nodeType":"YulAssignment","src":"6228:23:25","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6240:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"6246:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6236:3:25"},"nodeType":"YulFunctionCall","src":"6236:15:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6228:4:25"}]}]},"name":"array_allocation_size_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"6013:6:25","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"6024:4:25","type":""}],"src":"5947:311:25"},{"body":{"nodeType":"YulBlock","src":"6353:28:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6370:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6373:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6363:6:25"},"nodeType":"YulFunctionCall","src":"6363:12:25"},"nodeType":"YulExpressionStatement","src":"6363:12:25"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"6264:117:25"},{"body":{"nodeType":"YulBlock","src":"6506:608:25","statements":[{"nodeType":"YulAssignment","src":"6516:90:25","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6598:6:25"}],"functionName":{"name":"array_allocation_size_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"6541:56:25"},"nodeType":"YulFunctionCall","src":"6541:64:25"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"6525:15:25"},"nodeType":"YulFunctionCall","src":"6525:81:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"6516:5:25"}]},{"nodeType":"YulVariableDeclaration","src":"6615:16:25","value":{"name":"array","nodeType":"YulIdentifier","src":"6626:5:25"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"6619:3:25","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6648:5:25"},{"name":"length","nodeType":"YulIdentifier","src":"6655:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6641:6:25"},"nodeType":"YulFunctionCall","src":"6641:21:25"},"nodeType":"YulExpressionStatement","src":"6641:21:25"},{"nodeType":"YulAssignment","src":"6671:23:25","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6682:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"6689:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6678:3:25"},"nodeType":"YulFunctionCall","src":"6678:16:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6671:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"6704:44:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6722:6:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6734:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"6742:4:25","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6730:3:25"},"nodeType":"YulFunctionCall","src":"6730:17:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6718:3:25"},"nodeType":"YulFunctionCall","src":"6718:30:25"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"6708:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"6776:103:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"6790:77:25"},"nodeType":"YulFunctionCall","src":"6790:79:25"},"nodeType":"YulExpressionStatement","src":"6790:79:25"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"6763:6:25"},{"name":"end","nodeType":"YulIdentifier","src":"6771:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6760:2:25"},"nodeType":"YulFunctionCall","src":"6760:15:25"},"nodeType":"YulIf","src":"6757:122:25"},{"body":{"nodeType":"YulBlock","src":"6964:144:25","statements":[{"nodeType":"YulVariableDeclaration","src":"6979:21:25","value":{"name":"src","nodeType":"YulIdentifier","src":"6997:3:25"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"6983:10:25","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7021:3:25"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"7047:10:25"},{"name":"end","nodeType":"YulIdentifier","src":"7059:3:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7026:20:25"},"nodeType":"YulFunctionCall","src":"7026:37:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7014:6:25"},"nodeType":"YulFunctionCall","src":"7014:50:25"},"nodeType":"YulExpressionStatement","src":"7014:50:25"},{"nodeType":"YulAssignment","src":"7077:21:25","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7088:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"7093:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7084:3:25"},"nodeType":"YulFunctionCall","src":"7084:14:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"7077:3:25"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6917:3:25"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"6922:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6914:2:25"},"nodeType":"YulFunctionCall","src":"6914:15:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6930:25:25","statements":[{"nodeType":"YulAssignment","src":"6932:21:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6943:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"6948:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6939:3:25"},"nodeType":"YulFunctionCall","src":"6939:14:25"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"6932:3:25"}]}]},"pre":{"nodeType":"YulBlock","src":"6892:21:25","statements":[{"nodeType":"YulVariableDeclaration","src":"6894:17:25","value":{"name":"offset","nodeType":"YulIdentifier","src":"6905:6:25"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"6898:3:25","type":""}]}]},"src":"6888:220:25"}]},"name":"abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6476:6:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"6484:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"6492:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"6500:5:25","type":""}],"src":"6404:710:25"},{"body":{"nodeType":"YulBlock","src":"7214:293:25","statements":[{"body":{"nodeType":"YulBlock","src":"7263:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"7265:77:25"},"nodeType":"YulFunctionCall","src":"7265:79:25"},"nodeType":"YulExpressionStatement","src":"7265:79:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7242:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7250:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7238:3:25"},"nodeType":"YulFunctionCall","src":"7238:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"7257:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7234:3:25"},"nodeType":"YulFunctionCall","src":"7234:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7227:6:25"},"nodeType":"YulFunctionCall","src":"7227:35:25"},"nodeType":"YulIf","src":"7224:122:25"},{"nodeType":"YulVariableDeclaration","src":"7355:34:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7382:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7369:12:25"},"nodeType":"YulFunctionCall","src":"7369:20:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7359:6:25","type":""}]},{"nodeType":"YulAssignment","src":"7398:103:25","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7474:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7482:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7470:3:25"},"nodeType":"YulFunctionCall","src":"7470:17:25"},{"name":"length","nodeType":"YulIdentifier","src":"7489:6:25"},{"name":"end","nodeType":"YulIdentifier","src":"7497:3:25"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7407:62:25"},"nodeType":"YulFunctionCall","src":"7407:94:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7398:5:25"}]}]},"name":"abi_decode_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7192:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"7200:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7208:5:25","type":""}],"src":"7137:370:25"},{"body":{"nodeType":"YulBlock","src":"7595:229:25","statements":[{"body":{"nodeType":"YulBlock","src":"7700:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7702:16:25"},"nodeType":"YulFunctionCall","src":"7702:18:25"},"nodeType":"YulExpressionStatement","src":"7702:18:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7672:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7680:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7669:2:25"},"nodeType":"YulFunctionCall","src":"7669:30:25"},"nodeType":"YulIf","src":"7666:56:25"},{"nodeType":"YulAssignment","src":"7732:25:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7744:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7752:4:25","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7740:3:25"},"nodeType":"YulFunctionCall","src":"7740:17:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7732:4:25"}]},{"nodeType":"YulAssignment","src":"7794:23:25","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7806:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"7812:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7802:3:25"},"nodeType":"YulFunctionCall","src":"7802:15:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7794:4:25"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7579:6:25","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7590:4:25","type":""}],"src":"7513:311:25"},{"body":{"nodeType":"YulBlock","src":"7949:608:25","statements":[{"nodeType":"YulAssignment","src":"7959:90:25","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8041:6:25"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7984:56:25"},"nodeType":"YulFunctionCall","src":"7984:64:25"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"7968:15:25"},"nodeType":"YulFunctionCall","src":"7968:81:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7959:5:25"}]},{"nodeType":"YulVariableDeclaration","src":"8058:16:25","value":{"name":"array","nodeType":"YulIdentifier","src":"8069:5:25"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8062:3:25","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8091:5:25"},{"name":"length","nodeType":"YulIdentifier","src":"8098:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8084:6:25"},"nodeType":"YulFunctionCall","src":"8084:21:25"},"nodeType":"YulExpressionStatement","src":"8084:21:25"},{"nodeType":"YulAssignment","src":"8114:23:25","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8125:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"8132:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8121:3:25"},"nodeType":"YulFunctionCall","src":"8121:16:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"8114:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"8147:44:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8165:6:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8177:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"8185:4:25","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8173:3:25"},"nodeType":"YulFunctionCall","src":"8173:17:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8161:3:25"},"nodeType":"YulFunctionCall","src":"8161:30:25"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"8151:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"8219:103:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"8233:77:25"},"nodeType":"YulFunctionCall","src":"8233:79:25"},"nodeType":"YulExpressionStatement","src":"8233:79:25"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"8206:6:25"},{"name":"end","nodeType":"YulIdentifier","src":"8214:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8203:2:25"},"nodeType":"YulFunctionCall","src":"8203:15:25"},"nodeType":"YulIf","src":"8200:122:25"},{"body":{"nodeType":"YulBlock","src":"8407:144:25","statements":[{"nodeType":"YulVariableDeclaration","src":"8422:21:25","value":{"name":"src","nodeType":"YulIdentifier","src":"8440:3:25"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"8426:10:25","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8464:3:25"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"8490:10:25"},{"name":"end","nodeType":"YulIdentifier","src":"8502:3:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"8469:20:25"},"nodeType":"YulFunctionCall","src":"8469:37:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8457:6:25"},"nodeType":"YulFunctionCall","src":"8457:50:25"},"nodeType":"YulExpressionStatement","src":"8457:50:25"},{"nodeType":"YulAssignment","src":"8520:21:25","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8531:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"8536:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8527:3:25"},"nodeType":"YulFunctionCall","src":"8527:14:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"8520:3:25"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8360:3:25"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"8365:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8357:2:25"},"nodeType":"YulFunctionCall","src":"8357:15:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8373:25:25","statements":[{"nodeType":"YulAssignment","src":"8375:21:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8386:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"8391:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8382:3:25"},"nodeType":"YulFunctionCall","src":"8382:14:25"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"8375:3:25"}]}]},"pre":{"nodeType":"YulBlock","src":"8335:21:25","statements":[{"nodeType":"YulVariableDeclaration","src":"8337:17:25","value":{"name":"offset","nodeType":"YulIdentifier","src":"8348:6:25"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"8341:3:25","type":""}]}]},"src":"8331:220:25"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7919:6:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"7927:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"7935:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7943:5:25","type":""}],"src":"7847:710:25"},{"body":{"nodeType":"YulBlock","src":"8657:293:25","statements":[{"body":{"nodeType":"YulBlock","src":"8706:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8708:77:25"},"nodeType":"YulFunctionCall","src":"8708:79:25"},"nodeType":"YulExpressionStatement","src":"8708:79:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8685:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"8693:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8681:3:25"},"nodeType":"YulFunctionCall","src":"8681:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"8700:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8677:3:25"},"nodeType":"YulFunctionCall","src":"8677:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8670:6:25"},"nodeType":"YulFunctionCall","src":"8670:35:25"},"nodeType":"YulIf","src":"8667:122:25"},{"nodeType":"YulVariableDeclaration","src":"8798:34:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8825:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8812:12:25"},"nodeType":"YulFunctionCall","src":"8812:20:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8802:6:25","type":""}]},{"nodeType":"YulAssignment","src":"8841:103:25","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8917:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"8925:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8913:3:25"},"nodeType":"YulFunctionCall","src":"8913:17:25"},{"name":"length","nodeType":"YulIdentifier","src":"8932:6:25"},{"name":"end","nodeType":"YulIdentifier","src":"8940:3:25"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"8850:62:25"},"nodeType":"YulFunctionCall","src":"8850:94:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8841:5:25"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8635:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"8643:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8651:5:25","type":""}],"src":"8580:370:25"},{"body":{"nodeType":"YulBlock","src":"9089:761:25","statements":[{"body":{"nodeType":"YulBlock","src":"9135:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9137:77:25"},"nodeType":"YulFunctionCall","src":"9137:79:25"},"nodeType":"YulExpressionStatement","src":"9137:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9110:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"9119:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9106:3:25"},"nodeType":"YulFunctionCall","src":"9106:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"9131:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9102:3:25"},"nodeType":"YulFunctionCall","src":"9102:32:25"},"nodeType":"YulIf","src":"9099:119:25"},{"nodeType":"YulBlock","src":"9228:302:25","statements":[{"nodeType":"YulVariableDeclaration","src":"9243:45:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9274:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9285:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9270:3:25"},"nodeType":"YulFunctionCall","src":"9270:17:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9257:12:25"},"nodeType":"YulFunctionCall","src":"9257:31:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9247:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"9335:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9337:77:25"},"nodeType":"YulFunctionCall","src":"9337:79:25"},"nodeType":"YulExpressionStatement","src":"9337:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9307:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"9315:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9304:2:25"},"nodeType":"YulFunctionCall","src":"9304:30:25"},"nodeType":"YulIf","src":"9301:117:25"},{"nodeType":"YulAssignment","src":"9432:88:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9492:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"9503:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9488:3:25"},"nodeType":"YulFunctionCall","src":"9488:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9512:7:25"}],"functionName":{"name":"abi_decode_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"9442:45:25"},"nodeType":"YulFunctionCall","src":"9442:78:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9432:6:25"}]}]},{"nodeType":"YulBlock","src":"9540:303:25","statements":[{"nodeType":"YulVariableDeclaration","src":"9555:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9586:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9597:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9582:3:25"},"nodeType":"YulFunctionCall","src":"9582:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9569:12:25"},"nodeType":"YulFunctionCall","src":"9569:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9559:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"9648:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9650:77:25"},"nodeType":"YulFunctionCall","src":"9650:79:25"},"nodeType":"YulExpressionStatement","src":"9650:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9620:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"9628:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9617:2:25"},"nodeType":"YulFunctionCall","src":"9617:30:25"},"nodeType":"YulIf","src":"9614:117:25"},{"nodeType":"YulAssignment","src":"9745:88:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9805:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"9816:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9801:3:25"},"nodeType":"YulFunctionCall","src":"9801:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9825:7:25"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"9755:45:25"},"nodeType":"YulFunctionCall","src":"9755:78:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9745:6:25"}]}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9051:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9062:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9074:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9082:6:25","type":""}],"src":"8956:894:25"},{"body":{"nodeType":"YulBlock","src":"9922:263:25","statements":[{"body":{"nodeType":"YulBlock","src":"9968:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9970:77:25"},"nodeType":"YulFunctionCall","src":"9970:79:25"},"nodeType":"YulExpressionStatement","src":"9970:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9943:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"9952:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9939:3:25"},"nodeType":"YulFunctionCall","src":"9939:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"9964:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9935:3:25"},"nodeType":"YulFunctionCall","src":"9935:32:25"},"nodeType":"YulIf","src":"9932:119:25"},{"nodeType":"YulBlock","src":"10061:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"10076:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"10090:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10080:6:25","type":""}]},{"nodeType":"YulAssignment","src":"10105:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10140:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"10151:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10136:3:25"},"nodeType":"YulFunctionCall","src":"10136:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10160:7:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10115:20:25"},"nodeType":"YulFunctionCall","src":"10115:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10105:6:25"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9892:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9903:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9915:6:25","type":""}],"src":"9856:329:25"},{"body":{"nodeType":"YulBlock","src":"10250:40:25","statements":[{"nodeType":"YulAssignment","src":"10261:22:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10277:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10271:5:25"},"nodeType":"YulFunctionCall","src":"10271:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10261:6:25"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10233:5:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10243:6:25","type":""}],"src":"10191:99:25"},{"body":{"nodeType":"YulBlock","src":"10392:73:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10409:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"10414:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10402:6:25"},"nodeType":"YulFunctionCall","src":"10402:19:25"},"nodeType":"YulExpressionStatement","src":"10402:19:25"},{"nodeType":"YulAssignment","src":"10430:29:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10449:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"10454:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10445:3:25"},"nodeType":"YulFunctionCall","src":"10445:14:25"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"10430:11:25"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10364:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"10369:6:25","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"10380:11:25","type":""}],"src":"10296:169:25"},{"body":{"nodeType":"YulBlock","src":"10533:184:25","statements":[{"nodeType":"YulVariableDeclaration","src":"10543:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"10552:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10547:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"10612:63:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10637:3:25"},{"name":"i","nodeType":"YulIdentifier","src":"10642:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10633:3:25"},"nodeType":"YulFunctionCall","src":"10633:11:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10656:3:25"},{"name":"i","nodeType":"YulIdentifier","src":"10661:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10652:3:25"},"nodeType":"YulFunctionCall","src":"10652:11:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10646:5:25"},"nodeType":"YulFunctionCall","src":"10646:18:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10626:6:25"},"nodeType":"YulFunctionCall","src":"10626:39:25"},"nodeType":"YulExpressionStatement","src":"10626:39:25"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10573:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"10576:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10570:2:25"},"nodeType":"YulFunctionCall","src":"10570:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10584:19:25","statements":[{"nodeType":"YulAssignment","src":"10586:15:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10595:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"10598:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10591:3:25"},"nodeType":"YulFunctionCall","src":"10591:10:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"10586:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"10566:3:25","statements":[]},"src":"10562:113:25"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10695:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"10700:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10691:3:25"},"nodeType":"YulFunctionCall","src":"10691:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"10709:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10684:6:25"},"nodeType":"YulFunctionCall","src":"10684:27:25"},"nodeType":"YulExpressionStatement","src":"10684:27:25"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"10515:3:25","type":""},{"name":"dst","nodeType":"YulTypedName","src":"10520:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"10525:6:25","type":""}],"src":"10471:246:25"},{"body":{"nodeType":"YulBlock","src":"10815:285:25","statements":[{"nodeType":"YulVariableDeclaration","src":"10825:53:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10872:5:25"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"10839:32:25"},"nodeType":"YulFunctionCall","src":"10839:39:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10829:6:25","type":""}]},{"nodeType":"YulAssignment","src":"10887:78:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10953:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"10958:6:25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10894:58:25"},"nodeType":"YulFunctionCall","src":"10894:71:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10887:3:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11013:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"11020:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11009:3:25"},"nodeType":"YulFunctionCall","src":"11009:16:25"},{"name":"pos","nodeType":"YulIdentifier","src":"11027:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"11032:6:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10974:34:25"},"nodeType":"YulFunctionCall","src":"10974:65:25"},"nodeType":"YulExpressionStatement","src":"10974:65:25"},{"nodeType":"YulAssignment","src":"11048:46:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11059:3:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11086:6:25"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"11064:21:25"},"nodeType":"YulFunctionCall","src":"11064:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11055:3:25"},"nodeType":"YulFunctionCall","src":"11055:39:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11048:3:25"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10796:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10803:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10811:3:25","type":""}],"src":"10723:377:25"},{"body":{"nodeType":"YulBlock","src":"11224:195:25","statements":[{"nodeType":"YulAssignment","src":"11234:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11246:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11257:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11242:3:25"},"nodeType":"YulFunctionCall","src":"11242:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11234:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11281:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11292:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11277:3:25"},"nodeType":"YulFunctionCall","src":"11277:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11300:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"11306:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11296:3:25"},"nodeType":"YulFunctionCall","src":"11296:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11270:6:25"},"nodeType":"YulFunctionCall","src":"11270:47:25"},"nodeType":"YulExpressionStatement","src":"11270:47:25"},{"nodeType":"YulAssignment","src":"11326:86:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11398:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"11407:4:25"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11334:63:25"},"nodeType":"YulFunctionCall","src":"11334:78:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11326:4:25"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11196:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11208:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11219:4:25","type":""}],"src":"11106:313:25"},{"body":{"nodeType":"YulBlock","src":"11491:263:25","statements":[{"body":{"nodeType":"YulBlock","src":"11537:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11539:77:25"},"nodeType":"YulFunctionCall","src":"11539:79:25"},"nodeType":"YulExpressionStatement","src":"11539:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11512:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"11521:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11508:3:25"},"nodeType":"YulFunctionCall","src":"11508:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"11533:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11504:3:25"},"nodeType":"YulFunctionCall","src":"11504:32:25"},"nodeType":"YulIf","src":"11501:119:25"},{"nodeType":"YulBlock","src":"11630:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"11645:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"11659:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11649:6:25","type":""}]},{"nodeType":"YulAssignment","src":"11674:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11709:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"11720:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11705:3:25"},"nodeType":"YulFunctionCall","src":"11705:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11729:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11684:20:25"},"nodeType":"YulFunctionCall","src":"11684:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11674:6:25"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11461:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11472:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11484:6:25","type":""}],"src":"11425:329:25"},{"body":{"nodeType":"YulBlock","src":"11843:391:25","statements":[{"body":{"nodeType":"YulBlock","src":"11889:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11891:77:25"},"nodeType":"YulFunctionCall","src":"11891:79:25"},"nodeType":"YulExpressionStatement","src":"11891:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11864:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"11873:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11860:3:25"},"nodeType":"YulFunctionCall","src":"11860:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"11885:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11856:3:25"},"nodeType":"YulFunctionCall","src":"11856:32:25"},"nodeType":"YulIf","src":"11853:119:25"},{"nodeType":"YulBlock","src":"11982:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"11997:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"12011:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12001:6:25","type":""}]},{"nodeType":"YulAssignment","src":"12026:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12061:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"12072:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12057:3:25"},"nodeType":"YulFunctionCall","src":"12057:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12081:7:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"12036:20:25"},"nodeType":"YulFunctionCall","src":"12036:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12026:6:25"}]}]},{"nodeType":"YulBlock","src":"12109:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"12124:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"12138:2:25","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12128:6:25","type":""}]},{"nodeType":"YulAssignment","src":"12154:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12189:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"12200:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12185:3:25"},"nodeType":"YulFunctionCall","src":"12185:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12209:7:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"12164:20:25"},"nodeType":"YulFunctionCall","src":"12164:53:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12154:6:25"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11805:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11816:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11828:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11836:6:25","type":""}],"src":"11760:474:25"},{"body":{"nodeType":"YulBlock","src":"12306:241:25","statements":[{"body":{"nodeType":"YulBlock","src":"12411:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"12413:16:25"},"nodeType":"YulFunctionCall","src":"12413:18:25"},"nodeType":"YulExpressionStatement","src":"12413:18:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12383:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"12391:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12380:2:25"},"nodeType":"YulFunctionCall","src":"12380:30:25"},"nodeType":"YulIf","src":"12377:56:25"},{"nodeType":"YulAssignment","src":"12443:37:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12473:6:25"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"12451:21:25"},"nodeType":"YulFunctionCall","src":"12451:29:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"12443:4:25"}]},{"nodeType":"YulAssignment","src":"12517:23:25","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"12529:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"12535:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12525:3:25"},"nodeType":"YulFunctionCall","src":"12525:15:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"12517:4:25"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"12290:6:25","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"12301:4:25","type":""}],"src":"12240:307:25"},{"body":{"nodeType":"YulBlock","src":"12636:340:25","statements":[{"nodeType":"YulAssignment","src":"12646:74:25","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12712:6:25"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"12671:40:25"},"nodeType":"YulFunctionCall","src":"12671:48:25"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"12655:15:25"},"nodeType":"YulFunctionCall","src":"12655:65:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"12646:5:25"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"12736:5:25"},{"name":"length","nodeType":"YulIdentifier","src":"12743:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12729:6:25"},"nodeType":"YulFunctionCall","src":"12729:21:25"},"nodeType":"YulExpressionStatement","src":"12729:21:25"},{"nodeType":"YulVariableDeclaration","src":"12759:27:25","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"12774:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"12781:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12770:3:25"},"nodeType":"YulFunctionCall","src":"12770:16:25"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"12763:3:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"12824:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"12826:77:25"},"nodeType":"YulFunctionCall","src":"12826:79:25"},"nodeType":"YulExpressionStatement","src":"12826:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12805:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"12810:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12801:3:25"},"nodeType":"YulFunctionCall","src":"12801:16:25"},{"name":"end","nodeType":"YulIdentifier","src":"12819:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12798:2:25"},"nodeType":"YulFunctionCall","src":"12798:25:25"},"nodeType":"YulIf","src":"12795:112:25"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12953:3:25"},{"name":"dst","nodeType":"YulIdentifier","src":"12958:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"12963:6:25"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"12916:36:25"},"nodeType":"YulFunctionCall","src":"12916:54:25"},"nodeType":"YulExpressionStatement","src":"12916:54:25"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"12609:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"12614:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"12622:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"12630:5:25","type":""}],"src":"12553:423:25"},{"body":{"nodeType":"YulBlock","src":"13056:277:25","statements":[{"body":{"nodeType":"YulBlock","src":"13105:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"13107:77:25"},"nodeType":"YulFunctionCall","src":"13107:79:25"},"nodeType":"YulExpressionStatement","src":"13107:79:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13084:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"13092:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13080:3:25"},"nodeType":"YulFunctionCall","src":"13080:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"13099:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13076:3:25"},"nodeType":"YulFunctionCall","src":"13076:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13069:6:25"},"nodeType":"YulFunctionCall","src":"13069:35:25"},"nodeType":"YulIf","src":"13066:122:25"},{"nodeType":"YulVariableDeclaration","src":"13197:34:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13224:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13211:12:25"},"nodeType":"YulFunctionCall","src":"13211:20:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13201:6:25","type":""}]},{"nodeType":"YulAssignment","src":"13240:87:25","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13300:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"13308:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13296:3:25"},"nodeType":"YulFunctionCall","src":"13296:17:25"},{"name":"length","nodeType":"YulIdentifier","src":"13315:6:25"},{"name":"end","nodeType":"YulIdentifier","src":"13323:3:25"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"13249:46:25"},"nodeType":"YulFunctionCall","src":"13249:78:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"13240:5:25"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13034:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"13042:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"13050:5:25","type":""}],"src":"12995:338:25"},{"body":{"nodeType":"YulBlock","src":"13532:1316:25","statements":[{"body":{"nodeType":"YulBlock","src":"13579:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"13581:77:25"},"nodeType":"YulFunctionCall","src":"13581:79:25"},"nodeType":"YulExpressionStatement","src":"13581:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13553:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"13562:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13549:3:25"},"nodeType":"YulFunctionCall","src":"13549:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"13574:3:25","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13545:3:25"},"nodeType":"YulFunctionCall","src":"13545:33:25"},"nodeType":"YulIf","src":"13542:120:25"},{"nodeType":"YulBlock","src":"13672:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"13687:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"13701:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13691:6:25","type":""}]},{"nodeType":"YulAssignment","src":"13716:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13751:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"13762:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13747:3:25"},"nodeType":"YulFunctionCall","src":"13747:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13771:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"13726:20:25"},"nodeType":"YulFunctionCall","src":"13726:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13716:6:25"}]}]},{"nodeType":"YulBlock","src":"13799:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"13814:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"13828:2:25","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13818:6:25","type":""}]},{"nodeType":"YulAssignment","src":"13844:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13879:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"13890:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13875:3:25"},"nodeType":"YulFunctionCall","src":"13875:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13899:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"13854:20:25"},"nodeType":"YulFunctionCall","src":"13854:53:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"13844:6:25"}]}]},{"nodeType":"YulBlock","src":"13927:303:25","statements":[{"nodeType":"YulVariableDeclaration","src":"13942:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13973:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13984:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13969:3:25"},"nodeType":"YulFunctionCall","src":"13969:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13956:12:25"},"nodeType":"YulFunctionCall","src":"13956:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13946:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"14035:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"14037:77:25"},"nodeType":"YulFunctionCall","src":"14037:79:25"},"nodeType":"YulExpressionStatement","src":"14037:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14007:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"14015:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14004:2:25"},"nodeType":"YulFunctionCall","src":"14004:30:25"},"nodeType":"YulIf","src":"14001:117:25"},{"nodeType":"YulAssignment","src":"14132:88:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14192:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"14203:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14188:3:25"},"nodeType":"YulFunctionCall","src":"14188:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14212:7:25"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"14142:45:25"},"nodeType":"YulFunctionCall","src":"14142:78:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"14132:6:25"}]}]},{"nodeType":"YulBlock","src":"14240:303:25","statements":[{"nodeType":"YulVariableDeclaration","src":"14255:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14286:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14297:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14282:3:25"},"nodeType":"YulFunctionCall","src":"14282:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14269:12:25"},"nodeType":"YulFunctionCall","src":"14269:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14259:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"14348:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"14350:77:25"},"nodeType":"YulFunctionCall","src":"14350:79:25"},"nodeType":"YulExpressionStatement","src":"14350:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14320:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"14328:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14317:2:25"},"nodeType":"YulFunctionCall","src":"14317:30:25"},"nodeType":"YulIf","src":"14314:117:25"},{"nodeType":"YulAssignment","src":"14445:88:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14505:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"14516:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14501:3:25"},"nodeType":"YulFunctionCall","src":"14501:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14525:7:25"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"14455:45:25"},"nodeType":"YulFunctionCall","src":"14455:78:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"14445:6:25"}]}]},{"nodeType":"YulBlock","src":"14553:288:25","statements":[{"nodeType":"YulVariableDeclaration","src":"14568:47:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14599:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14610:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14595:3:25"},"nodeType":"YulFunctionCall","src":"14595:19:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14582:12:25"},"nodeType":"YulFunctionCall","src":"14582:33:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14572:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"14662:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"14664:77:25"},"nodeType":"YulFunctionCall","src":"14664:79:25"},"nodeType":"YulExpressionStatement","src":"14664:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14634:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"14642:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14631:2:25"},"nodeType":"YulFunctionCall","src":"14631:30:25"},"nodeType":"YulIf","src":"14628:117:25"},{"nodeType":"YulAssignment","src":"14759:72:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14803:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"14814:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14799:3:25"},"nodeType":"YulFunctionCall","src":"14799:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14823:7:25"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"14769:29:25"},"nodeType":"YulFunctionCall","src":"14769:62:25"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"14759:6:25"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13470:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13481:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13493:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13501:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13509:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13517:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"13525:6:25","type":""}],"src":"13339:1509:25"},{"body":{"nodeType":"YulBlock","src":"14928:40:25","statements":[{"nodeType":"YulAssignment","src":"14939:22:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14955:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14949:5:25"},"nodeType":"YulFunctionCall","src":"14949:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"14939:6:25"}]}]},"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14911:5:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"14921:6:25","type":""}],"src":"14854:114:25"},{"body":{"nodeType":"YulBlock","src":"15085:73:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15102:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"15107:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15095:6:25"},"nodeType":"YulFunctionCall","src":"15095:19:25"},"nodeType":"YulExpressionStatement","src":"15095:19:25"},{"nodeType":"YulAssignment","src":"15123:29:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15142:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"15147:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15138:3:25"},"nodeType":"YulFunctionCall","src":"15138:14:25"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"15123:11:25"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15057:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"15062:6:25","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"15073:11:25","type":""}],"src":"14974:184:25"},{"body":{"nodeType":"YulBlock","src":"15236:60:25","statements":[{"nodeType":"YulAssignment","src":"15246:11:25","value":{"name":"ptr","nodeType":"YulIdentifier","src":"15254:3:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"15246:4:25"}]},{"nodeType":"YulAssignment","src":"15267:22:25","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"15279:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"15284:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15275:3:25"},"nodeType":"YulFunctionCall","src":"15275:14:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"15267:4:25"}]}]},"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"15223:3:25","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"15231:4:25","type":""}],"src":"15164:132:25"},{"body":{"nodeType":"YulBlock","src":"15357:53:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15374:3:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15397:5:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15379:17:25"},"nodeType":"YulFunctionCall","src":"15379:24:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15367:6:25"},"nodeType":"YulFunctionCall","src":"15367:37:25"},"nodeType":"YulExpressionStatement","src":"15367:37:25"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15345:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15352:3:25","type":""}],"src":"15302:108:25"},{"body":{"nodeType":"YulBlock","src":"15496:99:25","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15540:6:25"},{"name":"pos","nodeType":"YulIdentifier","src":"15548:3:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"15506:33:25"},"nodeType":"YulFunctionCall","src":"15506:46:25"},"nodeType":"YulExpressionStatement","src":"15506:46:25"},{"nodeType":"YulAssignment","src":"15561:28:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15579:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"15584:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15575:3:25"},"nodeType":"YulFunctionCall","src":"15575:14:25"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"15561:10:25"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"15469:6:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15477:3:25","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"15485:10:25","type":""}],"src":"15416:179:25"},{"body":{"nodeType":"YulBlock","src":"15676:38:25","statements":[{"nodeType":"YulAssignment","src":"15686:22:25","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"15698:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"15703:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15694:3:25"},"nodeType":"YulFunctionCall","src":"15694:14:25"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"15686:4:25"}]}]},"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"15663:3:25","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"15671:4:25","type":""}],"src":"15601:113:25"},{"body":{"nodeType":"YulBlock","src":"15874:608:25","statements":[{"nodeType":"YulVariableDeclaration","src":"15884:68:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15946:5:25"}],"functionName":{"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"15898:47:25"},"nodeType":"YulFunctionCall","src":"15898:54:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15888:6:25","type":""}]},{"nodeType":"YulAssignment","src":"15961:93:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16042:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"16047:6:25"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15968:73:25"},"nodeType":"YulFunctionCall","src":"15968:86:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15961:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"16063:71:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16128:5:25"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"16078:49:25"},"nodeType":"YulFunctionCall","src":"16078:56:25"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"16067:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16143:21:25","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"16157:7:25"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"16147:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"16233:224:25","statements":[{"nodeType":"YulVariableDeclaration","src":"16247:34:25","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"16274:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16268:5:25"},"nodeType":"YulFunctionCall","src":"16268:13:25"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"16251:13:25","type":""}]},{"nodeType":"YulAssignment","src":"16294:70:25","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"16345:13:25"},{"name":"pos","nodeType":"YulIdentifier","src":"16360:3:25"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"16301:43:25"},"nodeType":"YulFunctionCall","src":"16301:63:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16294:3:25"}]},{"nodeType":"YulAssignment","src":"16377:70:25","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"16440:6:25"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"16387:52:25"},"nodeType":"YulFunctionCall","src":"16387:60:25"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"16377:6:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16195:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"16198:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16192:2:25"},"nodeType":"YulFunctionCall","src":"16192:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16206:18:25","statements":[{"nodeType":"YulAssignment","src":"16208:14:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16217:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"16220:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16213:3:25"},"nodeType":"YulFunctionCall","src":"16213:9:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16208:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"16177:14:25","statements":[{"nodeType":"YulVariableDeclaration","src":"16179:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"16188:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16183:1:25","type":""}]}]},"src":"16173:284:25"},{"nodeType":"YulAssignment","src":"16466:10:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"16473:3:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16466:3:25"}]}]},"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15853:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15860:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15869:3:25","type":""}],"src":"15750:732:25"},{"body":{"nodeType":"YulBlock","src":"16636:225:25","statements":[{"nodeType":"YulAssignment","src":"16646:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16658:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16669:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16654:3:25"},"nodeType":"YulFunctionCall","src":"16654:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16646:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16693:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16704:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16689:3:25"},"nodeType":"YulFunctionCall","src":"16689:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16712:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"16718:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16708:3:25"},"nodeType":"YulFunctionCall","src":"16708:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16682:6:25"},"nodeType":"YulFunctionCall","src":"16682:47:25"},"nodeType":"YulExpressionStatement","src":"16682:47:25"},{"nodeType":"YulAssignment","src":"16738:116:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16840:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"16849:4:25"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16746:93:25"},"nodeType":"YulFunctionCall","src":"16746:108:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16738:4:25"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16608:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16620:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16631:4:25","type":""}],"src":"16488:373:25"},{"body":{"nodeType":"YulBlock","src":"16959:560:25","statements":[{"body":{"nodeType":"YulBlock","src":"17005:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"17007:77:25"},"nodeType":"YulFunctionCall","src":"17007:79:25"},"nodeType":"YulExpressionStatement","src":"17007:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16980:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"16989:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16976:3:25"},"nodeType":"YulFunctionCall","src":"16976:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"17001:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16972:3:25"},"nodeType":"YulFunctionCall","src":"16972:32:25"},"nodeType":"YulIf","src":"16969:119:25"},{"nodeType":"YulBlock","src":"17098:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"17113:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"17127:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17117:6:25","type":""}]},{"nodeType":"YulAssignment","src":"17142:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17177:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"17188:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17173:3:25"},"nodeType":"YulFunctionCall","src":"17173:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17197:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"17152:20:25"},"nodeType":"YulFunctionCall","src":"17152:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17142:6:25"}]}]},{"nodeType":"YulBlock","src":"17225:287:25","statements":[{"nodeType":"YulVariableDeclaration","src":"17240:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17271:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17282:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17267:3:25"},"nodeType":"YulFunctionCall","src":"17267:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17254:12:25"},"nodeType":"YulFunctionCall","src":"17254:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17244:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"17333:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"17335:77:25"},"nodeType":"YulFunctionCall","src":"17335:79:25"},"nodeType":"YulExpressionStatement","src":"17335:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"17305:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"17313:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17302:2:25"},"nodeType":"YulFunctionCall","src":"17302:30:25"},"nodeType":"YulIf","src":"17299:117:25"},{"nodeType":"YulAssignment","src":"17430:72:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17474:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"17485:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17470:3:25"},"nodeType":"YulFunctionCall","src":"17470:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17494:7:25"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"17440:29:25"},"nodeType":"YulFunctionCall","src":"17440:62:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"17430:6:25"}]}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16921:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16932:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16944:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16952:6:25","type":""}],"src":"16867:652:25"},{"body":{"nodeType":"YulBlock","src":"17570:32:25","statements":[{"nodeType":"YulAssignment","src":"17580:16:25","value":{"name":"value","nodeType":"YulIdentifier","src":"17591:5:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"17580:7:25"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17552:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"17562:7:25","type":""}],"src":"17525:77:25"},{"body":{"nodeType":"YulBlock","src":"17673:53:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17690:3:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17713:5:25"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"17695:17:25"},"nodeType":"YulFunctionCall","src":"17695:24:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17683:6:25"},"nodeType":"YulFunctionCall","src":"17683:37:25"},"nodeType":"YulExpressionStatement","src":"17683:37:25"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17661:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17668:3:25","type":""}],"src":"17608:118:25"},{"body":{"nodeType":"YulBlock","src":"17830:124:25","statements":[{"nodeType":"YulAssignment","src":"17840:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17852:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17863:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17848:3:25"},"nodeType":"YulFunctionCall","src":"17848:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17840:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17920:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17933:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17944:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17929:3:25"},"nodeType":"YulFunctionCall","src":"17929:17:25"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"17876:43:25"},"nodeType":"YulFunctionCall","src":"17876:71:25"},"nodeType":"YulExpressionStatement","src":"17876:71:25"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17802:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17814:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17825:4:25","type":""}],"src":"17732:222:25"},{"body":{"nodeType":"YulBlock","src":"18025:53:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18042:3:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18065:5:25"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"18047:17:25"},"nodeType":"YulFunctionCall","src":"18047:24:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18035:6:25"},"nodeType":"YulFunctionCall","src":"18035:37:25"},"nodeType":"YulExpressionStatement","src":"18035:37:25"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18013:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18020:3:25","type":""}],"src":"17960:118:25"},{"body":{"nodeType":"YulBlock","src":"18182:124:25","statements":[{"nodeType":"YulAssignment","src":"18192:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18204:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18215:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18200:3:25"},"nodeType":"YulFunctionCall","src":"18200:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18192:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18272:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18285:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18296:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18281:3:25"},"nodeType":"YulFunctionCall","src":"18281:17:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18228:43:25"},"nodeType":"YulFunctionCall","src":"18228:71:25"},"nodeType":"YulExpressionStatement","src":"18228:71:25"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18154:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18166:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18177:4:25","type":""}],"src":"18084:222:25"},{"body":{"nodeType":"YulBlock","src":"18395:391:25","statements":[{"body":{"nodeType":"YulBlock","src":"18441:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"18443:77:25"},"nodeType":"YulFunctionCall","src":"18443:79:25"},"nodeType":"YulExpressionStatement","src":"18443:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18416:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"18425:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18412:3:25"},"nodeType":"YulFunctionCall","src":"18412:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"18437:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18408:3:25"},"nodeType":"YulFunctionCall","src":"18408:32:25"},"nodeType":"YulIf","src":"18405:119:25"},{"nodeType":"YulBlock","src":"18534:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"18549:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"18563:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"18553:6:25","type":""}]},{"nodeType":"YulAssignment","src":"18578:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18613:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"18624:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18609:3:25"},"nodeType":"YulFunctionCall","src":"18609:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"18633:7:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"18588:20:25"},"nodeType":"YulFunctionCall","src":"18588:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18578:6:25"}]}]},{"nodeType":"YulBlock","src":"18661:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"18676:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"18690:2:25","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"18680:6:25","type":""}]},{"nodeType":"YulAssignment","src":"18706:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18741:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"18752:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18737:3:25"},"nodeType":"YulFunctionCall","src":"18737:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"18761:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"18716:20:25"},"nodeType":"YulFunctionCall","src":"18716:53:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"18706:6:25"}]}]}]},"name":"abi_decode_tuple_t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18357:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18368:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18380:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18388:6:25","type":""}],"src":"18312:474:25"},{"body":{"nodeType":"YulBlock","src":"18832:76:25","statements":[{"body":{"nodeType":"YulBlock","src":"18886:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18895:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18898:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18888:6:25"},"nodeType":"YulFunctionCall","src":"18888:12:25"},"nodeType":"YulExpressionStatement","src":"18888:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18855:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18877:5:25"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"18862:14:25"},"nodeType":"YulFunctionCall","src":"18862:21:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18852:2:25"},"nodeType":"YulFunctionCall","src":"18852:32:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18845:6:25"},"nodeType":"YulFunctionCall","src":"18845:40:25"},"nodeType":"YulIf","src":"18842:60:25"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18825:5:25","type":""}],"src":"18792:116:25"},{"body":{"nodeType":"YulBlock","src":"18963:84:25","statements":[{"nodeType":"YulAssignment","src":"18973:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18995:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"18982:12:25"},"nodeType":"YulFunctionCall","src":"18982:20:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"18973:5:25"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19035:5:25"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"19011:23:25"},"nodeType":"YulFunctionCall","src":"19011:30:25"},"nodeType":"YulExpressionStatement","src":"19011:30:25"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"18941:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"18949:3:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"18957:5:25","type":""}],"src":"18914:133:25"},{"body":{"nodeType":"YulBlock","src":"19133:388:25","statements":[{"body":{"nodeType":"YulBlock","src":"19179:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"19181:77:25"},"nodeType":"YulFunctionCall","src":"19181:79:25"},"nodeType":"YulExpressionStatement","src":"19181:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19154:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"19163:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19150:3:25"},"nodeType":"YulFunctionCall","src":"19150:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"19175:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19146:3:25"},"nodeType":"YulFunctionCall","src":"19146:32:25"},"nodeType":"YulIf","src":"19143:119:25"},{"nodeType":"YulBlock","src":"19272:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"19287:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"19301:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19291:6:25","type":""}]},{"nodeType":"YulAssignment","src":"19316:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19351:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"19362:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19347:3:25"},"nodeType":"YulFunctionCall","src":"19347:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19371:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"19326:20:25"},"nodeType":"YulFunctionCall","src":"19326:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19316:6:25"}]}]},{"nodeType":"YulBlock","src":"19399:115:25","statements":[{"nodeType":"YulVariableDeclaration","src":"19414:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"19428:2:25","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19418:6:25","type":""}]},{"nodeType":"YulAssignment","src":"19444:60:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19476:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"19487:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19472:3:25"},"nodeType":"YulFunctionCall","src":"19472:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19496:7:25"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"19454:17:25"},"nodeType":"YulFunctionCall","src":"19454:50:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"19444:6:25"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19095:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19106:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19118:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19126:6:25","type":""}],"src":"19053:468:25"},{"body":{"nodeType":"YulBlock","src":"19662:874:25","statements":[{"body":{"nodeType":"YulBlock","src":"19708:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"19710:77:25"},"nodeType":"YulFunctionCall","src":"19710:79:25"},"nodeType":"YulExpressionStatement","src":"19710:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19683:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"19692:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19679:3:25"},"nodeType":"YulFunctionCall","src":"19679:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"19704:2:25","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19675:3:25"},"nodeType":"YulFunctionCall","src":"19675:32:25"},"nodeType":"YulIf","src":"19672:119:25"},{"nodeType":"YulBlock","src":"19801:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"19816:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"19830:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19820:6:25","type":""}]},{"nodeType":"YulAssignment","src":"19845:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19880:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"19891:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19876:3:25"},"nodeType":"YulFunctionCall","src":"19876:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19900:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"19855:20:25"},"nodeType":"YulFunctionCall","src":"19855:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19845:6:25"}]}]},{"nodeType":"YulBlock","src":"19928:303:25","statements":[{"nodeType":"YulVariableDeclaration","src":"19943:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19974:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"19985:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19970:3:25"},"nodeType":"YulFunctionCall","src":"19970:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19957:12:25"},"nodeType":"YulFunctionCall","src":"19957:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19947:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"20036:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"20038:77:25"},"nodeType":"YulFunctionCall","src":"20038:79:25"},"nodeType":"YulExpressionStatement","src":"20038:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20008:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"20016:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20005:2:25"},"nodeType":"YulFunctionCall","src":"20005:30:25"},"nodeType":"YulIf","src":"20002:117:25"},{"nodeType":"YulAssignment","src":"20133:88:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20193:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"20204:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20189:3:25"},"nodeType":"YulFunctionCall","src":"20189:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20213:7:25"}],"functionName":{"name":"abi_decode_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"20143:45:25"},"nodeType":"YulFunctionCall","src":"20143:78:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"20133:6:25"}]}]},{"nodeType":"YulBlock","src":"20241:288:25","statements":[{"nodeType":"YulVariableDeclaration","src":"20256:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20287:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"20298:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20283:3:25"},"nodeType":"YulFunctionCall","src":"20283:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20270:12:25"},"nodeType":"YulFunctionCall","src":"20270:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20260:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"20349:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"20351:77:25"},"nodeType":"YulFunctionCall","src":"20351:79:25"},"nodeType":"YulExpressionStatement","src":"20351:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20321:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"20329:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20318:2:25"},"nodeType":"YulFunctionCall","src":"20318:30:25"},"nodeType":"YulIf","src":"20315:117:25"},{"nodeType":"YulAssignment","src":"20446:73:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20491:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"20502:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20487:3:25"},"nodeType":"YulFunctionCall","src":"20487:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20511:7:25"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"20456:30:25"},"nodeType":"YulFunctionCall","src":"20456:63:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"20446:6:25"}]}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_address_$dyn_memory_ptrt_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19616:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19627:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19639:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19647:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19655:6:25","type":""}],"src":"19527:1009:25"},{"body":{"nodeType":"YulBlock","src":"20625:391:25","statements":[{"body":{"nodeType":"YulBlock","src":"20671:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"20673:77:25"},"nodeType":"YulFunctionCall","src":"20673:79:25"},"nodeType":"YulExpressionStatement","src":"20673:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"20646:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"20655:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20642:3:25"},"nodeType":"YulFunctionCall","src":"20642:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"20667:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20638:3:25"},"nodeType":"YulFunctionCall","src":"20638:32:25"},"nodeType":"YulIf","src":"20635:119:25"},{"nodeType":"YulBlock","src":"20764:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"20779:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"20793:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20783:6:25","type":""}]},{"nodeType":"YulAssignment","src":"20808:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20843:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"20854:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20839:3:25"},"nodeType":"YulFunctionCall","src":"20839:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20863:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"20818:20:25"},"nodeType":"YulFunctionCall","src":"20818:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"20808:6:25"}]}]},{"nodeType":"YulBlock","src":"20891:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"20906:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"20920:2:25","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20910:6:25","type":""}]},{"nodeType":"YulAssignment","src":"20936:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20971:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"20982:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20967:3:25"},"nodeType":"YulFunctionCall","src":"20967:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20991:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"20946:20:25"},"nodeType":"YulFunctionCall","src":"20946:53:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"20936:6:25"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20587:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"20598:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"20610:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20618:6:25","type":""}],"src":"20542:474:25"},{"body":{"nodeType":"YulBlock","src":"21165:946:25","statements":[{"body":{"nodeType":"YulBlock","src":"21212:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"21214:77:25"},"nodeType":"YulFunctionCall","src":"21214:79:25"},"nodeType":"YulExpressionStatement","src":"21214:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"21186:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"21195:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21182:3:25"},"nodeType":"YulFunctionCall","src":"21182:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"21207:3:25","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21178:3:25"},"nodeType":"YulFunctionCall","src":"21178:33:25"},"nodeType":"YulIf","src":"21175:120:25"},{"nodeType":"YulBlock","src":"21305:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"21320:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"21334:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21324:6:25","type":""}]},{"nodeType":"YulAssignment","src":"21349:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21384:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"21395:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21380:3:25"},"nodeType":"YulFunctionCall","src":"21380:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21404:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"21359:20:25"},"nodeType":"YulFunctionCall","src":"21359:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"21349:6:25"}]}]},{"nodeType":"YulBlock","src":"21432:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"21447:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"21461:2:25","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21451:6:25","type":""}]},{"nodeType":"YulAssignment","src":"21477:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21512:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"21523:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21508:3:25"},"nodeType":"YulFunctionCall","src":"21508:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21532:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"21487:20:25"},"nodeType":"YulFunctionCall","src":"21487:53:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"21477:6:25"}]}]},{"nodeType":"YulBlock","src":"21560:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"21575:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"21589:2:25","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21579:6:25","type":""}]},{"nodeType":"YulAssignment","src":"21605:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21640:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"21651:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21636:3:25"},"nodeType":"YulFunctionCall","src":"21636:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21660:7:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"21615:20:25"},"nodeType":"YulFunctionCall","src":"21615:53:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"21605:6:25"}]}]},{"nodeType":"YulBlock","src":"21688:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"21703:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"21717:2:25","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21707:6:25","type":""}]},{"nodeType":"YulAssignment","src":"21733:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21768:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"21779:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21764:3:25"},"nodeType":"YulFunctionCall","src":"21764:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21788:7:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"21743:20:25"},"nodeType":"YulFunctionCall","src":"21743:53:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"21733:6:25"}]}]},{"nodeType":"YulBlock","src":"21816:288:25","statements":[{"nodeType":"YulVariableDeclaration","src":"21831:47:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21862:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"21873:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21858:3:25"},"nodeType":"YulFunctionCall","src":"21858:19:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"21845:12:25"},"nodeType":"YulFunctionCall","src":"21845:33:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21835:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"21925:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"21927:77:25"},"nodeType":"YulFunctionCall","src":"21927:79:25"},"nodeType":"YulExpressionStatement","src":"21927:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"21897:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"21905:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21894:2:25"},"nodeType":"YulFunctionCall","src":"21894:30:25"},"nodeType":"YulIf","src":"21891:117:25"},{"nodeType":"YulAssignment","src":"22022:72:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22066:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"22077:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22062:3:25"},"nodeType":"YulFunctionCall","src":"22062:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22086:7:25"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"22032:29:25"},"nodeType":"YulFunctionCall","src":"22032:62:25"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"22022:6:25"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21103:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"21114:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"21126:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21134:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21142:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"21150:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"21158:6:25","type":""}],"src":"21022:1089:25"},{"body":{"nodeType":"YulBlock","src":"22223:53:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22245:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"22253:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22241:3:25"},"nodeType":"YulFunctionCall","src":"22241:14:25"},{"hexValue":"6e6f742061646d696e","kind":"string","nodeType":"YulLiteral","src":"22257:11:25","type":"","value":"not admin"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22234:6:25"},"nodeType":"YulFunctionCall","src":"22234:35:25"},"nodeType":"YulExpressionStatement","src":"22234:35:25"}]},"name":"store_literal_in_memory_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22215:6:25","type":""}],"src":"22117:159:25"},{"body":{"nodeType":"YulBlock","src":"22428:219:25","statements":[{"nodeType":"YulAssignment","src":"22438:73:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22504:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"22509:1:25","type":"","value":"9"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22445:58:25"},"nodeType":"YulFunctionCall","src":"22445:66:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22438:3:25"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22609:3:25"}],"functionName":{"name":"store_literal_in_memory_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","nodeType":"YulIdentifier","src":"22520:88:25"},"nodeType":"YulFunctionCall","src":"22520:93:25"},"nodeType":"YulExpressionStatement","src":"22520:93:25"},{"nodeType":"YulAssignment","src":"22622:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22633:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"22638:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22629:3:25"},"nodeType":"YulFunctionCall","src":"22629:12:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22622:3:25"}]}]},"name":"abi_encode_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22416:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22424:3:25","type":""}],"src":"22282:365:25"},{"body":{"nodeType":"YulBlock","src":"22824:248:25","statements":[{"nodeType":"YulAssignment","src":"22834:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22846:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"22857:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22842:3:25"},"nodeType":"YulFunctionCall","src":"22842:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22834:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22881:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"22892:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22877:3:25"},"nodeType":"YulFunctionCall","src":"22877:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22900:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"22906:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22896:3:25"},"nodeType":"YulFunctionCall","src":"22896:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22870:6:25"},"nodeType":"YulFunctionCall","src":"22870:47:25"},"nodeType":"YulExpressionStatement","src":"22870:47:25"},{"nodeType":"YulAssignment","src":"22926:139:25","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23060:4:25"}],"functionName":{"name":"abi_encode_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22934:124:25"},"nodeType":"YulFunctionCall","src":"22934:131:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22926:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22804:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22819:4:25","type":""}],"src":"22653:419:25"},{"body":{"nodeType":"YulBlock","src":"23106:152:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23123:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23126:77:25","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23116:6:25"},"nodeType":"YulFunctionCall","src":"23116:88:25"},"nodeType":"YulExpressionStatement","src":"23116:88:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23220:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"23223:4:25","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23213:6:25"},"nodeType":"YulFunctionCall","src":"23213:15:25"},"nodeType":"YulExpressionStatement","src":"23213:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23244:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23247:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23237:6:25"},"nodeType":"YulFunctionCall","src":"23237:15:25"},"nodeType":"YulExpressionStatement","src":"23237:15:25"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"23078:180:25"},{"body":{"nodeType":"YulBlock","src":"23390:206:25","statements":[{"nodeType":"YulAssignment","src":"23400:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23412:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"23423:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23408:3:25"},"nodeType":"YulFunctionCall","src":"23408:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23400:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23480:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23493:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"23504:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23489:3:25"},"nodeType":"YulFunctionCall","src":"23489:17:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"23436:43:25"},"nodeType":"YulFunctionCall","src":"23436:71:25"},"nodeType":"YulExpressionStatement","src":"23436:71:25"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23561:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23574:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"23585:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23570:3:25"},"nodeType":"YulFunctionCall","src":"23570:18:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"23517:43:25"},"nodeType":"YulFunctionCall","src":"23517:72:25"},"nodeType":"YulExpressionStatement","src":"23517:72:25"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23354:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23366:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23374:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23385:4:25","type":""}],"src":"23264:332:25"},{"body":{"nodeType":"YulBlock","src":"23630:152:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23647:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23650:77:25","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23640:6:25"},"nodeType":"YulFunctionCall","src":"23640:88:25"},"nodeType":"YulExpressionStatement","src":"23640:88:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23744:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"23747:4:25","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23737:6:25"},"nodeType":"YulFunctionCall","src":"23737:15:25"},"nodeType":"YulExpressionStatement","src":"23737:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23768:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23771:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23761:6:25"},"nodeType":"YulFunctionCall","src":"23761:15:25"},"nodeType":"YulExpressionStatement","src":"23761:15:25"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"23602:180:25"},{"body":{"nodeType":"YulBlock","src":"23831:190:25","statements":[{"nodeType":"YulAssignment","src":"23841:33:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23868:5:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23850:17:25"},"nodeType":"YulFunctionCall","src":"23850:24:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23841:5:25"}]},{"body":{"nodeType":"YulBlock","src":"23964:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"23966:16:25"},"nodeType":"YulFunctionCall","src":"23966:18:25"},"nodeType":"YulExpressionStatement","src":"23966:18:25"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23889:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"23896:66:25","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23886:2:25"},"nodeType":"YulFunctionCall","src":"23886:77:25"},"nodeType":"YulIf","src":"23883:103:25"},{"nodeType":"YulAssignment","src":"23995:20:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24006:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"24013:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24002:3:25"},"nodeType":"YulFunctionCall","src":"24002:13:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"23995:3:25"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23817:5:25","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"23827:3:25","type":""}],"src":"23788:233:25"},{"body":{"nodeType":"YulBlock","src":"24055:152:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24072:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24075:77:25","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24065:6:25"},"nodeType":"YulFunctionCall","src":"24065:88:25"},"nodeType":"YulExpressionStatement","src":"24065:88:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24169:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"24172:4:25","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24162:6:25"},"nodeType":"YulFunctionCall","src":"24162:15:25"},"nodeType":"YulExpressionStatement","src":"24162:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24193:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24196:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24186:6:25"},"nodeType":"YulFunctionCall","src":"24186:15:25"},"nodeType":"YulExpressionStatement","src":"24186:15:25"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"24027:180:25"},{"body":{"nodeType":"YulBlock","src":"24264:269:25","statements":[{"nodeType":"YulAssignment","src":"24274:22:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24288:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"24294:1:25","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"24284:3:25"},"nodeType":"YulFunctionCall","src":"24284:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"24274:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"24305:38:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"24335:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"24341:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24331:3:25"},"nodeType":"YulFunctionCall","src":"24331:12:25"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"24309:18:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"24382:51:25","statements":[{"nodeType":"YulAssignment","src":"24396:27:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"24410:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"24418:4:25","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24406:3:25"},"nodeType":"YulFunctionCall","src":"24406:17:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"24396:6:25"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"24362:18:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"24355:6:25"},"nodeType":"YulFunctionCall","src":"24355:26:25"},"nodeType":"YulIf","src":"24352:81:25"},{"body":{"nodeType":"YulBlock","src":"24485:42:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"24499:16:25"},"nodeType":"YulFunctionCall","src":"24499:18:25"},"nodeType":"YulExpressionStatement","src":"24499:18:25"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"24449:18:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"24472:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"24480:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24469:2:25"},"nodeType":"YulFunctionCall","src":"24469:14:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"24446:2:25"},"nodeType":"YulFunctionCall","src":"24446:38:25"},"nodeType":"YulIf","src":"24443:84:25"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"24248:4:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"24257:6:25","type":""}],"src":"24213:320:25"},{"body":{"nodeType":"YulBlock","src":"24645:115:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24667:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"24675:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24663:3:25"},"nodeType":"YulFunctionCall","src":"24663:14:25"},{"hexValue":"73656e646572206973206e6f74206f776e657220666f72207468697320746f6b","kind":"string","nodeType":"YulLiteral","src":"24679:34:25","type":"","value":"sender is not owner for this tok"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24656:6:25"},"nodeType":"YulFunctionCall","src":"24656:58:25"},"nodeType":"YulExpressionStatement","src":"24656:58:25"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24735:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"24743:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24731:3:25"},"nodeType":"YulFunctionCall","src":"24731:15:25"},{"hexValue":"656e","kind":"string","nodeType":"YulLiteral","src":"24748:4:25","type":"","value":"en"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24724:6:25"},"nodeType":"YulFunctionCall","src":"24724:29:25"},"nodeType":"YulExpressionStatement","src":"24724:29:25"}]},"name":"store_literal_in_memory_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24637:6:25","type":""}],"src":"24539:221:25"},{"body":{"nodeType":"YulBlock","src":"24912:220:25","statements":[{"nodeType":"YulAssignment","src":"24922:74:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24988:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"24993:2:25","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24929:58:25"},"nodeType":"YulFunctionCall","src":"24929:67:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24922:3:25"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25094:3:25"}],"functionName":{"name":"store_literal_in_memory_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75","nodeType":"YulIdentifier","src":"25005:88:25"},"nodeType":"YulFunctionCall","src":"25005:93:25"},"nodeType":"YulExpressionStatement","src":"25005:93:25"},{"nodeType":"YulAssignment","src":"25107:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25118:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"25123:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25114:3:25"},"nodeType":"YulFunctionCall","src":"25114:12:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25107:3:25"}]}]},"name":"abi_encode_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24900:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24908:3:25","type":""}],"src":"24766:366:25"},{"body":{"nodeType":"YulBlock","src":"25309:248:25","statements":[{"nodeType":"YulAssignment","src":"25319:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25331:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"25342:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25327:3:25"},"nodeType":"YulFunctionCall","src":"25327:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25319:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25366:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"25377:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25362:3:25"},"nodeType":"YulFunctionCall","src":"25362:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25385:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"25391:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25381:3:25"},"nodeType":"YulFunctionCall","src":"25381:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25355:6:25"},"nodeType":"YulFunctionCall","src":"25355:47:25"},"nodeType":"YulExpressionStatement","src":"25355:47:25"},{"nodeType":"YulAssignment","src":"25411:139:25","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25545:4:25"}],"functionName":{"name":"abi_encode_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25419:124:25"},"nodeType":"YulFunctionCall","src":"25419:131:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25411:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25289:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25304:4:25","type":""}],"src":"25138:419:25"},{"body":{"nodeType":"YulBlock","src":"25607:147:25","statements":[{"nodeType":"YulAssignment","src":"25617:25:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25640:1:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25622:17:25"},"nodeType":"YulFunctionCall","src":"25622:20:25"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"25617:1:25"}]},{"nodeType":"YulAssignment","src":"25651:25:25","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25674:1:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25656:17:25"},"nodeType":"YulFunctionCall","src":"25656:20:25"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"25651:1:25"}]},{"nodeType":"YulAssignment","src":"25685:16:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25696:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"25699:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25692:3:25"},"nodeType":"YulFunctionCall","src":"25692:9:25"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"25685:3:25"}]},{"body":{"nodeType":"YulBlock","src":"25725:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25727:16:25"},"nodeType":"YulFunctionCall","src":"25727:18:25"},"nodeType":"YulExpressionStatement","src":"25727:18:25"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25717:1:25"},{"name":"sum","nodeType":"YulIdentifier","src":"25720:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25714:2:25"},"nodeType":"YulFunctionCall","src":"25714:10:25"},"nodeType":"YulIf","src":"25711:36:25"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"25594:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"25597:1:25","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"25603:3:25","type":""}],"src":"25563:191:25"},{"body":{"nodeType":"YulBlock","src":"25866:71:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25888:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"25896:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25884:3:25"},"nodeType":"YulFunctionCall","src":"25884:14:25"},{"hexValue":"6e657720737570706c7920776f756c6420657863656564206d6178","kind":"string","nodeType":"YulLiteral","src":"25900:29:25","type":"","value":"new supply would exceed max"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25877:6:25"},"nodeType":"YulFunctionCall","src":"25877:53:25"},"nodeType":"YulExpressionStatement","src":"25877:53:25"}]},"name":"store_literal_in_memory_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"25858:6:25","type":""}],"src":"25760:177:25"},{"body":{"nodeType":"YulBlock","src":"26089:220:25","statements":[{"nodeType":"YulAssignment","src":"26099:74:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26165:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"26170:2:25","type":"","value":"27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26106:58:25"},"nodeType":"YulFunctionCall","src":"26106:67:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26099:3:25"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26271:3:25"}],"functionName":{"name":"store_literal_in_memory_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483","nodeType":"YulIdentifier","src":"26182:88:25"},"nodeType":"YulFunctionCall","src":"26182:93:25"},"nodeType":"YulExpressionStatement","src":"26182:93:25"},{"nodeType":"YulAssignment","src":"26284:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26295:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"26300:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26291:3:25"},"nodeType":"YulFunctionCall","src":"26291:12:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26284:3:25"}]}]},"name":"abi_encode_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26077:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26085:3:25","type":""}],"src":"25943:366:25"},{"body":{"nodeType":"YulBlock","src":"26486:248:25","statements":[{"nodeType":"YulAssignment","src":"26496:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26508:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"26519:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26504:3:25"},"nodeType":"YulFunctionCall","src":"26504:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26496:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26543:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"26554:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26539:3:25"},"nodeType":"YulFunctionCall","src":"26539:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26562:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"26568:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26558:3:25"},"nodeType":"YulFunctionCall","src":"26558:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26532:6:25"},"nodeType":"YulFunctionCall","src":"26532:47:25"},"nodeType":"YulExpressionStatement","src":"26532:47:25"},{"nodeType":"YulAssignment","src":"26588:139:25","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26722:4:25"}],"functionName":{"name":"abi_encode_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26596:124:25"},"nodeType":"YulFunctionCall","src":"26596:131:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26588:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26466:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26481:4:25","type":""}],"src":"26315:419:25"},{"body":{"nodeType":"YulBlock","src":"26800:77:25","statements":[{"nodeType":"YulAssignment","src":"26810:22:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"26825:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"26819:5:25"},"nodeType":"YulFunctionCall","src":"26819:13:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"26810:5:25"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"26865:5:25"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"26841:23:25"},"nodeType":"YulFunctionCall","src":"26841:30:25"},"nodeType":"YulExpressionStatement","src":"26841:30:25"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"26778:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"26786:3:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"26794:5:25","type":""}],"src":"26740:137:25"},{"body":{"nodeType":"YulBlock","src":"26957:271:25","statements":[{"body":{"nodeType":"YulBlock","src":"27003:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"27005:77:25"},"nodeType":"YulFunctionCall","src":"27005:79:25"},"nodeType":"YulExpressionStatement","src":"27005:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"26978:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"26987:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26974:3:25"},"nodeType":"YulFunctionCall","src":"26974:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"26999:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"26970:3:25"},"nodeType":"YulFunctionCall","src":"26970:32:25"},"nodeType":"YulIf","src":"26967:119:25"},{"nodeType":"YulBlock","src":"27096:125:25","statements":[{"nodeType":"YulVariableDeclaration","src":"27111:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"27125:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"27115:6:25","type":""}]},{"nodeType":"YulAssignment","src":"27140:71:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27183:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"27194:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27179:3:25"},"nodeType":"YulFunctionCall","src":"27179:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"27203:7:25"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"27150:28:25"},"nodeType":"YulFunctionCall","src":"27150:61:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"27140:6:25"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26927:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"26938:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"26950:6:25","type":""}],"src":"26883:345:25"},{"body":{"nodeType":"YulBlock","src":"27360:206:25","statements":[{"nodeType":"YulAssignment","src":"27370:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27382:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"27393:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27378:3:25"},"nodeType":"YulFunctionCall","src":"27378:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27370:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"27450:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27463:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"27474:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27459:3:25"},"nodeType":"YulFunctionCall","src":"27459:17:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"27406:43:25"},"nodeType":"YulFunctionCall","src":"27406:71:25"},"nodeType":"YulExpressionStatement","src":"27406:71:25"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"27531:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27544:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"27555:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27540:3:25"},"nodeType":"YulFunctionCall","src":"27540:18:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"27487:43:25"},"nodeType":"YulFunctionCall","src":"27487:72:25"},"nodeType":"YulExpressionStatement","src":"27487:72:25"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27324:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"27336:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"27344:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27355:4:25","type":""}],"src":"27234:332:25"},{"body":{"nodeType":"YulBlock","src":"27678:57:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27700:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"27708:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27696:3:25"},"nodeType":"YulFunctionCall","src":"27696:14:25"},{"hexValue":"30206e6f7420616c6c6f776564","kind":"string","nodeType":"YulLiteral","src":"27712:15:25","type":"","value":"0 not allowed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27689:6:25"},"nodeType":"YulFunctionCall","src":"27689:39:25"},"nodeType":"YulExpressionStatement","src":"27689:39:25"}]},"name":"store_literal_in_memory_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27670:6:25","type":""}],"src":"27572:163:25"},{"body":{"nodeType":"YulBlock","src":"27887:220:25","statements":[{"nodeType":"YulAssignment","src":"27897:74:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27963:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"27968:2:25","type":"","value":"13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27904:58:25"},"nodeType":"YulFunctionCall","src":"27904:67:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27897:3:25"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28069:3:25"}],"functionName":{"name":"store_literal_in_memory_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2","nodeType":"YulIdentifier","src":"27980:88:25"},"nodeType":"YulFunctionCall","src":"27980:93:25"},"nodeType":"YulExpressionStatement","src":"27980:93:25"},{"nodeType":"YulAssignment","src":"28082:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28093:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"28098:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28089:3:25"},"nodeType":"YulFunctionCall","src":"28089:12:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28082:3:25"}]}]},"name":"abi_encode_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27875:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27883:3:25","type":""}],"src":"27741:366:25"},{"body":{"nodeType":"YulBlock","src":"28284:248:25","statements":[{"nodeType":"YulAssignment","src":"28294:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28306:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28317:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28302:3:25"},"nodeType":"YulFunctionCall","src":"28302:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28294:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28341:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28352:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28337:3:25"},"nodeType":"YulFunctionCall","src":"28337:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28360:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"28366:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28356:3:25"},"nodeType":"YulFunctionCall","src":"28356:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28330:6:25"},"nodeType":"YulFunctionCall","src":"28330:47:25"},"nodeType":"YulExpressionStatement","src":"28330:47:25"},{"nodeType":"YulAssignment","src":"28386:139:25","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28520:4:25"}],"functionName":{"name":"abi_encode_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28394:124:25"},"nodeType":"YulFunctionCall","src":"28394:131:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28386:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28264:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28279:4:25","type":""}],"src":"28113:419:25"},{"body":{"nodeType":"YulBlock","src":"28591:32:25","statements":[{"nodeType":"YulAssignment","src":"28601:16:25","value":{"name":"value","nodeType":"YulIdentifier","src":"28612:5:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"28601:7:25"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28573:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"28583:7:25","type":""}],"src":"28538:85:25"},{"body":{"nodeType":"YulBlock","src":"28673:57:25","statements":[{"nodeType":"YulAssignment","src":"28683:41:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28698:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"28705:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"28694:3:25"},"nodeType":"YulFunctionCall","src":"28694:30:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"28683:7:25"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28655:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"28665:7:25","type":""}],"src":"28629:101:25"},{"body":{"nodeType":"YulBlock","src":"28768:28:25","statements":[{"nodeType":"YulAssignment","src":"28778:12:25","value":{"name":"value","nodeType":"YulIdentifier","src":"28785:5:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"28778:3:25"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28754:5:25","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"28764:3:25","type":""}],"src":"28736:60:25"},{"body":{"nodeType":"YulBlock","src":"28869:89:25","statements":[{"nodeType":"YulAssignment","src":"28879:73:25","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28944:5:25"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"28918:25:25"},"nodeType":"YulFunctionCall","src":"28918:32:25"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"28909:8:25"},"nodeType":"YulFunctionCall","src":"28909:42:25"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"28892:16:25"},"nodeType":"YulFunctionCall","src":"28892:60:25"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"28879:9:25"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28849:5:25","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"28859:9:25","type":""}],"src":"28802:156:25"},{"body":{"nodeType":"YulBlock","src":"29036:73:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29053:3:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29096:5:25"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint64","nodeType":"YulIdentifier","src":"29058:37:25"},"nodeType":"YulFunctionCall","src":"29058:44:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29046:6:25"},"nodeType":"YulFunctionCall","src":"29046:57:25"},"nodeType":"YulExpressionStatement","src":"29046:57:25"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29024:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"29031:3:25","type":""}],"src":"28964:145:25"},{"body":{"nodeType":"YulBlock","src":"29220:131:25","statements":[{"nodeType":"YulAssignment","src":"29230:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29242:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"29253:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29238:3:25"},"nodeType":"YulFunctionCall","src":"29238:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29230:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29317:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29330:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"29341:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29326:3:25"},"nodeType":"YulFunctionCall","src":"29326:17:25"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"29266:50:25"},"nodeType":"YulFunctionCall","src":"29266:78:25"},"nodeType":"YulExpressionStatement","src":"29266:78:25"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29192:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29204:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29215:4:25","type":""}],"src":"29115:236:25"},{"body":{"nodeType":"YulBlock","src":"29463:117:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29485:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"29493:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29481:3:25"},"nodeType":"YulFunctionCall","src":"29481:14:25"},{"hexValue":"6e6577206d6178696d756d20737570706c7920776f756c642065786365656420","kind":"string","nodeType":"YulLiteral","src":"29497:34:25","type":"","value":"new maximum supply would exceed "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29474:6:25"},"nodeType":"YulFunctionCall","src":"29474:58:25"},"nodeType":"YulExpressionStatement","src":"29474:58:25"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29553:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"29561:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29549:3:25"},"nodeType":"YulFunctionCall","src":"29549:15:25"},{"hexValue":"31303030","kind":"string","nodeType":"YulLiteral","src":"29566:6:25","type":"","value":"1000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29542:6:25"},"nodeType":"YulFunctionCall","src":"29542:31:25"},"nodeType":"YulExpressionStatement","src":"29542:31:25"}]},"name":"store_literal_in_memory_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29455:6:25","type":""}],"src":"29357:223:25"},{"body":{"nodeType":"YulBlock","src":"29732:220:25","statements":[{"nodeType":"YulAssignment","src":"29742:74:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29808:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"29813:2:25","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29749:58:25"},"nodeType":"YulFunctionCall","src":"29749:67:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29742:3:25"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29914:3:25"}],"functionName":{"name":"store_literal_in_memory_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae","nodeType":"YulIdentifier","src":"29825:88:25"},"nodeType":"YulFunctionCall","src":"29825:93:25"},"nodeType":"YulExpressionStatement","src":"29825:93:25"},{"nodeType":"YulAssignment","src":"29927:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29938:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"29943:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29934:3:25"},"nodeType":"YulFunctionCall","src":"29934:12:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29927:3:25"}]}]},"name":"abi_encode_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29720:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29728:3:25","type":""}],"src":"29586:366:25"},{"body":{"nodeType":"YulBlock","src":"30129:248:25","statements":[{"nodeType":"YulAssignment","src":"30139:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30151:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"30162:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30147:3:25"},"nodeType":"YulFunctionCall","src":"30147:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30139:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30186:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"30197:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30182:3:25"},"nodeType":"YulFunctionCall","src":"30182:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30205:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"30211:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30201:3:25"},"nodeType":"YulFunctionCall","src":"30201:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30175:6:25"},"nodeType":"YulFunctionCall","src":"30175:47:25"},"nodeType":"YulExpressionStatement","src":"30175:47:25"},{"nodeType":"YulAssignment","src":"30231:139:25","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30365:4:25"}],"functionName":{"name":"abi_encode_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30239:124:25"},"nodeType":"YulFunctionCall","src":"30239:131:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30231:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30109:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30124:4:25","type":""}],"src":"29958:419:25"},{"body":{"nodeType":"YulBlock","src":"30489:73:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30511:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"30519:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30507:3:25"},"nodeType":"YulFunctionCall","src":"30507:14:25"},{"hexValue":"617274697374206e6f742073657420666f72207468697320746f6b656e","kind":"string","nodeType":"YulLiteral","src":"30523:31:25","type":"","value":"artist not set for this token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30500:6:25"},"nodeType":"YulFunctionCall","src":"30500:55:25"},"nodeType":"YulExpressionStatement","src":"30500:55:25"}]},"name":"store_literal_in_memory_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30481:6:25","type":""}],"src":"30383:179:25"},{"body":{"nodeType":"YulBlock","src":"30714:220:25","statements":[{"nodeType":"YulAssignment","src":"30724:74:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30790:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"30795:2:25","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30731:58:25"},"nodeType":"YulFunctionCall","src":"30731:67:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30724:3:25"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30896:3:25"}],"functionName":{"name":"store_literal_in_memory_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51","nodeType":"YulIdentifier","src":"30807:88:25"},"nodeType":"YulFunctionCall","src":"30807:93:25"},"nodeType":"YulExpressionStatement","src":"30807:93:25"},{"nodeType":"YulAssignment","src":"30909:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30920:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"30925:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30916:3:25"},"nodeType":"YulFunctionCall","src":"30916:12:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30909:3:25"}]}]},"name":"abi_encode_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30702:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30710:3:25","type":""}],"src":"30568:366:25"},{"body":{"nodeType":"YulBlock","src":"31111:248:25","statements":[{"nodeType":"YulAssignment","src":"31121:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31133:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"31144:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31129:3:25"},"nodeType":"YulFunctionCall","src":"31129:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31121:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31168:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"31179:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31164:3:25"},"nodeType":"YulFunctionCall","src":"31164:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31187:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"31193:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31183:3:25"},"nodeType":"YulFunctionCall","src":"31183:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31157:6:25"},"nodeType":"YulFunctionCall","src":"31157:47:25"},"nodeType":"YulExpressionStatement","src":"31157:47:25"},{"nodeType":"YulAssignment","src":"31213:139:25","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31347:4:25"}],"functionName":{"name":"abi_encode_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31221:124:25"},"nodeType":"YulFunctionCall","src":"31221:131:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31213:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31091:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31106:4:25","type":""}],"src":"30940:419:25"},{"body":{"nodeType":"YulBlock","src":"31419:87:25","statements":[{"nodeType":"YulAssignment","src":"31429:11:25","value":{"name":"ptr","nodeType":"YulIdentifier","src":"31437:3:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"31429:4:25"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31457:1:25","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"31460:3:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31450:6:25"},"nodeType":"YulFunctionCall","src":"31450:14:25"},"nodeType":"YulExpressionStatement","src":"31450:14:25"},{"nodeType":"YulAssignment","src":"31473:26:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31491:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"31494:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"31481:9:25"},"nodeType":"YulFunctionCall","src":"31481:18:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"31473:4:25"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"31406:3:25","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"31414:4:25","type":""}],"src":"31365:141:25"},{"body":{"nodeType":"YulBlock","src":"31556:49:25","statements":[{"nodeType":"YulAssignment","src":"31566:33:25","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31584:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"31591:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31580:3:25"},"nodeType":"YulFunctionCall","src":"31580:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"31596:2:25","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"31576:3:25"},"nodeType":"YulFunctionCall","src":"31576:23:25"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"31566:6:25"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31539:5:25","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"31549:6:25","type":""}],"src":"31512:93:25"},{"body":{"nodeType":"YulBlock","src":"31664:54:25","statements":[{"nodeType":"YulAssignment","src":"31674:37:25","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"31699:4:25"},{"name":"value","nodeType":"YulIdentifier","src":"31705:5:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"31695:3:25"},"nodeType":"YulFunctionCall","src":"31695:16:25"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"31674:8:25"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"31639:4:25","type":""},{"name":"value","nodeType":"YulTypedName","src":"31645:5:25","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"31655:8:25","type":""}],"src":"31611:107:25"},{"body":{"nodeType":"YulBlock","src":"31800:317:25","statements":[{"nodeType":"YulVariableDeclaration","src":"31810:35:25","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"31831:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"31843:1:25","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"31827:3:25"},"nodeType":"YulFunctionCall","src":"31827:18:25"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"31814:9:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"31854:109:25","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"31885:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"31896:66:25","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"31866:18:25"},"nodeType":"YulFunctionCall","src":"31866:97:25"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"31858:4:25","type":""}]},{"nodeType":"YulAssignment","src":"31972:51:25","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"32003:9:25"},{"name":"toInsert","nodeType":"YulIdentifier","src":"32014:8:25"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"31984:18:25"},"nodeType":"YulFunctionCall","src":"31984:39:25"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"31972:8:25"}]},{"nodeType":"YulAssignment","src":"32032:30:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32045:5:25"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"32056:4:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"32052:3:25"},"nodeType":"YulFunctionCall","src":"32052:9:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32041:3:25"},"nodeType":"YulFunctionCall","src":"32041:21:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"32032:5:25"}]},{"nodeType":"YulAssignment","src":"32071:40:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32084:5:25"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"32095:8:25"},{"name":"mask","nodeType":"YulIdentifier","src":"32105:4:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"32091:3:25"},"nodeType":"YulFunctionCall","src":"32091:19:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"32081:2:25"},"nodeType":"YulFunctionCall","src":"32081:30:25"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"32071:6:25"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31761:5:25","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"31768:10:25","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"31780:8:25","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"31793:6:25","type":""}],"src":"31724:393:25"},{"body":{"nodeType":"YulBlock","src":"32183:82:25","statements":[{"nodeType":"YulAssignment","src":"32193:66:25","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32251:5:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"32233:17:25"},"nodeType":"YulFunctionCall","src":"32233:24:25"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"32224:8:25"},"nodeType":"YulFunctionCall","src":"32224:34:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"32206:17:25"},"nodeType":"YulFunctionCall","src":"32206:53:25"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"32193:9:25"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32163:5:25","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"32173:9:25","type":""}],"src":"32123:142:25"},{"body":{"nodeType":"YulBlock","src":"32318:28:25","statements":[{"nodeType":"YulAssignment","src":"32328:12:25","value":{"name":"value","nodeType":"YulIdentifier","src":"32335:5:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"32328:3:25"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32304:5:25","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"32314:3:25","type":""}],"src":"32271:75:25"},{"body":{"nodeType":"YulBlock","src":"32428:193:25","statements":[{"nodeType":"YulVariableDeclaration","src":"32438:63:25","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"32493:7:25"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"32462:30:25"},"nodeType":"YulFunctionCall","src":"32462:39:25"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"32442:16:25","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"32517:4:25"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"32557:4:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"32551:5:25"},"nodeType":"YulFunctionCall","src":"32551:11:25"},{"name":"offset","nodeType":"YulIdentifier","src":"32564:6:25"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"32596:16:25"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"32572:23:25"},"nodeType":"YulFunctionCall","src":"32572:41:25"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"32523:27:25"},"nodeType":"YulFunctionCall","src":"32523:91:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"32510:6:25"},"nodeType":"YulFunctionCall","src":"32510:105:25"},"nodeType":"YulExpressionStatement","src":"32510:105:25"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"32405:4:25","type":""},{"name":"offset","nodeType":"YulTypedName","src":"32411:6:25","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"32419:7:25","type":""}],"src":"32352:269:25"},{"body":{"nodeType":"YulBlock","src":"32676:24:25","statements":[{"nodeType":"YulAssignment","src":"32686:8:25","value":{"kind":"number","nodeType":"YulLiteral","src":"32693:1:25","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"32686:3:25"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"32672:3:25","type":""}],"src":"32627:73:25"},{"body":{"nodeType":"YulBlock","src":"32759:136:25","statements":[{"nodeType":"YulVariableDeclaration","src":"32769:46:25","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"32783:30:25"},"nodeType":"YulFunctionCall","src":"32783:32:25"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"32773:6:25","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"32868:4:25"},{"name":"offset","nodeType":"YulIdentifier","src":"32874:6:25"},{"name":"zero_0","nodeType":"YulIdentifier","src":"32882:6:25"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"32824:43:25"},"nodeType":"YulFunctionCall","src":"32824:65:25"},"nodeType":"YulExpressionStatement","src":"32824:65:25"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"32745:4:25","type":""},{"name":"offset","nodeType":"YulTypedName","src":"32751:6:25","type":""}],"src":"32706:189:25"},{"body":{"nodeType":"YulBlock","src":"32951:136:25","statements":[{"body":{"nodeType":"YulBlock","src":"33018:63:25","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"33062:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"33069:1:25","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"33032:29:25"},"nodeType":"YulFunctionCall","src":"33032:39:25"},"nodeType":"YulExpressionStatement","src":"33032:39:25"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"32971:5:25"},{"name":"end","nodeType":"YulIdentifier","src":"32978:3:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"32968:2:25"},"nodeType":"YulFunctionCall","src":"32968:14:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"32983:26:25","statements":[{"nodeType":"YulAssignment","src":"32985:22:25","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"32998:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"33005:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32994:3:25"},"nodeType":"YulFunctionCall","src":"32994:13:25"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"32985:5:25"}]}]},"pre":{"nodeType":"YulBlock","src":"32965:2:25","statements":[]},"src":"32961:120:25"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"32939:5:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"32946:3:25","type":""}],"src":"32901:186:25"},{"body":{"nodeType":"YulBlock","src":"33172:464:25","statements":[{"body":{"nodeType":"YulBlock","src":"33198:431:25","statements":[{"nodeType":"YulVariableDeclaration","src":"33212:54:25","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"33260:5:25"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"33228:31:25"},"nodeType":"YulFunctionCall","src":"33228:38:25"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"33216:8:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33279:63:25","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"33302:8:25"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"33330:10:25"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"33312:17:25"},"nodeType":"YulFunctionCall","src":"33312:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33298:3:25"},"nodeType":"YulFunctionCall","src":"33298:44:25"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"33283:11:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"33499:27:25","statements":[{"nodeType":"YulAssignment","src":"33501:23:25","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"33516:8:25"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"33501:11:25"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"33483:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"33495:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"33480:2:25"},"nodeType":"YulFunctionCall","src":"33480:18:25"},"nodeType":"YulIf","src":"33477:49:25"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"33568:11:25"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"33585:8:25"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"33613:3:25"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"33595:17:25"},"nodeType":"YulFunctionCall","src":"33595:22:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33581:3:25"},"nodeType":"YulFunctionCall","src":"33581:37:25"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"33539:28:25"},"nodeType":"YulFunctionCall","src":"33539:80:25"},"nodeType":"YulExpressionStatement","src":"33539:80:25"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"33189:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"33194:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"33186:2:25"},"nodeType":"YulFunctionCall","src":"33186:11:25"},"nodeType":"YulIf","src":"33183:446:25"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"33148:5:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"33155:3:25","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"33160:10:25","type":""}],"src":"33093:543:25"},{"body":{"nodeType":"YulBlock","src":"33705:54:25","statements":[{"nodeType":"YulAssignment","src":"33715:37:25","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"33740:4:25"},{"name":"value","nodeType":"YulIdentifier","src":"33746:5:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"33736:3:25"},"nodeType":"YulFunctionCall","src":"33736:16:25"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"33715:8:25"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"33680:4:25","type":""},{"name":"value","nodeType":"YulTypedName","src":"33686:5:25","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"33696:8:25","type":""}],"src":"33642:117:25"},{"body":{"nodeType":"YulBlock","src":"33816:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"33826:68:25","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33875:1:25","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"33878:5:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"33871:3:25"},"nodeType":"YulFunctionCall","src":"33871:13:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33890:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"33886:3:25"},"nodeType":"YulFunctionCall","src":"33886:6:25"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"33842:28:25"},"nodeType":"YulFunctionCall","src":"33842:51:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"33838:3:25"},"nodeType":"YulFunctionCall","src":"33838:56:25"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"33830:4:25","type":""}]},{"nodeType":"YulAssignment","src":"33903:25:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"33917:4:25"},{"name":"mask","nodeType":"YulIdentifier","src":"33923:4:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"33913:3:25"},"nodeType":"YulFunctionCall","src":"33913:15:25"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"33903:6:25"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"33793:4:25","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"33799:5:25","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"33809:6:25","type":""}],"src":"33765:169:25"},{"body":{"nodeType":"YulBlock","src":"34020:214:25","statements":[{"nodeType":"YulAssignment","src":"34153:37:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"34180:4:25"},{"name":"len","nodeType":"YulIdentifier","src":"34186:3:25"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"34161:18:25"},"nodeType":"YulFunctionCall","src":"34161:29:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"34153:4:25"}]},{"nodeType":"YulAssignment","src":"34199:29:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"34210:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34220:1:25","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"34223:3:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"34216:3:25"},"nodeType":"YulFunctionCall","src":"34216:11:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"34207:2:25"},"nodeType":"YulFunctionCall","src":"34207:21:25"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"34199:4:25"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"34001:4:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"34007:3:25","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"34015:4:25","type":""}],"src":"33939:295:25"},{"body":{"nodeType":"YulBlock","src":"34331:1303:25","statements":[{"nodeType":"YulVariableDeclaration","src":"34342:51:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"34389:3:25"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"34356:32:25"},"nodeType":"YulFunctionCall","src":"34356:37:25"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"34346:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"34478:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"34480:16:25"},"nodeType":"YulFunctionCall","src":"34480:18:25"},"nodeType":"YulExpressionStatement","src":"34480:18:25"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"34450:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"34458:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"34447:2:25"},"nodeType":"YulFunctionCall","src":"34447:30:25"},"nodeType":"YulIf","src":"34444:56:25"},{"nodeType":"YulVariableDeclaration","src":"34510:52:25","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"34556:4:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"34550:5:25"},"nodeType":"YulFunctionCall","src":"34550:11:25"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"34524:25:25"},"nodeType":"YulFunctionCall","src":"34524:38:25"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"34514:6:25","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"34655:4:25"},{"name":"oldLen","nodeType":"YulIdentifier","src":"34661:6:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"34669:6:25"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"34609:45:25"},"nodeType":"YulFunctionCall","src":"34609:67:25"},"nodeType":"YulExpressionStatement","src":"34609:67:25"},{"nodeType":"YulVariableDeclaration","src":"34686:18:25","value":{"kind":"number","nodeType":"YulLiteral","src":"34703:1:25","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"34690:9:25","type":""}]},{"nodeType":"YulAssignment","src":"34714:17:25","value":{"kind":"number","nodeType":"YulLiteral","src":"34727:4:25","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"34714:9:25"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"34778:611:25","statements":[{"nodeType":"YulVariableDeclaration","src":"34792:37:25","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"34811:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34823:4:25","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"34819:3:25"},"nodeType":"YulFunctionCall","src":"34819:9:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34807:3:25"},"nodeType":"YulFunctionCall","src":"34807:22:25"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"34796:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"34843:51:25","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"34889:4:25"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"34857:31:25"},"nodeType":"YulFunctionCall","src":"34857:37:25"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"34847:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"34907:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"34916:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"34911:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"34975:163:25","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"35000:6:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"35018:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"35023:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35014:3:25"},"nodeType":"YulFunctionCall","src":"35014:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"35008:5:25"},"nodeType":"YulFunctionCall","src":"35008:26:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"34993:6:25"},"nodeType":"YulFunctionCall","src":"34993:42:25"},"nodeType":"YulExpressionStatement","src":"34993:42:25"},{"nodeType":"YulAssignment","src":"35052:24:25","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"35066:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"35074:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35062:3:25"},"nodeType":"YulFunctionCall","src":"35062:14:25"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"35052:6:25"}]},{"nodeType":"YulAssignment","src":"35093:31:25","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"35110:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"35121:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35106:3:25"},"nodeType":"YulFunctionCall","src":"35106:18:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"35093:9:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"34941:1:25"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"34944:7:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"34938:2:25"},"nodeType":"YulFunctionCall","src":"34938:14:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"34953:21:25","statements":[{"nodeType":"YulAssignment","src":"34955:17:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"34964:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"34967:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34960:3:25"},"nodeType":"YulFunctionCall","src":"34960:12:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"34955:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"34934:3:25","statements":[]},"src":"34930:208:25"},{"body":{"nodeType":"YulBlock","src":"35174:156:25","statements":[{"nodeType":"YulVariableDeclaration","src":"35192:43:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"35219:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"35224:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35215:3:25"},"nodeType":"YulFunctionCall","src":"35215:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"35209:5:25"},"nodeType":"YulFunctionCall","src":"35209:26:25"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"35196:9:25","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"35259:6:25"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"35286:9:25"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"35301:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"35309:4:25","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35297:3:25"},"nodeType":"YulFunctionCall","src":"35297:17:25"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"35267:18:25"},"nodeType":"YulFunctionCall","src":"35267:48:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"35252:6:25"},"nodeType":"YulFunctionCall","src":"35252:64:25"},"nodeType":"YulExpressionStatement","src":"35252:64:25"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"35157:7:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"35166:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"35154:2:25"},"nodeType":"YulFunctionCall","src":"35154:19:25"},"nodeType":"YulIf","src":"35151:179:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35350:4:25"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"35364:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"35372:1:25","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"35360:3:25"},"nodeType":"YulFunctionCall","src":"35360:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"35376:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35356:3:25"},"nodeType":"YulFunctionCall","src":"35356:22:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"35343:6:25"},"nodeType":"YulFunctionCall","src":"35343:36:25"},"nodeType":"YulExpressionStatement","src":"35343:36:25"}]},"nodeType":"YulCase","src":"34771:618:25","value":{"kind":"number","nodeType":"YulLiteral","src":"34776:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"35406:222:25","statements":[{"nodeType":"YulVariableDeclaration","src":"35420:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"35433:1:25","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"35424:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"35457:67:25","statements":[{"nodeType":"YulAssignment","src":"35475:35:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"35494:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"35499:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35490:3:25"},"nodeType":"YulFunctionCall","src":"35490:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"35484:5:25"},"nodeType":"YulFunctionCall","src":"35484:26:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"35475:5:25"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"35450:6:25"},"nodeType":"YulIf","src":"35447:77:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35544:4:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35603:5:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"35610:6:25"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"35550:52:25"},"nodeType":"YulFunctionCall","src":"35550:67:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"35537:6:25"},"nodeType":"YulFunctionCall","src":"35537:81:25"},"nodeType":"YulExpressionStatement","src":"35537:81:25"}]},"nodeType":"YulCase","src":"35398:230:25","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"34751:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"34759:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"34748:2:25"},"nodeType":"YulFunctionCall","src":"34748:14:25"},"nodeType":"YulSwitch","src":"34741:887:25"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"34320:4:25","type":""},{"name":"src","nodeType":"YulTypedName","src":"34326:3:25","type":""}],"src":"34239:1395:25"},{"body":{"nodeType":"YulBlock","src":"35766:206:25","statements":[{"nodeType":"YulAssignment","src":"35776:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35788:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"35799:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35784:3:25"},"nodeType":"YulFunctionCall","src":"35784:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35776:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"35856:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35869:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"35880:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35865:3:25"},"nodeType":"YulFunctionCall","src":"35865:17:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"35812:43:25"},"nodeType":"YulFunctionCall","src":"35812:71:25"},"nodeType":"YulExpressionStatement","src":"35812:71:25"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"35937:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35950:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"35961:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35946:3:25"},"nodeType":"YulFunctionCall","src":"35946:18:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"35893:43:25"},"nodeType":"YulFunctionCall","src":"35893:72:25"},"nodeType":"YulExpressionStatement","src":"35893:72:25"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35730:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"35742:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"35750:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35761:4:25","type":""}],"src":"35640:332:25"},{"body":{"nodeType":"YulBlock","src":"36021:79:25","statements":[{"body":{"nodeType":"YulBlock","src":"36078:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36087:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"36090:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"36080:6:25"},"nodeType":"YulFunctionCall","src":"36080:12:25"},"nodeType":"YulExpressionStatement","src":"36080:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36044:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36069:5:25"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"36051:17:25"},"nodeType":"YulFunctionCall","src":"36051:24:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"36041:2:25"},"nodeType":"YulFunctionCall","src":"36041:35:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"36034:6:25"},"nodeType":"YulFunctionCall","src":"36034:43:25"},"nodeType":"YulIf","src":"36031:63:25"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36014:5:25","type":""}],"src":"35978:122:25"},{"body":{"nodeType":"YulBlock","src":"36169:80:25","statements":[{"nodeType":"YulAssignment","src":"36179:22:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"36194:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"36188:5:25"},"nodeType":"YulFunctionCall","src":"36188:13:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"36179:5:25"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36237:5:25"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"36210:26:25"},"nodeType":"YulFunctionCall","src":"36210:33:25"},"nodeType":"YulExpressionStatement","src":"36210:33:25"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"36147:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"36155:3:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"36163:5:25","type":""}],"src":"36106:143:25"},{"body":{"nodeType":"YulBlock","src":"36332:274:25","statements":[{"body":{"nodeType":"YulBlock","src":"36378:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"36380:77:25"},"nodeType":"YulFunctionCall","src":"36380:79:25"},"nodeType":"YulExpressionStatement","src":"36380:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"36353:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"36362:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"36349:3:25"},"nodeType":"YulFunctionCall","src":"36349:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"36374:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"36345:3:25"},"nodeType":"YulFunctionCall","src":"36345:32:25"},"nodeType":"YulIf","src":"36342:119:25"},{"nodeType":"YulBlock","src":"36471:128:25","statements":[{"nodeType":"YulVariableDeclaration","src":"36486:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"36500:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"36490:6:25","type":""}]},{"nodeType":"YulAssignment","src":"36515:74:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36561:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"36572:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36557:3:25"},"nodeType":"YulFunctionCall","src":"36557:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"36581:7:25"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"36525:31:25"},"nodeType":"YulFunctionCall","src":"36525:64:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"36515:6:25"}]}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36302:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"36313:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"36325:6:25","type":""}],"src":"36255:351:25"},{"body":{"nodeType":"YulBlock","src":"36670:40:25","statements":[{"nodeType":"YulAssignment","src":"36681:22:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36697:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"36691:5:25"},"nodeType":"YulFunctionCall","src":"36691:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"36681:6:25"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36653:5:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"36663:6:25","type":""}],"src":"36612:98:25"},{"body":{"nodeType":"YulBlock","src":"36811:73:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36828:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"36833:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36821:6:25"},"nodeType":"YulFunctionCall","src":"36821:19:25"},"nodeType":"YulExpressionStatement","src":"36821:19:25"},{"nodeType":"YulAssignment","src":"36849:29:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36868:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"36873:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36864:3:25"},"nodeType":"YulFunctionCall","src":"36864:14:25"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"36849:11:25"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"36783:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"36788:6:25","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"36799:11:25","type":""}],"src":"36716:168:25"},{"body":{"nodeType":"YulBlock","src":"36980:283:25","statements":[{"nodeType":"YulVariableDeclaration","src":"36990:52:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37036:5:25"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"37004:31:25"},"nodeType":"YulFunctionCall","src":"37004:38:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"36994:6:25","type":""}]},{"nodeType":"YulAssignment","src":"37051:77:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37116:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"37121:6:25"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37058:57:25"},"nodeType":"YulFunctionCall","src":"37058:70:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"37051:3:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37176:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"37183:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37172:3:25"},"nodeType":"YulFunctionCall","src":"37172:16:25"},{"name":"pos","nodeType":"YulIdentifier","src":"37190:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"37195:6:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"37137:34:25"},"nodeType":"YulFunctionCall","src":"37137:65:25"},"nodeType":"YulExpressionStatement","src":"37137:65:25"},{"nodeType":"YulAssignment","src":"37211:46:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37222:3:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"37249:6:25"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"37227:21:25"},"nodeType":"YulFunctionCall","src":"37227:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37218:3:25"},"nodeType":"YulFunctionCall","src":"37218:39:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"37211:3:25"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36961:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"36968:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"36976:3:25","type":""}],"src":"36890:373:25"},{"body":{"nodeType":"YulBlock","src":"37497:523:25","statements":[{"nodeType":"YulAssignment","src":"37507:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37519:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"37530:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37515:3:25"},"nodeType":"YulFunctionCall","src":"37515:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37507:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"37588:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37601:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"37612:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37597:3:25"},"nodeType":"YulFunctionCall","src":"37597:17:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"37544:43:25"},"nodeType":"YulFunctionCall","src":"37544:71:25"},"nodeType":"YulExpressionStatement","src":"37544:71:25"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"37669:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37682:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"37693:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37678:3:25"},"nodeType":"YulFunctionCall","src":"37678:18:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"37625:43:25"},"nodeType":"YulFunctionCall","src":"37625:72:25"},"nodeType":"YulExpressionStatement","src":"37625:72:25"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"37751:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37764:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"37775:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37760:3:25"},"nodeType":"YulFunctionCall","src":"37760:18:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"37707:43:25"},"nodeType":"YulFunctionCall","src":"37707:72:25"},"nodeType":"YulExpressionStatement","src":"37707:72:25"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"37833:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37846:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"37857:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37842:3:25"},"nodeType":"YulFunctionCall","src":"37842:18:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"37789:43:25"},"nodeType":"YulFunctionCall","src":"37789:72:25"},"nodeType":"YulExpressionStatement","src":"37789:72:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37882:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"37893:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37878:3:25"},"nodeType":"YulFunctionCall","src":"37878:19:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37903:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"37909:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"37899:3:25"},"nodeType":"YulFunctionCall","src":"37899:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37871:6:25"},"nodeType":"YulFunctionCall","src":"37871:49:25"},"nodeType":"YulExpressionStatement","src":"37871:49:25"},{"nodeType":"YulAssignment","src":"37929:84:25","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"37999:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"38008:4:25"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37937:61:25"},"nodeType":"YulFunctionCall","src":"37937:76:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37929:4:25"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"37437:9:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"37449:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"37457:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"37465:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"37473:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"37481:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"37492:4:25","type":""}],"src":"37269:751:25"},{"body":{"nodeType":"YulBlock","src":"38088:79:25","statements":[{"nodeType":"YulAssignment","src":"38098:22:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"38113:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"38107:5:25"},"nodeType":"YulFunctionCall","src":"38107:13:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"38098:5:25"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38155:5:25"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"38129:25:25"},"nodeType":"YulFunctionCall","src":"38129:32:25"},"nodeType":"YulExpressionStatement","src":"38129:32:25"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"38066:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"38074:3:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"38082:5:25","type":""}],"src":"38026:141:25"},{"body":{"nodeType":"YulBlock","src":"38249:273:25","statements":[{"body":{"nodeType":"YulBlock","src":"38295:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"38297:77:25"},"nodeType":"YulFunctionCall","src":"38297:79:25"},"nodeType":"YulExpressionStatement","src":"38297:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"38270:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"38279:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"38266:3:25"},"nodeType":"YulFunctionCall","src":"38266:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"38291:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"38262:3:25"},"nodeType":"YulFunctionCall","src":"38262:32:25"},"nodeType":"YulIf","src":"38259:119:25"},{"nodeType":"YulBlock","src":"38388:127:25","statements":[{"nodeType":"YulVariableDeclaration","src":"38403:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"38417:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"38407:6:25","type":""}]},{"nodeType":"YulAssignment","src":"38432:73:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38477:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"38488:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38473:3:25"},"nodeType":"YulFunctionCall","src":"38473:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"38497:7:25"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"38442:30:25"},"nodeType":"YulFunctionCall","src":"38442:63:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"38432:6:25"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38219:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"38230:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"38242:6:25","type":""}],"src":"38173:349:25"},{"body":{"nodeType":"YulBlock","src":"38856:725:25","statements":[{"nodeType":"YulAssignment","src":"38866:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38878:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"38889:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38874:3:25"},"nodeType":"YulFunctionCall","src":"38874:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38866:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"38947:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38960:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"38971:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38956:3:25"},"nodeType":"YulFunctionCall","src":"38956:17:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"38903:43:25"},"nodeType":"YulFunctionCall","src":"38903:71:25"},"nodeType":"YulExpressionStatement","src":"38903:71:25"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"39028:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39041:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"39052:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39037:3:25"},"nodeType":"YulFunctionCall","src":"39037:18:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"38984:43:25"},"nodeType":"YulFunctionCall","src":"38984:72:25"},"nodeType":"YulExpressionStatement","src":"38984:72:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39077:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"39088:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39073:3:25"},"nodeType":"YulFunctionCall","src":"39073:18:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39097:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"39103:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39093:3:25"},"nodeType":"YulFunctionCall","src":"39093:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39066:6:25"},"nodeType":"YulFunctionCall","src":"39066:48:25"},"nodeType":"YulExpressionStatement","src":"39066:48:25"},{"nodeType":"YulAssignment","src":"39123:116:25","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"39225:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"39234:4:25"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39131:93:25"},"nodeType":"YulFunctionCall","src":"39131:108:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39123:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39260:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"39271:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39256:3:25"},"nodeType":"YulFunctionCall","src":"39256:18:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39280:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"39286:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39276:3:25"},"nodeType":"YulFunctionCall","src":"39276:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39249:6:25"},"nodeType":"YulFunctionCall","src":"39249:48:25"},"nodeType":"YulExpressionStatement","src":"39249:48:25"},{"nodeType":"YulAssignment","src":"39306:116:25","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"39408:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"39417:4:25"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39314:93:25"},"nodeType":"YulFunctionCall","src":"39314:108:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39306:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39443:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"39454:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39439:3:25"},"nodeType":"YulFunctionCall","src":"39439:19:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39464:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"39470:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39460:3:25"},"nodeType":"YulFunctionCall","src":"39460:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39432:6:25"},"nodeType":"YulFunctionCall","src":"39432:49:25"},"nodeType":"YulExpressionStatement","src":"39432:49:25"},{"nodeType":"YulAssignment","src":"39490:84:25","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"39560:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"39569:4:25"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39498:61:25"},"nodeType":"YulFunctionCall","src":"39498:76:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39490:4:25"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38796:9:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"38808:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"38816:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"38824:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"38832:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"38840:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38851:4:25","type":""}],"src":"38528:1053:25"},{"body":{"nodeType":"YulBlock","src":"39700:34:25","statements":[{"nodeType":"YulAssignment","src":"39710:18:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"39725:3:25"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"39710:11:25"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"39672:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"39677:6:25","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"39688:11:25","type":""}],"src":"39587:147:25"},{"body":{"nodeType":"YulBlock","src":"39848:278:25","statements":[{"nodeType":"YulVariableDeclaration","src":"39858:52:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"39904:5:25"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"39872:31:25"},"nodeType":"YulFunctionCall","src":"39872:38:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"39862:6:25","type":""}]},{"nodeType":"YulAssignment","src":"39919:95:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40002:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"40007:6:25"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"39926:75:25"},"nodeType":"YulFunctionCall","src":"39926:88:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"39919:3:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40062:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"40069:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40058:3:25"},"nodeType":"YulFunctionCall","src":"40058:16:25"},{"name":"pos","nodeType":"YulIdentifier","src":"40076:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"40081:6:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"40023:34:25"},"nodeType":"YulFunctionCall","src":"40023:65:25"},"nodeType":"YulExpressionStatement","src":"40023:65:25"},{"nodeType":"YulAssignment","src":"40097:23:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40108:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"40113:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40104:3:25"},"nodeType":"YulFunctionCall","src":"40104:16:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"40097:3:25"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"39829:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"39836:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"39844:3:25","type":""}],"src":"39740:386:25"},{"body":{"nodeType":"YulBlock","src":"40266:137:25","statements":[{"nodeType":"YulAssignment","src":"40277:100:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"40364:6:25"},{"name":"pos","nodeType":"YulIdentifier","src":"40373:3:25"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"40284:79:25"},"nodeType":"YulFunctionCall","src":"40284:93:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"40277:3:25"}]},{"nodeType":"YulAssignment","src":"40387:10:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"40394:3:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"40387:3:25"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"40245:3:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"40251:6:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"40262:3:25","type":""}],"src":"40132:271:25"},{"body":{"nodeType":"YulBlock","src":"40591:371:25","statements":[{"nodeType":"YulAssignment","src":"40601:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40613:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"40624:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40609:3:25"},"nodeType":"YulFunctionCall","src":"40609:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40601:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"40682:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40695:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"40706:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40691:3:25"},"nodeType":"YulFunctionCall","src":"40691:17:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"40638:43:25"},"nodeType":"YulFunctionCall","src":"40638:71:25"},"nodeType":"YulExpressionStatement","src":"40638:71:25"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"40763:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40776:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"40787:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40772:3:25"},"nodeType":"YulFunctionCall","src":"40772:18:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"40719:43:25"},"nodeType":"YulFunctionCall","src":"40719:72:25"},"nodeType":"YulExpressionStatement","src":"40719:72:25"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"40845:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40858:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"40869:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40854:3:25"},"nodeType":"YulFunctionCall","src":"40854:18:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"40801:43:25"},"nodeType":"YulFunctionCall","src":"40801:72:25"},"nodeType":"YulExpressionStatement","src":"40801:72:25"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"40927:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40940:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"40951:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40936:3:25"},"nodeType":"YulFunctionCall","src":"40936:18:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"40883:43:25"},"nodeType":"YulFunctionCall","src":"40883:72:25"},"nodeType":"YulExpressionStatement","src":"40883:72:25"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"40539:9:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"40551:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"40559:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"40567:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"40575:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"40586:4:25","type":""}],"src":"40409:553:25"},{"body":{"nodeType":"YulBlock","src":"41194:408:25","statements":[{"nodeType":"YulAssignment","src":"41204:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41216:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"41227:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41212:3:25"},"nodeType":"YulFunctionCall","src":"41212:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41204:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41251:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"41262:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41247:3:25"},"nodeType":"YulFunctionCall","src":"41247:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"41270:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"41276:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41266:3:25"},"nodeType":"YulFunctionCall","src":"41266:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41240:6:25"},"nodeType":"YulFunctionCall","src":"41240:47:25"},"nodeType":"YulExpressionStatement","src":"41240:47:25"},{"nodeType":"YulAssignment","src":"41296:116:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"41398:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"41407:4:25"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"41304:93:25"},"nodeType":"YulFunctionCall","src":"41304:108:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41296:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41433:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"41444:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41429:3:25"},"nodeType":"YulFunctionCall","src":"41429:18:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"41453:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"41459:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"41449:3:25"},"nodeType":"YulFunctionCall","src":"41449:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"41422:6:25"},"nodeType":"YulFunctionCall","src":"41422:48:25"},"nodeType":"YulExpressionStatement","src":"41422:48:25"},{"nodeType":"YulAssignment","src":"41479:116:25","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"41581:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"41590:4:25"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"41487:93:25"},"nodeType":"YulFunctionCall","src":"41487:108:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41479:4:25"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"41158:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"41170:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"41178:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"41189:4:25","type":""}],"src":"40968:634:25"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_allocation_size_t_array$_t_address_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // address[]\n    function abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_address_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_address(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // address[]\n    function abi_decode_t_array$_t_address_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_array$_t_address_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_array$_t_address_$dyn_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_address_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283(memPtr) {\n\n        mstore(add(memPtr, 0), \"not admin\")\n\n    }\n\n    function abi_encode_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 9)\n        store_literal_in_memory_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75(memPtr) {\n\n        mstore(add(memPtr, 0), \"sender is not owner for this tok\")\n\n        mstore(add(memPtr, 32), \"en\")\n\n    }\n\n    function abi_encode_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483(memPtr) {\n\n        mstore(add(memPtr, 0), \"new supply would exceed max\")\n\n    }\n\n    function abi_encode_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2(memPtr) {\n\n        mstore(add(memPtr, 0), \"0 not allowed\")\n\n    }\n\n    function abi_encode_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 13)\n        store_literal_in_memory_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint64(value) -> converted {\n        converted := cleanup_t_uint64(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae(memPtr) {\n\n        mstore(add(memPtr, 0), \"new maximum supply would exceed \")\n\n        mstore(add(memPtr, 32), \"1000\")\n\n    }\n\n    function abi_encode_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51(memPtr) {\n\n        mstore(add(memPtr, 0), \"artist not set for this token\")\n\n    }\n\n    function abi_encode_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        mstore(add(headStart, 128), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value4,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value2,  tail)\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value3,  tail)\n\n        mstore(add(headStart, 128), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value4,  tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n}\n","id":25,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"468":[{"length":32,"start":7334},{"length":32,"start":7419},{"length":32,"start":7862}]},"linkReferences":{},"object":"6080604052600436106101d75760003560e01c806352d1902d11610102578063bb62550911610095578063e985e9c511610064578063e985e9c5146106cc578063f242432a14610709578063f2fde38b14610732578063fbe0a8921461075b576101d7565b8063bb62550914610614578063bd85b0391461063d578063c36497e51461067a578063d00e40ce146106a3576101d7565b80638da5cb5b116100d15780638da5cb5b1461056c5780639eca4b7b14610597578063a22cb465146105c0578063ad3cb1cc146105e9576101d7565b806352d1902d146104c457806370480275146104ef578063715018a614610518578063831ffd051461052f576101d7565b806318160ddd1161017a578063429b62e511610149578063429b62e5146103f15780634e1273f41461042e5780634f1ef2861461046b5780634f558e7914610487576101d7565b806318160ddd146103375780631b2ef1ca1461036257806324d7806c1461038b5780632eb2c2d6146103c8576101d7565b806306dd0419116101b657806306dd04191461027f578063077d9234146102a85780630e89341c146102d15780631785f53c1461030e576101d7565b8062fdd58e146101dc57806301ffc9a71461021957806302fe530514610256575b600080fd5b3480156101e857600080fd5b5061020360048036038101906101fe919061347c565b610798565b60405161021091906134cb565b60405180910390f35b34801561022557600080fd5b50610240600480360381019061023b919061353e565b610801565b60405161024d9190613586565b60405180910390f35b34801561026257600080fd5b5061027d600480360381019061027891906136e7565b61087b565b005b34801561028b57600080fd5b506102a660048036038101906102a1919061347c565b61088f565b005b3480156102b457600080fd5b506102cf60048036038101906102ca91906138bb565b61092a565b005b3480156102dd57600080fd5b506102f860048036038101906102f39190613933565b6109ef565b60405161030591906139df565b60405180910390f35b34801561031a57600080fd5b5061033560048036038101906103309190613a01565b610a92565b005b34801561034357600080fd5b5061034c610aeb565b60405161035991906134cb565b60405180910390f35b34801561036e57600080fd5b5061038960048036038101906103849190613a2e565b610b03565b005b34801561039757600080fd5b506103b260048036038101906103ad9190613a01565b610c5f565b6040516103bf9190613586565b60405180910390f35b3480156103d457600080fd5b506103ef60048036038101906103ea9190613b0f565b610cbb565b005b3480156103fd57600080fd5b5061041860048036038101906104139190613a01565b610d88565b6040516104259190613586565b60405180910390f35b34801561043a57600080fd5b50610455600480360381019061045091906138bb565b610da8565b6040516104629190613c9c565b60405180910390f35b61048560048036038101906104809190613cbe565b610eb7565b005b34801561049357600080fd5b506104ae60048036038101906104a99190613933565b610ed6565b6040516104bb9190613586565b60405180910390f35b3480156104d057600080fd5b506104d9610eea565b6040516104e69190613d33565b60405180910390f35b3480156104fb57600080fd5b5061051660048036038101906105119190613a01565b610f1d565b005b34801561052457600080fd5b5061052d610f7f565b005b34801561053b57600080fd5b5061055660048036038101906105519190613933565b610f93565b6040516105639190613d5d565b60405180910390f35b34801561057857600080fd5b50610581610fc6565b60405161058e9190613d5d565b60405180910390f35b3480156105a357600080fd5b506105be60048036038101906105b99190613d78565b610ffe565b005b3480156105cc57600080fd5b506105e760048036038101906105e29190613de4565b611122565b005b3480156105f557600080fd5b506105fe611130565b60405161060b91906139df565b60405180910390f35b34801561062057600080fd5b5061063b60048036038101906106369190613e24565b611169565b005b34801561064957600080fd5b50610664600480360381019061065f9190613933565b6113a4565b60405161067191906134cb565b60405180910390f35b34801561068657600080fd5b506106a1600480360381019061069c9190613a2e565b6113cf565b005b3480156106af57600080fd5b506106ca60048036038101906106c59190613a2e565b6114f7565b005b3480156106d857600080fd5b506106f360048036038101906106ee9190613eaf565b6116df565b6040516107009190613586565b60405180910390f35b34801561071557600080fd5b50610730600480360381019061072b9190613eef565b61174e565b005b34801561073e57600080fd5b5061075960048036038101906107549190613a01565b61181b565b005b34801561076757600080fd5b50610782600480360381019061077d9190613933565b6118a1565b60405161078f91906134cb565b60405180910390f35b6000806107a36118b9565b905080600001600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108745750610873826118e1565b5b9050919050565b6108836119c3565b61088c81611a4a565b50565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661091a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091190613fd2565b60405180910390fd5b61092682826001611a6c565b5050565b60005b82518110156109ea573073ffffffffffffffffffffffffffffffffffffffff166306dd041984838151811061096557610964613ff2565b5b60200260200101518484815181106109805761097f613ff2565b5b60200260200101516040518363ffffffff1660e01b81526004016109a5929190614021565b600060405180830381600087803b1580156109bf57600080fd5b505af11580156109d3573d6000803e3d6000fd5b5050505080806109e290614079565b91505061092d565b505050565b606060006109fb6118b9565b9050806002018054610a0c906140f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610a38906140f0565b8015610a855780601f10610a5a57610100808354040283529160200191610a85565b820191906000526020600020905b815481529060010190602001808311610a6857829003601f168201915b5050505050915050919050565b610a9a6119c3565b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905550565b600080610af6611b13565b9050806001015491505090565b3373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b90614193565b60405180910390fd5b600260008381526020019081526020016000205481610bc2846113a4565b610bcc91906141b3565b1115610c0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0490614233565b60405180910390fd5b610c5b6001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838360405180602001604052806000815250611b3b565b5050565b6000600115156000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515149050919050565b3073ffffffffffffffffffffffffffffffffffffffff166324d7806c336040518263ffffffff1660e01b8152600401610cf49190613d5d565b602060405180830381865afa158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d359190614268565b610d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6b90613fd2565b60405180910390fd5b610d818585858585611bd4565b5050505050565b60006020528060005260406000206000915054906101000a900460ff1681565b60608151835114610df457815183516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401610deb929190614295565b60405180910390fd5b6000835167ffffffffffffffff811115610e1157610e106135bc565b5b604051908082528060200260200182016040528015610e3f5781602001602082028036833780820191505090505b50905060005b8451811015610eac57610e7c610e648287611c7c90919063ffffffff16565b610e778387611c9090919063ffffffff16565b610798565b828281518110610e8f57610e8e613ff2565b5b60200260200101818152505080610ea590614079565b9050610e45565b508091505092915050565b610ebf611ca4565b610ec882611d8a565b610ed28282611d95565b5050565b600080610ee2836113a4565b119050919050565b6000610ef4611eb4565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b610f256119c3565b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610f876119c3565b610f916000611f3b565b565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610fd1612012565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611089576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108090613fd2565b60405180910390fd5b600082036110cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c39061430a565b60405180910390fd5b806001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61112c828261203a565b5050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b6000611173612050565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156111c15750825b9050600060018367ffffffffffffffff161480156111f6575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015611204575080155b1561123b576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561128b5760018560000160086101000a81548160ff0219169083151502179055505b611293612078565b61129c88612082565b6112a4612096565b6112ad86611a4a565b60005b875181101561133d5760016000808a84815181106112d1576112d0613ff2565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061133590614079565b9150506112b0565b50831561139a5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516113919190614383565b60405180910390a15b5050505050505050565b6000806113af611b13565b905080600001600084815260200190815260200160002054915050919050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661145a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145190613fd2565b60405180910390fd5b6103e881600260008581526020019081526020016000205461147c91906141b3565b11156114bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b490614410565b60405180910390fd5b8060026000848152602001908152602001600020546114dc91906141b3565b60026000848152602001908152602001600020819055505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157990613fd2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161b9061447c565b60405180910390fd5b600260008381526020019081526020016000205481611642846113a4565b61164c91906141b3565b111561168d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168490614233565b60405180910390fd5b6116db6001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838360405180602001604052806000815250611b3b565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561173b5760019050611748565b61174583836120a0565b90505b92915050565b3073ffffffffffffffffffffffffffffffffffffffff166324d7806c336040518263ffffffff1660e01b81526004016117879190613d5d565b602060405180830381865afa1580156117a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c89190614268565b611807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fe90613fd2565b60405180910390fd5b6118148585858585612142565b5050505050565b6118236119c3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118955760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161188c9190613d5d565b60405180910390fd5b61189e81611f3b565b50565b60026020528060005260406000206000915090505481565b60007f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500905090565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806119ac57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806119bc57506119bb826121ea565b5b9050919050565b6119cb612254565b73ffffffffffffffffffffffffffffffffffffffff166119e9610fc6565b73ffffffffffffffffffffffffffffffffffffffff1614611a4857611a0c612254565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611a3f9190613d5d565b60405180910390fd5b565b6000611a546118b9565b905081816002019081611a67919061463e565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ade5760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401611ad59190613d5d565b60405180910390fd5b600080611aeb848461225c565b91509150611b0c85600084846040518060200160405280600081525061228c565b5050505050565b60007f4a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e2800905090565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611bad5760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611ba49190613d5d565b60405180910390fd5b600080611bba858561225c565b91509150611bcc60008784848761228c565b505050505050565b6000611bde612254565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015611c235750611c2186826116df565b155b15611c675780866040517fe237d922000000000000000000000000000000000000000000000000000000008152600401611c5e929190614710565b60405180910390fd5b611c74868686868661233e565b505050505050565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480611d5157507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611d38612436565b73ffffffffffffffffffffffffffffffffffffffff1614155b15611d88576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611d926119c3565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611dfd57506040513d601f19601f82011682018060405250810190611dfa9190614765565b60015b611e3e57816040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401611e359190613d5d565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114611ea557806040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600401611e9c9190613d33565b60405180910390fd5b611eaf838361248d565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611f39576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000611f45612012565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b61204c612045612254565b8383612500565b5050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b61208061267f565b565b61208a61267f565b612093816126bf565b50565b61209e61267f565b565b6000806120ab6118b9565b90508060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b600061214c612254565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015612191575061218f86826116df565b155b156121d55780866040517fe237d9220000000000000000000000000000000000000000000000000000000081526004016121cc929190614710565b60405180910390fd5b6121e28686868686612745565b505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b61229885858585612850565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146123375760006122d6612254565b905060018451036123265760006122f7600086611c9090919063ffffffff16565b9050600061230f600086611c9090919063ffffffff16565b905061231f838989858589612a1c565b5050612335565b612334818787878787612bd0565b5b505b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036123b05760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016123a79190613d5d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036124225760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016124199190613d5d565b60405180910390fd5b61242f858585858561228c565b5050505050565b60006124647f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612d84565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61249682612d8e565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a26000815111156124f3576124ed8282612e5b565b506124fc565b6124fb612edf565b5b5050565b600061250a6118b9565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361257e5760006040517fced3e1000000000000000000000000000000000000000000000000000000000081526004016125759190613d5d565b60405180910390fd5b818160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31846040516126719190613586565b60405180910390a350505050565b612687612f1c565b6126bd576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6126c761267f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036127395760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016127309190613d5d565b60405180910390fd5b61274281611f3b565b50565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036127b75760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016127ae9190613d5d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036128295760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016128209190613d5d565b60405180910390fd5b600080612836858561225c565b91509150612847878784848761228c565b50505050505050565b600061285a611b13565b905061286885858585612f3c565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361294c576000805b845181101561292e5760008482815181106128be576128bd613ff2565b5b60200260200101519050808460000160008885815181106128e2576128e1613ff2565b5b60200260200101518152602001908152602001600020600082825461290791906141b3565b92505081905550808361291a91906141b3565b9250508061292790614079565b90506128a0565b508082600101600082825461294391906141b3565b92505081905550505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612a15576000805b8451811015612a005760008482815181106129a2576129a1613ff2565b5b60200260200101519050808460000160008885815181106129c6576129c5613ff2565b5b6020026020010151815260200190815260200160002060008282540392505081905550808301925050806129f990614079565b9050612984565b50808260010160008282540392505081905550505b5050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115612bc8578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612a7d9594939291906147e7565b6020604051808303816000875af1925050508015612ab957506040513d601f19601f82011682018060405250810190612ab69190614856565b60015b612b3d573d8060008114612ae9576040519150601f19603f3d011682016040523d82523d6000602084013e612aee565b606091505b506000815103612b3557846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612b2c9190613d5d565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612bc657846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612bbd9190613d5d565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115612d7c578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612c31959493929190614883565b6020604051808303816000875af1925050508015612c6d57506040513d601f19601f82011682018060405250810190612c6a9190614856565b60015b612cf1573d8060008114612c9d576040519150601f19603f3d011682016040523d82523d6000602084013e612ca2565b606091505b506000815103612ce957846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612ce09190613d5d565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612d7a57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612d719190613d5d565b60405180910390fd5b505b505050505050565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b03612dea57806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401612de19190613d5d565b60405180910390fd5b80612e177f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612d84565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051612e859190614927565b600060405180830381855af49150503d8060008114612ec0576040519150601f19603f3d011682016040523d82523d6000602084013e612ec5565b606091505b5091509150612ed5858383613300565b9250505092915050565b6000341115612f1a576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612f26612050565b60000160089054906101000a900460ff16905090565b6000612f466118b9565b90508151835114612f9257825182516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401612f89929190614295565b60405180910390fd5b6000612f9c612254565b905060005b84518110156131ba576000612fbf8287611c9090919063ffffffff16565b90506000612fd68387611c9090919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161461310957600085600001600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156130ae57898183856040517f03dee4c50000000000000000000000000000000000000000000000000000000081526004016130a5949392919061493e565b60405180910390fd5b81810386600001600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146131a7578085600001600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461319f91906141b3565b925050819055505b5050806131b390614079565b9050612fa1565b5060018451036132795760006131da600086611c9090919063ffffffff16565b905060006131f2600086611c9090919063ffffffff16565b90508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62858560405161326a929190614295565b60405180910390a450506132f8565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516132ef929190614983565b60405180910390a45b505050505050565b606082613315576133108261338f565b613387565b6000825114801561333d575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561337f57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016133769190613d5d565b60405180910390fd5b819050613388565b5b9392505050565b6000815111156133a25780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613413826133e8565b9050919050565b61342381613408565b811461342e57600080fd5b50565b6000813590506134408161341a565b92915050565b6000819050919050565b61345981613446565b811461346457600080fd5b50565b60008135905061347681613450565b92915050565b60008060408385031215613493576134926133de565b5b60006134a185828601613431565b92505060206134b285828601613467565b9150509250929050565b6134c581613446565b82525050565b60006020820190506134e060008301846134bc565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61351b816134e6565b811461352657600080fd5b50565b60008135905061353881613512565b92915050565b600060208284031215613554576135536133de565b5b600061356284828501613529565b91505092915050565b60008115159050919050565b6135808161356b565b82525050565b600060208201905061359b6000830184613577565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6135f4826135ab565b810181811067ffffffffffffffff82111715613613576136126135bc565b5b80604052505050565b60006136266133d4565b905061363282826135eb565b919050565b600067ffffffffffffffff821115613652576136516135bc565b5b61365b826135ab565b9050602081019050919050565b82818337600083830152505050565b600061368a61368584613637565b61361c565b9050828152602081018484840111156136a6576136a56135a6565b5b6136b1848285613668565b509392505050565b600082601f8301126136ce576136cd6135a1565b5b81356136de848260208601613677565b91505092915050565b6000602082840312156136fd576136fc6133de565b5b600082013567ffffffffffffffff81111561371b5761371a6133e3565b5b613727848285016136b9565b91505092915050565b600067ffffffffffffffff82111561374b5761374a6135bc565b5b602082029050602081019050919050565b600080fd5b600061377461376f84613730565b61361c565b905080838252602082019050602084028301858111156137975761379661375c565b5b835b818110156137c057806137ac8882613431565b845260208401935050602081019050613799565b5050509392505050565b600082601f8301126137df576137de6135a1565b5b81356137ef848260208601613761565b91505092915050565b600067ffffffffffffffff821115613813576138126135bc565b5b602082029050602081019050919050565b6000613837613832846137f8565b61361c565b9050808382526020820190506020840283018581111561385a5761385961375c565b5b835b81811015613883578061386f8882613467565b84526020840193505060208101905061385c565b5050509392505050565b600082601f8301126138a2576138a16135a1565b5b81356138b2848260208601613824565b91505092915050565b600080604083850312156138d2576138d16133de565b5b600083013567ffffffffffffffff8111156138f0576138ef6133e3565b5b6138fc858286016137ca565b925050602083013567ffffffffffffffff81111561391d5761391c6133e3565b5b6139298582860161388d565b9150509250929050565b600060208284031215613949576139486133de565b5b600061395784828501613467565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561399a57808201518184015260208101905061397f565b60008484015250505050565b60006139b182613960565b6139bb818561396b565b93506139cb81856020860161397c565b6139d4816135ab565b840191505092915050565b600060208201905081810360008301526139f981846139a6565b905092915050565b600060208284031215613a1757613a166133de565b5b6000613a2584828501613431565b91505092915050565b60008060408385031215613a4557613a446133de565b5b6000613a5385828601613467565b9250506020613a6485828601613467565b9150509250929050565b600067ffffffffffffffff821115613a8957613a886135bc565b5b613a92826135ab565b9050602081019050919050565b6000613ab2613aad84613a6e565b61361c565b905082815260208101848484011115613ace57613acd6135a6565b5b613ad9848285613668565b509392505050565b600082601f830112613af657613af56135a1565b5b8135613b06848260208601613a9f565b91505092915050565b600080600080600060a08688031215613b2b57613b2a6133de565b5b6000613b3988828901613431565b9550506020613b4a88828901613431565b945050604086013567ffffffffffffffff811115613b6b57613b6a6133e3565b5b613b778882890161388d565b935050606086013567ffffffffffffffff811115613b9857613b976133e3565b5b613ba48882890161388d565b925050608086013567ffffffffffffffff811115613bc557613bc46133e3565b5b613bd188828901613ae1565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613c1381613446565b82525050565b6000613c258383613c0a565b60208301905092915050565b6000602082019050919050565b6000613c4982613bde565b613c538185613be9565b9350613c5e83613bfa565b8060005b83811015613c8f578151613c768882613c19565b9750613c8183613c31565b925050600181019050613c62565b5085935050505092915050565b60006020820190508181036000830152613cb68184613c3e565b905092915050565b60008060408385031215613cd557613cd46133de565b5b6000613ce385828601613431565b925050602083013567ffffffffffffffff811115613d0457613d036133e3565b5b613d1085828601613ae1565b9150509250929050565b6000819050919050565b613d2d81613d1a565b82525050565b6000602082019050613d486000830184613d24565b92915050565b613d5781613408565b82525050565b6000602082019050613d726000830184613d4e565b92915050565b60008060408385031215613d8f57613d8e6133de565b5b6000613d9d85828601613467565b9250506020613dae85828601613431565b9150509250929050565b613dc18161356b565b8114613dcc57600080fd5b50565b600081359050613dde81613db8565b92915050565b60008060408385031215613dfb57613dfa6133de565b5b6000613e0985828601613431565b9250506020613e1a85828601613dcf565b9150509250929050565b600080600060608486031215613e3d57613e3c6133de565b5b6000613e4b86828701613431565b935050602084013567ffffffffffffffff811115613e6c57613e6b6133e3565b5b613e78868287016137ca565b925050604084013567ffffffffffffffff811115613e9957613e986133e3565b5b613ea5868287016136b9565b9150509250925092565b60008060408385031215613ec657613ec56133de565b5b6000613ed485828601613431565b9250506020613ee585828601613431565b9150509250929050565b600080600080600060a08688031215613f0b57613f0a6133de565b5b6000613f1988828901613431565b9550506020613f2a88828901613431565b9450506040613f3b88828901613467565b9350506060613f4c88828901613467565b925050608086013567ffffffffffffffff811115613f6d57613f6c6133e3565b5b613f7988828901613ae1565b9150509295509295909350565b7f6e6f742061646d696e0000000000000000000000000000000000000000000000600082015250565b6000613fbc60098361396b565b9150613fc782613f86565b602082019050919050565b60006020820190508181036000830152613feb81613faf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506140366000830185613d4e565b61404360208301846134bc565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061408482613446565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036140b6576140b561404a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061410857607f821691505b60208210810361411b5761411a6140c1565b5b50919050565b7f73656e646572206973206e6f74206f776e657220666f72207468697320746f6b60008201527f656e000000000000000000000000000000000000000000000000000000000000602082015250565b600061417d60228361396b565b915061418882614121565b604082019050919050565b600060208201905081810360008301526141ac81614170565b9050919050565b60006141be82613446565b91506141c983613446565b92508282019050808211156141e1576141e061404a565b5b92915050565b7f6e657720737570706c7920776f756c6420657863656564206d61780000000000600082015250565b600061421d601b8361396b565b9150614228826141e7565b602082019050919050565b6000602082019050818103600083015261424c81614210565b9050919050565b60008151905061426281613db8565b92915050565b60006020828403121561427e5761427d6133de565b5b600061428c84828501614253565b91505092915050565b60006040820190506142aa60008301856134bc565b6142b760208301846134bc565b9392505050565b7f30206e6f7420616c6c6f77656400000000000000000000000000000000000000600082015250565b60006142f4600d8361396b565b91506142ff826142be565b602082019050919050565b60006020820190508181036000830152614323816142e7565b9050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b600061436d6143686143638461432a565b614348565b614334565b9050919050565b61437d81614352565b82525050565b60006020820190506143986000830184614374565b92915050565b7f6e6577206d6178696d756d20737570706c7920776f756c64206578636565642060008201527f3130303000000000000000000000000000000000000000000000000000000000602082015250565b60006143fa60248361396b565b91506144058261439e565b604082019050919050565b60006020820190508181036000830152614429816143ed565b9050919050565b7f617274697374206e6f742073657420666f72207468697320746f6b656e000000600082015250565b6000614466601d8361396b565b915061447182614430565b602082019050919050565b6000602082019050818103600083015261449581614459565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026144fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826144c1565b61450886836144c1565b95508019841693508086168417925050509392505050565b600061453b61453661453184613446565b614348565b613446565b9050919050565b6000819050919050565b61455583614520565b61456961456182614542565b8484546144ce565b825550505050565b600090565b61457e614571565b61458981848461454c565b505050565b5b818110156145ad576145a2600082614576565b60018101905061458f565b5050565b601f8211156145f2576145c38161449c565b6145cc846144b1565b810160208510156145db578190505b6145ef6145e7856144b1565b83018261458e565b50505b505050565b600082821c905092915050565b6000614615600019846008026145f7565b1980831691505092915050565b600061462e8383614604565b9150826002028217905092915050565b61464782613960565b67ffffffffffffffff8111156146605761465f6135bc565b5b61466a82546140f0565b6146758282856145b1565b600060209050601f8311600181146146a85760008415614696578287015190505b6146a08582614622565b865550614708565b601f1984166146b68661449c565b60005b828110156146de578489015182556001820191506020850194506020810190506146b9565b868310156146fb57848901516146f7601f891682614604565b8355505b6001600288020188555050505b505050505050565b60006040820190506147256000830185613d4e565b6147326020830184613d4e565b9392505050565b61474281613d1a565b811461474d57600080fd5b50565b60008151905061475f81614739565b92915050565b60006020828403121561477b5761477a6133de565b5b600061478984828501614750565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006147b982614792565b6147c3818561479d565b93506147d381856020860161397c565b6147dc816135ab565b840191505092915050565b600060a0820190506147fc6000830188613d4e565b6148096020830187613d4e565b61481660408301866134bc565b61482360608301856134bc565b818103608083015261483581846147ae565b90509695505050505050565b60008151905061485081613512565b92915050565b60006020828403121561486c5761486b6133de565b5b600061487a84828501614841565b91505092915050565b600060a0820190506148986000830188613d4e565b6148a56020830187613d4e565b81810360408301526148b78186613c3e565b905081810360608301526148cb8185613c3e565b905081810360808301526148df81846147ae565b90509695505050505050565b600081905092915050565b600061490182614792565b61490b81856148eb565b935061491b81856020860161397c565b80840191505092915050565b600061493382846148f6565b915081905092915050565b60006080820190506149536000830187613d4e565b61496060208301866134bc565b61496d60408301856134bc565b61497a60608301846134bc565b95945050505050565b6000604082019050818103600083015261499d8185613c3e565b905081810360208301526149b18184613c3e565b9050939250505056fea2646970667358221220957aa2b07f1769f8bd7664da736d9e956bf37f4cd52508d8767fc79b8f852bd964736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x52D1902D GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xBB625509 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE985E9C5 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x6CC JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x709 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x732 JUMPI DUP1 PUSH4 0xFBE0A892 EQ PUSH2 0x75B JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0xBB625509 EQ PUSH2 0x614 JUMPI DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x63D JUMPI DUP1 PUSH4 0xC36497E5 EQ PUSH2 0x67A JUMPI DUP1 PUSH4 0xD00E40CE EQ PUSH2 0x6A3 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x56C JUMPI DUP1 PUSH4 0x9ECA4B7B EQ PUSH2 0x597 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x5C0 JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x5E9 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x52D1902D EQ PUSH2 0x4C4 JUMPI DUP1 PUSH4 0x70480275 EQ PUSH2 0x4EF JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x518 JUMPI DUP1 PUSH4 0x831FFD05 EQ PUSH2 0x52F JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x429B62E5 GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x429B62E5 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x42E JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x46B JUMPI DUP1 PUSH4 0x4F558E79 EQ PUSH2 0x487 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD EQ PUSH2 0x337 JUMPI DUP1 PUSH4 0x1B2EF1CA EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0x24D7806C EQ PUSH2 0x38B JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x3C8 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x6DD0419 GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x6DD0419 EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0x77D9234 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x1785F53C EQ PUSH2 0x30E JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0x2FE5305 EQ PUSH2 0x256 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x347C JUMP JUMPDEST PUSH2 0x798 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x210 SWAP2 SWAP1 PUSH2 0x34CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23B SWAP2 SWAP1 PUSH2 0x353E JUMP JUMPDEST PUSH2 0x801 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24D SWAP2 SWAP1 PUSH2 0x3586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x278 SWAP2 SWAP1 PUSH2 0x36E7 JUMP JUMPDEST PUSH2 0x87B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x347C JUMP JUMPDEST PUSH2 0x88F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CA SWAP2 SWAP1 PUSH2 0x38BB JUMP JUMPDEST PUSH2 0x92A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F3 SWAP2 SWAP1 PUSH2 0x3933 JUMP JUMPDEST PUSH2 0x9EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x39DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x335 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x330 SWAP2 SWAP1 PUSH2 0x3A01 JUMP JUMPDEST PUSH2 0xA92 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x34C PUSH2 0xAEB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x359 SWAP2 SWAP1 PUSH2 0x34CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x389 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x384 SWAP2 SWAP1 PUSH2 0x3A2E JUMP JUMPDEST PUSH2 0xB03 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x397 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3AD SWAP2 SWAP1 PUSH2 0x3A01 JUMP JUMPDEST PUSH2 0xC5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3BF SWAP2 SWAP1 PUSH2 0x3586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3EA SWAP2 SWAP1 PUSH2 0x3B0F JUMP JUMPDEST PUSH2 0xCBB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x418 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x413 SWAP2 SWAP1 PUSH2 0x3A01 JUMP JUMPDEST PUSH2 0xD88 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x425 SWAP2 SWAP1 PUSH2 0x3586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x455 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x450 SWAP2 SWAP1 PUSH2 0x38BB JUMP JUMPDEST PUSH2 0xDA8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x462 SWAP2 SWAP1 PUSH2 0x3C9C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x485 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x480 SWAP2 SWAP1 PUSH2 0x3CBE JUMP JUMPDEST PUSH2 0xEB7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4A9 SWAP2 SWAP1 PUSH2 0x3933 JUMP JUMPDEST PUSH2 0xED6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4BB SWAP2 SWAP1 PUSH2 0x3586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D9 PUSH2 0xEEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E6 SWAP2 SWAP1 PUSH2 0x3D33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x516 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x511 SWAP2 SWAP1 PUSH2 0x3A01 JUMP JUMPDEST PUSH2 0xF1D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x524 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x52D PUSH2 0xF7F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x556 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x551 SWAP2 SWAP1 PUSH2 0x3933 JUMP JUMPDEST PUSH2 0xF93 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x563 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x581 PUSH2 0xFC6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x58E SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5BE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B9 SWAP2 SWAP1 PUSH2 0x3D78 JUMP JUMPDEST PUSH2 0xFFE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5E2 SWAP2 SWAP1 PUSH2 0x3DE4 JUMP JUMPDEST PUSH2 0x1122 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5FE PUSH2 0x1130 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x60B SWAP2 SWAP1 PUSH2 0x39DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x620 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x63B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x636 SWAP2 SWAP1 PUSH2 0x3E24 JUMP JUMPDEST PUSH2 0x1169 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x664 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x65F SWAP2 SWAP1 PUSH2 0x3933 JUMP JUMPDEST PUSH2 0x13A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x671 SWAP2 SWAP1 PUSH2 0x34CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x686 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x69C SWAP2 SWAP1 PUSH2 0x3A2E JUMP JUMPDEST PUSH2 0x13CF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6C5 SWAP2 SWAP1 PUSH2 0x3A2E JUMP JUMPDEST PUSH2 0x14F7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6EE SWAP2 SWAP1 PUSH2 0x3EAF JUMP JUMPDEST PUSH2 0x16DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x700 SWAP2 SWAP1 PUSH2 0x3586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x730 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x72B SWAP2 SWAP1 PUSH2 0x3EEF JUMP JUMPDEST PUSH2 0x174E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x759 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x754 SWAP2 SWAP1 PUSH2 0x3A01 JUMP JUMPDEST PUSH2 0x181B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x767 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x782 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x77D SWAP2 SWAP1 PUSH2 0x3933 JUMP JUMPDEST PUSH2 0x18A1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78F SWAP2 SWAP1 PUSH2 0x34CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7A3 PUSH2 0x18B9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x2A55205A00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x874 JUMPI POP PUSH2 0x873 DUP3 PUSH2 0x18E1 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x883 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0x88C DUP2 PUSH2 0x1A4A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x91A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x911 SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x926 DUP3 DUP3 PUSH1 0x1 PUSH2 0x1A6C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x9EA JUMPI ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6DD0419 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x965 JUMPI PUSH2 0x964 PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x980 JUMPI PUSH2 0x97F PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A5 SWAP3 SWAP2 SWAP1 PUSH2 0x4021 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0x9E2 SWAP1 PUSH2 0x4079 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x92D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x9FB PUSH2 0x18B9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xA0C SWAP1 PUSH2 0x40F0 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA38 SWAP1 PUSH2 0x40F0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA85 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA5A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA85 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA68 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA9A PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAF6 PUSH2 0x1B13 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD SLOAD SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBA4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB9B SWAP1 PUSH2 0x4193 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 PUSH2 0xBC2 DUP5 PUSH2 0x13A4 JUMP JUMPDEST PUSH2 0xBCC SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST GT ISZERO PUSH2 0xC0D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC04 SWAP1 PUSH2 0x4233 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC5B PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1B3B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 ISZERO ISZERO PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x24D7806C CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCF4 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD35 SWAP2 SWAP1 PUSH2 0x4268 JUMP JUMPDEST PUSH2 0xD74 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD6B SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD81 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1BD4 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xDF4 JUMPI DUP2 MLOAD DUP4 MLOAD PUSH1 0x40 MLOAD PUSH32 0x5B05999100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDEB SWAP3 SWAP2 SWAP1 PUSH2 0x4295 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE11 JUMPI PUSH2 0xE10 PUSH2 0x35BC JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE3F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xEAC JUMPI PUSH2 0xE7C PUSH2 0xE64 DUP3 DUP8 PUSH2 0x1C7C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xE77 DUP4 DUP8 PUSH2 0x1C90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x798 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xE8F JUMPI PUSH2 0xE8E PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 PUSH2 0xEA5 SWAP1 PUSH2 0x4079 JUMP JUMPDEST SWAP1 POP PUSH2 0xE45 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xEBF PUSH2 0x1CA4 JUMP JUMPDEST PUSH2 0xEC8 DUP3 PUSH2 0x1D8A JUMP JUMPDEST PUSH2 0xED2 DUP3 DUP3 PUSH2 0x1D95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xEE2 DUP4 PUSH2 0x13A4 JUMP JUMPDEST GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEF4 PUSH2 0x1EB4 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xF25 PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0xF87 PUSH2 0x19C3 JUMP JUMPDEST PUSH2 0xF91 PUSH1 0x0 PUSH2 0x1F3B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xFD1 PUSH2 0x2012 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1089 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1080 SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SUB PUSH2 0x10CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10C3 SWAP1 PUSH2 0x430A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x112C DUP3 DUP3 PUSH2 0x203A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x352E302E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1173 PUSH2 0x2050 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x11C1 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x11F6 JUMPI POP PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x1204 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x123B JUMPI PUSH1 0x40 MLOAD PUSH32 0xF92EE8A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 ISZERO PUSH2 0x128B JUMPI PUSH1 0x1 DUP6 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x1293 PUSH2 0x2078 JUMP JUMPDEST PUSH2 0x129C DUP9 PUSH2 0x2082 JUMP JUMPDEST PUSH2 0x12A4 PUSH2 0x2096 JUMP JUMPDEST PUSH2 0x12AD DUP7 PUSH2 0x1A4A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x133D JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x12D1 JUMPI PUSH2 0x12D0 PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x1335 SWAP1 PUSH2 0x4079 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12B0 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x139A JUMPI PUSH1 0x0 DUP6 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x1391 SWAP2 SWAP1 PUSH2 0x4383 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x13AF PUSH2 0x1B13 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x145A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1451 SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3E8 DUP2 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x147C SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST GT ISZERO PUSH2 0x14BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14B4 SWAP1 PUSH2 0x4410 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x14DC SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1582 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1579 SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1624 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x161B SWAP1 PUSH2 0x447C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 PUSH2 0x1642 DUP5 PUSH2 0x13A4 JUMP JUMPDEST PUSH2 0x164C SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST GT ISZERO PUSH2 0x168D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1684 SWAP1 PUSH2 0x4233 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x16DB PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1B3B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x173B JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x1748 JUMP JUMPDEST PUSH2 0x1745 DUP4 DUP4 PUSH2 0x20A0 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x24D7806C CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1787 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17C8 SWAP2 SWAP1 PUSH2 0x4268 JUMP JUMPDEST PUSH2 0x1807 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17FE SWAP1 PUSH2 0x3FD2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1814 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2142 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1823 PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1895 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x188C SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x189E DUP2 PUSH2 0x1F3B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x88BE536D5240C274A3B1D3A1BE54482FD9CAA294F08C62A7CDE569F49A3C4500 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xD9B67A2600000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x19AC JUMPI POP PUSH32 0xE89341C00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x19BC JUMPI POP PUSH2 0x19BB DUP3 PUSH2 0x21EA JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19CB PUSH2 0x2254 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x19E9 PUSH2 0xFC6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1A48 JUMPI PUSH2 0x1A0C PUSH2 0x2254 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A3F SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A54 PUSH2 0x18B9 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 PUSH1 0x2 ADD SWAP1 DUP2 PUSH2 0x1A67 SWAP2 SWAP1 PUSH2 0x463E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1ADE JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1A8351400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1AD5 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1AEB DUP5 DUP5 PUSH2 0x225C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1B0C DUP6 PUSH1 0x0 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x228C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4A593662EE04D27B6A00EBB31BE7FE0C102C2ADE82A7C5D764F2DF05DC4E2800 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1BAD JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BA4 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1BBA DUP6 DUP6 PUSH2 0x225C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1BCC PUSH1 0x0 DUP8 DUP5 DUP5 DUP8 PUSH2 0x228C JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BDE PUSH2 0x2254 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1C23 JUMPI POP PUSH2 0x1C21 DUP7 DUP3 PUSH2 0x16DF JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1C67 JUMPI DUP1 DUP7 PUSH1 0x40 MLOAD PUSH32 0xE237D92200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C5E SWAP3 SWAP2 SWAP1 PUSH2 0x4710 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C74 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x233E JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MUL PUSH1 0x20 DUP5 ADD ADD MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MUL PUSH1 0x20 DUP5 ADD ADD MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1D51 JUMPI POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1D38 PUSH2 0x2436 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1D88 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE07C8DBA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x1D92 PUSH2 0x19C3 JUMP JUMPDEST POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1DFD JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DFA SWAP2 SWAP1 PUSH2 0x4765 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1E3E JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x4C9C8CE300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E35 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL DUP2 EQ PUSH2 0x1EA5 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xAA1D49A400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E9C SWAP2 SWAP1 PUSH2 0x3D33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1EAF DUP4 DUP4 PUSH2 0x248D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1F39 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE07C8DBA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F45 PUSH2 0x2012 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x204C PUSH2 0x2045 PUSH2 0x2254 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x2500 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2080 PUSH2 0x267F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x208A PUSH2 0x267F JUMP JUMPDEST PUSH2 0x2093 DUP2 PUSH2 0x26BF JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x209E PUSH2 0x267F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x20AB PUSH2 0x18B9 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x214C PUSH2 0x2254 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2191 JUMPI POP PUSH2 0x218F DUP7 DUP3 PUSH2 0x16DF JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x21D5 JUMPI DUP1 DUP7 PUSH1 0x40 MLOAD PUSH32 0xE237D92200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21CC SWAP3 SWAP2 SWAP1 PUSH2 0x4710 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x21E2 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x2745 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH1 0x1 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 MSTORE SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2298 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2850 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2337 JUMPI PUSH1 0x0 PUSH2 0x22D6 PUSH2 0x2254 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP5 MLOAD SUB PUSH2 0x2326 JUMPI PUSH1 0x0 PUSH2 0x22F7 PUSH1 0x0 DUP7 PUSH2 0x1C90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x230F PUSH1 0x0 DUP7 PUSH2 0x1C90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x231F DUP4 DUP10 DUP10 DUP6 DUP6 DUP10 PUSH2 0x2A1C JUMP JUMPDEST POP POP PUSH2 0x2335 JUMP JUMPDEST PUSH2 0x2334 DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2BD0 JUMP JUMPDEST JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x23B0 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23A7 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2422 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1A8351400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2419 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x242F DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x228C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2464 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x2D84 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2496 DUP3 PUSH2 0x2D8E JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x24F3 JUMPI PUSH2 0x24ED DUP3 DUP3 PUSH2 0x2E5B JUMP JUMPDEST POP PUSH2 0x24FC JUMP JUMPDEST PUSH2 0x24FB PUSH2 0x2EDF JUMP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x250A PUSH2 0x18B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x257E JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xCED3E10000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2575 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP5 PUSH1 0x40 MLOAD PUSH2 0x2671 SWAP2 SWAP1 PUSH2 0x3586 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x2687 PUSH2 0x2F1C JUMP JUMPDEST PUSH2 0x26BD JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7E6BCF800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x26C7 PUSH2 0x267F JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2739 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2730 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2742 DUP2 PUSH2 0x1F3B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x27B7 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27AE SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2829 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1A8351400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2820 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2836 DUP6 DUP6 PUSH2 0x225C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2847 DUP8 DUP8 DUP5 DUP5 DUP8 PUSH2 0x228C JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x285A PUSH2 0x1B13 JUMP JUMPDEST SWAP1 POP PUSH2 0x2868 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2F3C JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x294C JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x292E JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x28BE JUMPI PUSH2 0x28BD PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x28E2 JUMPI PUSH2 0x28E1 PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2907 SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP4 PUSH2 0x291A SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST SWAP3 POP POP DUP1 PUSH2 0x2927 SWAP1 PUSH2 0x4079 JUMP JUMPDEST SWAP1 POP PUSH2 0x28A0 JUMP JUMPDEST POP DUP1 DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2943 SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2A15 JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2A00 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x29A2 JUMPI PUSH2 0x29A1 PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x29C6 JUMPI PUSH2 0x29C5 PUSH2 0x3FF2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP4 ADD SWAP3 POP POP DUP1 PUSH2 0x29F9 SWAP1 PUSH2 0x4079 JUMP JUMPDEST SWAP1 POP PUSH2 0x2984 JUMP JUMPDEST POP DUP1 DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x2BC8 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF23A6E61 DUP8 DUP8 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A7D SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x47E7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2AB9 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2AB6 SWAP2 SWAP1 PUSH2 0x4856 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2B3D JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2AE9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2AEE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x2B35 JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2C SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x2BC6 JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2BBD SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x2D7C JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBC197C81 DUP8 DUP8 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C31 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4883 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2C6D JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C6A SWAP2 SWAP1 PUSH2 0x4856 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2CF1 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2C9D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2CA2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x2CE9 JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2CE0 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x2D7A JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D71 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE SUB PUSH2 0x2DEA JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x4C9C8CE300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2DE1 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x2E17 PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x2D84 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x2E85 SWAP2 SWAP1 PUSH2 0x4927 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2EC0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2ED5 DUP6 DUP4 DUP4 PUSH2 0x3300 JUMP JUMPDEST SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT ISZERO PUSH2 0x2F1A JUMPI PUSH1 0x40 MLOAD PUSH32 0xB398979F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F26 PUSH2 0x2050 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F46 PUSH2 0x18B9 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x2F92 JUMPI DUP3 MLOAD DUP3 MLOAD PUSH1 0x40 MLOAD PUSH32 0x5B05999100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F89 SWAP3 SWAP2 SWAP1 PUSH2 0x4295 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2F9C PUSH2 0x2254 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x31BA JUMPI PUSH1 0x0 PUSH2 0x2FBF DUP3 DUP8 PUSH2 0x1C90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2FD6 DUP4 DUP8 PUSH2 0x1C90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3109 JUMPI PUSH1 0x0 DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x30AE JUMPI DUP10 DUP2 DUP4 DUP6 PUSH1 0x40 MLOAD PUSH32 0x3DEE4C500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30A5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x493E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x31A7 JUMPI DUP1 DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x319F SWAP2 SWAP1 PUSH2 0x41B3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST POP POP DUP1 PUSH2 0x31B3 SWAP1 PUSH2 0x4079 JUMP JUMPDEST SWAP1 POP PUSH2 0x2FA1 JUMP JUMPDEST POP PUSH1 0x1 DUP5 MLOAD SUB PUSH2 0x3279 JUMPI PUSH1 0x0 PUSH2 0x31DA PUSH1 0x0 DUP7 PUSH2 0x1C90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x31F2 PUSH1 0x0 DUP7 PUSH2 0x1C90 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x326A SWAP3 SWAP2 SWAP1 PUSH2 0x4295 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH2 0x32F8 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x32EF SWAP3 SWAP2 SWAP1 PUSH2 0x4983 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x3315 JUMPI PUSH2 0x3310 DUP3 PUSH2 0x338F JUMP JUMPDEST PUSH2 0x3387 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD EQ DUP1 ISZERO PUSH2 0x333D JUMPI POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x337F JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3376 SWAP2 SWAP1 PUSH2 0x3D5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP PUSH2 0x3388 JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x33A2 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3413 DUP3 PUSH2 0x33E8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3423 DUP2 PUSH2 0x3408 JUMP JUMPDEST DUP2 EQ PUSH2 0x342E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3440 DUP2 PUSH2 0x341A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3459 DUP2 PUSH2 0x3446 JUMP JUMPDEST DUP2 EQ PUSH2 0x3464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3476 DUP2 PUSH2 0x3450 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3493 JUMPI PUSH2 0x3492 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x34A1 DUP6 DUP3 DUP7 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x34B2 DUP6 DUP3 DUP7 ADD PUSH2 0x3467 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x34C5 DUP2 PUSH2 0x3446 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x34E0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x34BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x351B DUP2 PUSH2 0x34E6 JUMP JUMPDEST DUP2 EQ PUSH2 0x3526 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3538 DUP2 PUSH2 0x3512 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3554 JUMPI PUSH2 0x3553 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3562 DUP5 DUP3 DUP6 ADD PUSH2 0x3529 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3580 DUP2 PUSH2 0x356B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x359B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3577 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x35F4 DUP3 PUSH2 0x35AB JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3613 JUMPI PUSH2 0x3612 PUSH2 0x35BC JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3626 PUSH2 0x33D4 JUMP JUMPDEST SWAP1 POP PUSH2 0x3632 DUP3 DUP3 PUSH2 0x35EB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3652 JUMPI PUSH2 0x3651 PUSH2 0x35BC JUMP JUMPDEST JUMPDEST PUSH2 0x365B DUP3 PUSH2 0x35AB JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x368A PUSH2 0x3685 DUP5 PUSH2 0x3637 JUMP JUMPDEST PUSH2 0x361C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x36A6 JUMPI PUSH2 0x36A5 PUSH2 0x35A6 JUMP JUMPDEST JUMPDEST PUSH2 0x36B1 DUP5 DUP3 DUP6 PUSH2 0x3668 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x36CE JUMPI PUSH2 0x36CD PUSH2 0x35A1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x36DE DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3677 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x36FD JUMPI PUSH2 0x36FC PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x371B JUMPI PUSH2 0x371A PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3727 DUP5 DUP3 DUP6 ADD PUSH2 0x36B9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x374B JUMPI PUSH2 0x374A PUSH2 0x35BC JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3774 PUSH2 0x376F DUP5 PUSH2 0x3730 JUMP JUMPDEST PUSH2 0x361C JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x3797 JUMPI PUSH2 0x3796 PUSH2 0x375C JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x37C0 JUMPI DUP1 PUSH2 0x37AC DUP9 DUP3 PUSH2 0x3431 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3799 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x37DF JUMPI PUSH2 0x37DE PUSH2 0x35A1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x37EF DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3761 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3813 JUMPI PUSH2 0x3812 PUSH2 0x35BC JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3837 PUSH2 0x3832 DUP5 PUSH2 0x37F8 JUMP JUMPDEST PUSH2 0x361C JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x385A JUMPI PUSH2 0x3859 PUSH2 0x375C JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3883 JUMPI DUP1 PUSH2 0x386F DUP9 DUP3 PUSH2 0x3467 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x385C JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x38A2 JUMPI PUSH2 0x38A1 PUSH2 0x35A1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x38B2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3824 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38D2 JUMPI PUSH2 0x38D1 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x38F0 JUMPI PUSH2 0x38EF PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x38FC DUP6 DUP3 DUP7 ADD PUSH2 0x37CA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x391D JUMPI PUSH2 0x391C PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3929 DUP6 DUP3 DUP7 ADD PUSH2 0x388D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3949 JUMPI PUSH2 0x3948 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3957 DUP5 DUP3 DUP6 ADD PUSH2 0x3467 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x399A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x397F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39B1 DUP3 PUSH2 0x3960 JUMP JUMPDEST PUSH2 0x39BB DUP2 DUP6 PUSH2 0x396B JUMP JUMPDEST SWAP4 POP PUSH2 0x39CB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x397C JUMP JUMPDEST PUSH2 0x39D4 DUP2 PUSH2 0x35AB JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39F9 DUP2 DUP5 PUSH2 0x39A6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A17 JUMPI PUSH2 0x3A16 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A25 DUP5 DUP3 DUP6 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3A45 JUMPI PUSH2 0x3A44 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3A53 DUP6 DUP3 DUP7 ADD PUSH2 0x3467 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3A64 DUP6 DUP3 DUP7 ADD PUSH2 0x3467 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3A89 JUMPI PUSH2 0x3A88 PUSH2 0x35BC JUMP JUMPDEST JUMPDEST PUSH2 0x3A92 DUP3 PUSH2 0x35AB JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AB2 PUSH2 0x3AAD DUP5 PUSH2 0x3A6E JUMP JUMPDEST PUSH2 0x361C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x3ACE JUMPI PUSH2 0x3ACD PUSH2 0x35A6 JUMP JUMPDEST JUMPDEST PUSH2 0x3AD9 DUP5 DUP3 DUP6 PUSH2 0x3668 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3AF6 JUMPI PUSH2 0x3AF5 PUSH2 0x35A1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3B06 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3A9F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3B2B JUMPI PUSH2 0x3B2A PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3B39 DUP9 DUP3 DUP10 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x3B4A DUP9 DUP3 DUP10 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B6B JUMPI PUSH2 0x3B6A PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3B77 DUP9 DUP3 DUP10 ADD PUSH2 0x388D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B98 JUMPI PUSH2 0x3B97 PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3BA4 DUP9 DUP3 DUP10 ADD PUSH2 0x388D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3BC5 JUMPI PUSH2 0x3BC4 PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3BD1 DUP9 DUP3 DUP10 ADD PUSH2 0x3AE1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3C13 DUP2 PUSH2 0x3446 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C25 DUP4 DUP4 PUSH2 0x3C0A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C49 DUP3 PUSH2 0x3BDE JUMP JUMPDEST PUSH2 0x3C53 DUP2 DUP6 PUSH2 0x3BE9 JUMP JUMPDEST SWAP4 POP PUSH2 0x3C5E DUP4 PUSH2 0x3BFA JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3C8F JUMPI DUP2 MLOAD PUSH2 0x3C76 DUP9 DUP3 PUSH2 0x3C19 JUMP JUMPDEST SWAP8 POP PUSH2 0x3C81 DUP4 PUSH2 0x3C31 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3C62 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CB6 DUP2 DUP5 PUSH2 0x3C3E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3CD5 JUMPI PUSH2 0x3CD4 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3CE3 DUP6 DUP3 DUP7 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D04 JUMPI PUSH2 0x3D03 PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3D10 DUP6 DUP3 DUP7 ADD PUSH2 0x3AE1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3D2D DUP2 PUSH2 0x3D1A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3D48 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3D24 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3D57 DUP2 PUSH2 0x3408 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3D72 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3D4E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3D8F JUMPI PUSH2 0x3D8E PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3D9D DUP6 DUP3 DUP7 ADD PUSH2 0x3467 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3DAE DUP6 DUP3 DUP7 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x3DC1 DUP2 PUSH2 0x356B JUMP JUMPDEST DUP2 EQ PUSH2 0x3DCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3DDE DUP2 PUSH2 0x3DB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3DFB JUMPI PUSH2 0x3DFA PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3E09 DUP6 DUP3 DUP7 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3E1A DUP6 DUP3 DUP7 ADD PUSH2 0x3DCF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3E3D JUMPI PUSH2 0x3E3C PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3E4B DUP7 DUP3 DUP8 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E6C JUMPI PUSH2 0x3E6B PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3E78 DUP7 DUP3 DUP8 ADD PUSH2 0x37CA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E99 JUMPI PUSH2 0x3E98 PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3EA5 DUP7 DUP3 DUP8 ADD PUSH2 0x36B9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3EC6 JUMPI PUSH2 0x3EC5 PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3ED4 DUP6 DUP3 DUP7 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3EE5 DUP6 DUP3 DUP7 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3F0B JUMPI PUSH2 0x3F0A PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F19 DUP9 DUP3 DUP10 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x3F2A DUP9 DUP3 DUP10 ADD PUSH2 0x3431 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x3F3B DUP9 DUP3 DUP10 ADD PUSH2 0x3467 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x3F4C DUP9 DUP3 DUP10 ADD PUSH2 0x3467 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F6D JUMPI PUSH2 0x3F6C PUSH2 0x33E3 JUMP JUMPDEST JUMPDEST PUSH2 0x3F79 DUP9 DUP3 DUP10 ADD PUSH2 0x3AE1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH32 0x6E6F742061646D696E0000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3FBC PUSH1 0x9 DUP4 PUSH2 0x396B JUMP JUMPDEST SWAP2 POP PUSH2 0x3FC7 DUP3 PUSH2 0x3F86 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3FEB DUP2 PUSH2 0x3FAF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x4036 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3D4E JUMP JUMPDEST PUSH2 0x4043 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x34BC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4084 DUP3 PUSH2 0x3446 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x40B6 JUMPI PUSH2 0x40B5 PUSH2 0x404A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x4108 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x411B JUMPI PUSH2 0x411A PUSH2 0x40C1 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x73656E646572206973206E6F74206F776E657220666F72207468697320746F6B PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x656E000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x417D PUSH1 0x22 DUP4 PUSH2 0x396B JUMP JUMPDEST SWAP2 POP PUSH2 0x4188 DUP3 PUSH2 0x4121 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x41AC DUP2 PUSH2 0x4170 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41BE DUP3 PUSH2 0x3446 JUMP JUMPDEST SWAP2 POP PUSH2 0x41C9 DUP4 PUSH2 0x3446 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x41E1 JUMPI PUSH2 0x41E0 PUSH2 0x404A JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x6E657720737570706C7920776F756C6420657863656564206D61780000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x421D PUSH1 0x1B DUP4 PUSH2 0x396B JUMP JUMPDEST SWAP2 POP PUSH2 0x4228 DUP3 PUSH2 0x41E7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x424C DUP2 PUSH2 0x4210 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4262 DUP2 PUSH2 0x3DB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x427E JUMPI PUSH2 0x427D PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x428C DUP5 DUP3 DUP6 ADD PUSH2 0x4253 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x42AA PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x34BC JUMP JUMPDEST PUSH2 0x42B7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x34BC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x30206E6F7420616C6C6F77656400000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42F4 PUSH1 0xD DUP4 PUSH2 0x396B JUMP JUMPDEST SWAP2 POP PUSH2 0x42FF DUP3 PUSH2 0x42BE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4323 DUP2 PUSH2 0x42E7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x436D PUSH2 0x4368 PUSH2 0x4363 DUP5 PUSH2 0x432A JUMP JUMPDEST PUSH2 0x4348 JUMP JUMPDEST PUSH2 0x4334 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x437D DUP2 PUSH2 0x4352 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4398 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4374 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x6E6577206D6178696D756D20737570706C7920776F756C642065786365656420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x3130303000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43FA PUSH1 0x24 DUP4 PUSH2 0x396B JUMP JUMPDEST SWAP2 POP PUSH2 0x4405 DUP3 PUSH2 0x439E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4429 DUP2 PUSH2 0x43ED JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x617274697374206E6F742073657420666F72207468697320746F6B656E000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4466 PUSH1 0x1D DUP4 PUSH2 0x396B JUMP JUMPDEST SWAP2 POP PUSH2 0x4471 DUP3 PUSH2 0x4430 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4495 DUP2 PUSH2 0x4459 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x44FE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x44C1 JUMP JUMPDEST PUSH2 0x4508 DUP7 DUP4 PUSH2 0x44C1 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x453B PUSH2 0x4536 PUSH2 0x4531 DUP5 PUSH2 0x3446 JUMP JUMPDEST PUSH2 0x4348 JUMP JUMPDEST PUSH2 0x3446 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4555 DUP4 PUSH2 0x4520 JUMP JUMPDEST PUSH2 0x4569 PUSH2 0x4561 DUP3 PUSH2 0x4542 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x44CE JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x457E PUSH2 0x4571 JUMP JUMPDEST PUSH2 0x4589 DUP2 DUP5 DUP5 PUSH2 0x454C JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x45AD JUMPI PUSH2 0x45A2 PUSH1 0x0 DUP3 PUSH2 0x4576 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x458F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x45F2 JUMPI PUSH2 0x45C3 DUP2 PUSH2 0x449C JUMP JUMPDEST PUSH2 0x45CC DUP5 PUSH2 0x44B1 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x45DB JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x45EF PUSH2 0x45E7 DUP6 PUSH2 0x44B1 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x458E JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4615 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x45F7 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x462E DUP4 DUP4 PUSH2 0x4604 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4647 DUP3 PUSH2 0x3960 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4660 JUMPI PUSH2 0x465F PUSH2 0x35BC JUMP JUMPDEST JUMPDEST PUSH2 0x466A DUP3 SLOAD PUSH2 0x40F0 JUMP JUMPDEST PUSH2 0x4675 DUP3 DUP3 DUP6 PUSH2 0x45B1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x46A8 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x4696 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x46A0 DUP6 DUP3 PUSH2 0x4622 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x4708 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x46B6 DUP7 PUSH2 0x449C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x46DE JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x46B9 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x46FB JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x46F7 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x4604 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x4725 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3D4E JUMP JUMPDEST PUSH2 0x4732 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3D4E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x4742 DUP2 PUSH2 0x3D1A JUMP JUMPDEST DUP2 EQ PUSH2 0x474D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x475F DUP2 PUSH2 0x4739 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x477B JUMPI PUSH2 0x477A PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4789 DUP5 DUP3 DUP6 ADD PUSH2 0x4750 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x47B9 DUP3 PUSH2 0x4792 JUMP JUMPDEST PUSH2 0x47C3 DUP2 DUP6 PUSH2 0x479D JUMP JUMPDEST SWAP4 POP PUSH2 0x47D3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x397C JUMP JUMPDEST PUSH2 0x47DC DUP2 PUSH2 0x35AB JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x47FC PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3D4E JUMP JUMPDEST PUSH2 0x4809 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3D4E JUMP JUMPDEST PUSH2 0x4816 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x34BC JUMP JUMPDEST PUSH2 0x4823 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x34BC JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x4835 DUP2 DUP5 PUSH2 0x47AE JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4850 DUP2 PUSH2 0x3512 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x486C JUMPI PUSH2 0x486B PUSH2 0x33DE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x487A DUP5 DUP3 DUP6 ADD PUSH2 0x4841 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x4898 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3D4E JUMP JUMPDEST PUSH2 0x48A5 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3D4E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x48B7 DUP2 DUP7 PUSH2 0x3C3E JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x48CB DUP2 DUP6 PUSH2 0x3C3E JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x48DF DUP2 DUP5 PUSH2 0x47AE JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4901 DUP3 PUSH2 0x4792 JUMP JUMPDEST PUSH2 0x490B DUP2 DUP6 PUSH2 0x48EB JUMP JUMPDEST SWAP4 POP PUSH2 0x491B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x397C JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4933 DUP3 DUP5 PUSH2 0x48F6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x4953 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x3D4E JUMP JUMPDEST PUSH2 0x4960 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x34BC JUMP JUMPDEST PUSH2 0x496D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x34BC JUMP JUMPDEST PUSH2 0x497A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x34BC JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x499D DUP2 DUP6 PUSH2 0x3C3E JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x49B1 DUP2 DUP5 PUSH2 0x3C3E JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 PUSH27 0xA2B07F1769F8BD7664DA736D9E956BF37F4CD52508D8767FC79B8F DUP6 0x2B 0xD9 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"511:5247:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3358:191:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5202:232:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2144:77;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4056:145;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4367:183;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3136:162:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2741:100:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2015:171:4;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3032:312:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2328:114;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4930:268;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;625:38;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3706:552:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4158:214:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2279:106:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3705:134:2;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2539:97:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3155:101:0;;;;;;;;;;;;;:::i;:::-;;667:50:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2441:144:0;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1311:216:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4554:130;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1819:58:2;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;778:321:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1776:182:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1730:310:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3541:358;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5438:205;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4688:238;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3405:215:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;721:52:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3358:191:3;3435:7;3454:24;3481:20;:18;:20::i;:::-;3454:47;;3518:1;:11;;:15;3530:2;3518:15;;;;;;;;;;;:24;3534:7;3518:24;;;;;;;;;;;;;;;;3511:31;;;3358:191;;;;:::o;5202:232:23:-;5307:4;5349:26;5334:41;;;:11;:41;;;;:89;;;;5387:36;5411:11;5387:23;:36::i;:::-;5334:89;5319:110;;5202:232;;;:::o;2144:77::-;2334:13:0;:11;:13::i;:::-;2204:12:23::1;2212:3;2204:7;:12::i;:::-;2144:77:::0;:::o;4056:145::-;4129:6;:18;4136:10;4129:18;;;;;;;;;;;;;;;;;;;;;;;;;4121:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;4167:29;4179:4;4185:7;4194:1;4167:11;:29::i;:::-;4056:145;;:::o;4367:183::-;4461:6;4456:90;4477:4;:11;4473:1;:15;4456:90;;;4503:4;:14;;;4518:4;4523:1;4518:7;;;;;;;;:::i;:::-;;;;;;;;4527:8;4536:1;4527:11;;;;;;;;:::i;:::-;;;;;;;;4503:36;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4490:3;;;;;:::i;:::-;;;;4456:90;;;;4367:183;;:::o;3136:162:3:-;3196:13;3221:24;3248:20;:18;:20::i;:::-;3221:47;;3285:1;:6;;3278:13;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3136:162;;;:::o;2741:100:23:-;2334:13:0;:11;:13::i;:::-;2816:6:23::1;:20:::0;2823:12:::1;2816:20;;;;;;;;;;;;;;;;2809:27;;;;;;;;;;;2741:100:::0;:::o;2015:171:4:-;2067:7;2086:30;2119:26;:24;:26::i;:::-;2086:59;;2162:1;:17;;;2155:24;;;2015:171;:::o;3032:312:23:-;3129:10;3101:38;;:15;:24;3117:7;3101:24;;;;;;;;;;;;;;;;;;;;;:38;;;3093:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;3224:17;:26;3242:7;3224:26;;;;;;;;;;;;3215:5;3192:20;3204:7;3192:11;:20::i;:::-;:28;;;;:::i;:::-;:58;;3184:98;;;;;;;;;;;;:::i;:::-;;;;;;;;;3288:51;3294:15;:24;3310:7;3294:24;;;;;;;;;;;;;;;;;;;;;3320:7;3329:5;3288:51;;;;;;;;;;;;:5;:51::i;:::-;3032:312;;:::o;2328:114::-;2390:4;2433;2409:28;;:6;:20;2416:12;2409:20;;;;;;;;;;;;;;;;;;;;;;;;;:28;;;2402:35;;2328:114;;;:::o;4930:268::-;5092:4;:12;;;5105:10;5092:24;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5084:46;;;;;;;;;;;;:::i;:::-;;;;;;;;;5136:57;5164:4;5170:2;5174:3;5179:7;5188:4;5136:27;:57::i;:::-;4930:268;;;;;:::o;625:38::-;;;;;;;;;;;;;;;;;;;;;;:::o;3706:552:3:-;3830:16;3881:3;:10;3862:8;:15;:29;3858:121;;3940:3;:10;3952:8;:15;3914:54;;;;;;;;;;;;:::i;:::-;;;;;;;;3858:121;3989:30;4036:8;:15;4022:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3989:63;;4068:9;4063:158;4087:8;:15;4083:1;:19;4063:158;;;4142:68;4152:30;4180:1;4152:8;:27;;:30;;;;:::i;:::-;4184:25;4207:1;4184:3;:22;;:25;;;;:::i;:::-;4142:9;:68::i;:::-;4123:13;4137:1;4123:16;;;;;;;;:::i;:::-;;;;;;;:87;;;;;4104:3;;;;:::i;:::-;;;4063:158;;;;4238:13;4231:20;;;3706:552;;;;:::o;4158:214:2:-;2653:13;:11;:13::i;:::-;4273:36:::1;4291:17;4273;:36::i;:::-;4319:46;4341:17;4360:4;4319:21;:46::i;:::-;4158:214:::0;;:::o;2279:106:4:-;2336:4;2377:1;2359:15;2371:2;2359:11;:15::i;:::-;:19;2352:26;;2279:106;;;:::o;3705:134:2:-;3774:7;2924:20;:18;:20::i;:::-;1327:66:10::1;3800:32:2;;3793:39;;3705:134:::0;:::o;2539:97:23:-;2334:13:0;:11;:13::i;:::-;2627:4:23::1;2604:6;:20:::0;2611:12:::1;2604:20;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;2539:97:::0;:::o;3155:101:0:-;2334:13;:11;:13::i;:::-;3219:30:::1;3246:1;3219:18;:30::i;:::-;3155:101::o:0;667:50:23:-;;;;;;;;;;;;;;;;;;;;;;:::o;2441:144:0:-;2487:7;2506:24;2533:20;:18;:20::i;:::-;2506:47;;2570:1;:8;;;;;;;;;;;;2563:15;;;2441:144;:::o;1311:216:23:-;1400:6;:18;1407:10;1400:18;;;;;;;;;;;;;;;;;;;;;;;;;1392:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;1457:1;1446:7;:12;1438:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;1509:13;1482:15;:24;1498:7;1482:24;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;1311:216;;:::o;4554:130::-;4636:43;4660:8;4670;4636:23;:43::i;:::-;4554:130;;:::o;1819:58:2:-;;;;;;;;;;;;;;;;;;;:::o;778:321:23:-;4158:30:1;4191:26;:24;:26::i;:::-;4158:59;;4279:19;4302:1;:15;;;;;;;;;;;;4301:16;4279:38;;4327:18;4348:1;:14;;;;;;;;;;;;4327:35;;4706:17;4741:1;4726:11;:16;;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4805:1;4790:11;:16;;;:50;;;;;4839:1;4818:4;4810:25;;;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;;;;;;;;;;;;;4851:91;4968:1;4951;:14;;;:18;;;;;;;;;;;;;;;;;;4983:14;4979:67;;;5031:4;5013:1;:15;;;:22;;;;;;;;;;;;;;;;;;4979:67;890:22:23::1;:20;:22::i;:::-;918:28;933:12;918:14;:28::i;:::-;952:24;:22;:24::i;:::-;982:12;990:3;982:7;:12::i;:::-;1006:6;1001:94;1022:13;:20;1018:1;:24;1001:94;;;1084:4;1057:6;:24:::0;1064:13:::1;1078:1;1064:16;;;;;;;;:::i;:::-;;;;;;;;1057:24;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;1044:3;;;;;:::i;:::-;;;;1001:94;;;;5070:14:1::0;5066:101;;;5118:5;5100:1;:15;;;:23;;;;;;;;;;;;;;;;;;5142:14;5154:1;5142:14;;;;;;:::i;:::-;;;;;;;;5066:101;4092:1081;;;;;778:321:23;;;:::o;1776:182:4:-;1838:7;1857:30;1890:26;:24;:26::i;:::-;1857:59;;1933:1;:14;;:18;1948:2;1933:18;;;;;;;;;;;;1926:25;;;1776:182;;;:::o;1730:310:23:-;1825:6;:18;1832:10;1825:18;;;;;;;;;;;;;;;;;;;;;;;;;1817:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;1915:4;1900:11;1871:17;:26;1889:7;1871:26;;;;;;;;;;;;:40;;;;:::i;:::-;:48;;1863:97;;;;;;;;;;;;:::i;:::-;;;;;;;;;2024:11;1995:17;:26;2013:7;1995:26;;;;;;;;;;;;:40;;;;:::i;:::-;1966:17;:26;1984:7;1966:26;;;;;;;;;;;:69;;;;1730:310;;:::o;3541:358::-;3615:6;:18;3622:10;3615:18;;;;;;;;;;;;;;;;;;;;;;;;;3607:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;3697:1;3661:38;;:15;:24;3677:7;3661:24;;;;;;;;;;;;;;;;;;;;;:38;;;3653:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;3779:17;:26;3797:7;3779:26;;;;;;;;;;;;3770:5;3747:20;3759:7;3747:11;:20::i;:::-;:28;;;;:::i;:::-;:58;;3739:98;;;;;;;;;;;;:::i;:::-;;;;;;;;;3843:51;3849:15;:24;3865:7;3849:24;;;;;;;;;;;;;;;;;;;;;3875:7;3884:5;3843:51;;;;;;;;;;;;:5;:51::i;:::-;3541:358;;:::o;5438:205::-;5527:4;5543:6;:16;5550:8;5543:16;;;;;;;;;;;;;;;;;;;;;;;;;5539:48;;;5576:4;5569:11;;;;5539:48;5599:39;5622:5;5629:8;5599:22;:39::i;:::-;5592:46;;5438:205;;;;;:::o;4688:238::-;4822:4;:12;;;4835:10;4822:24;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4814:46;;;;;;;;;;;;:::i;:::-;;;;;;;;;4866:55;4889:4;4895:2;4899:7;4908:6;4916:4;4866:22;:55::i;:::-;4688:238;;;;;:::o;3405:215:0:-;2334:13;:11;:13::i;:::-;3509:1:::1;3489:22;;:8;:22;;::::0;3485:91:::1;;3562:1;3534:31;;;;;;;;;;;:::i;:::-;;;;;;;;3485:91;3585:28;3604:8;3585:18;:28::i;:::-;3405:215:::0;:::o;721:52:23:-;;;;;;;;;;;;;;;;;:::o;1913:159:3:-;1965:24;2034:22;2024:32;;1913:159;:::o;2421:316::-;2534:4;2584:26;2569:41;;;:11;:41;;;;:109;;;;2641:37;2626:52;;;:11;:52;;;;2569:109;:161;;;;2694:36;2718:11;2694:23;:36::i;:::-;2569:161;2550:180;;2421:316;;;:::o;2658:162:0:-;2728:12;:10;:12::i;:::-;2717:23;;:7;:5;:7::i;:::-;:23;;;2713:101;;2790:12;:10;:12::i;:::-;2763:40;;;;;;;;;;;:::i;:::-;;;;;;;;2713:101;2658:162::o;11574:145:3:-;11640:24;11667:20;:18;:20::i;:::-;11640:47;;11706:6;11697:1;:6;;:15;;;;;;:::i;:::-;;11630:89;11574:145;:::o;13450:329::-;13545:1;13529:18;;:4;:18;;;13525:88;;13599:1;13570:32;;;;;;;;;;;:::i;:::-;;;;;;;;13525:88;13623:20;13645:23;13672:29;13691:2;13695:5;13672:18;:29::i;:::-;13622:79;;;;13711:61;13738:4;13752:1;13756:3;13761:6;13711:61;;;;;;;;;;;;:26;:61::i;:::-;13515:264;;13450:329;;;:::o;1372:177:4:-;1430:30;1505:28;1495:38;;1372:177;:::o;12097:346:3:-;12207:1;12193:16;;:2;:16;;;12189:88;;12263:1;12232:34;;;;;;;;;;;:::i;:::-;;;;;;;;12189:88;12287:20;12309:23;12336:29;12355:2;12359:5;12336:18;:29::i;:::-;12286:79;;;;12375:61;12410:1;12414:2;12418:3;12423:6;12431:4;12375:26;:61::i;:::-;12179:264;;12097:346;;;;:::o;5243:429::-;5437:14;5454:12;:10;:12::i;:::-;5437:29;;5488:6;5480:14;;:4;:14;;;;:49;;;;;5499:30;5516:4;5522:6;5499:16;:30::i;:::-;5498:31;5480:49;5476:129;;;5581:6;5589:4;5552:42;;;;;;;;;;;;:::i;:::-;;;;;;;;5476:129;5614:51;5637:4;5643:2;5647:3;5652:6;5660:4;5614:22;:51::i;:::-;5427:245;5243:429;;;;;:::o;4603:197:17:-;4689:11;4777:4;4772:3;4768:14;4761:4;4756:3;4752:14;4748:35;4742:42;4735:49;;4603:197;;;;:::o;4204:::-;4290:11;4378:4;4373:3;4369:14;4362:4;4357:3;4353:14;4349:35;4343:42;4336:49;;4204:197;;;;:::o;4599:312:2:-;4688:6;4671:23;;4679:4;4671:23;;;:120;;;;4785:6;4749:42;;:32;:30;:32::i;:::-;:42;;;;4671:120;4654:251;;;4865:29;;;;;;;;;;;;;;4654:251;4599:312::o;5647:108:23:-;2334:13:0;:11;:13::i;:::-;5647:108:23;:::o;6052:538:2:-;6169:17;6151:50;;;:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;6147:437;;6555:17;6513:60;;;;;;;;;;;:::i;:::-;;;;;;;;6147:437;1327:66:10;6253:32:2;;6245:4;:40;6241:120;;6341:4;6312:34;;;;;;;;;;;:::i;:::-;;;;;;;;6241:120;6374:54;6404:17;6423:4;6374:29;:54::i;:::-;6204:235;6052:538;;:::o;5028:213::-;5111:6;5094:23;;5102:4;5094:23;;;5090:145;;5195:29;;;;;;;;;;;;;;5090:145;5028:213::o;3774:248:0:-;3847:24;3874:20;:18;:20::i;:::-;3847:47;;3904:16;3923:1;:8;;;;;;;;;;;;3904:27;;3952:8;3941:1;:8;;;:19;;;;;;;;;;;;;;;;;;4006:8;3975:40;;3996:8;3975:40;;;;;;;;;;;;3837:185;;3774:248;:::o;1192:159::-;1244:24;1313:22;1303:32;;1192:159;:::o;4326:144:3:-;4411:52;4430:12;:10;:12::i;:::-;4444:8;4454;4411:18;:52::i;:::-;4326:144;;:::o;8737:170:1:-;8795:30;8870:21;8860:31;;8737:170;:::o;1555:65:4:-;6931:20:1;:18;:20::i;:::-;1555:65:4:o;1847:127:0:-;6931:20:1;:18;:20::i;:::-;1929:38:0::1;1954:12;1929:24;:38::i;:::-;1847:127:::0;:::o;2968:67:2:-;6931:20:1;:18;:20::i;:::-;2968:67:2:o;4537:216:3:-;4627:4;4643:24;4670:20;:18;:20::i;:::-;4643:47;;4707:1;:20;;:29;4728:7;4707:29;;;;;;;;;;;;;;;:39;4737:8;4707:39;;;;;;;;;;;;;;;;;;;;;;;;;4700:46;;;4537:216;;;;:::o;4820:351::-;4943:14;4960:12;:10;:12::i;:::-;4943:29;;4994:6;4986:14;;:4;:14;;;;:49;;;;;5005:30;5022:4;5028:6;5005:16;:30::i;:::-;5004:31;4986:49;4982:129;;;5087:6;5095:4;5058:42;;;;;;;;;;;;:::i;:::-;;;;;;;;4982:129;5120:44;5138:4;5144:2;5148;5152:5;5159:4;5120:17;:44::i;:::-;4933:238;4820:351;;;;;:::o;1034:146:6:-;1110:4;1148:25;1133:40;;;:11;:40;;;;1126:47;;1034:146;;;:::o;887:96:5:-;940:7;966:10;959:17;;887:96;:::o;17490:849:3:-;17598:23;17623;17784:4;17778:11;17768:21;;17854:1;17846:6;17839:17;17992:8;17985:4;17977:6;17973:17;17966:35;18114:4;18106:6;18102:17;18092:27;;18147:1;18139:6;18132:17;18188:8;18181:4;18173:6;18169:17;18162:35;18317:4;18309:6;18305:17;18299:4;18292:31;17490:849;;;;;:::o;8296:690::-;8497:30;8505:4;8511:2;8515:3;8520:6;8497:7;:30::i;:::-;8555:1;8541:16;;:2;:16;;;8537:443;;8573:16;8592:12;:10;:12::i;:::-;8573:31;;8636:1;8622:3;:10;:15;8618:352;;8657:10;8670:25;8693:1;8670:3;:22;;:25;;;;:::i;:::-;8657:38;;8713:13;8729:28;8755:1;8729:6;:25;;:28;;;;:::i;:::-;8713:44;;8775:67;8806:8;8816:4;8822:2;8826;8830:5;8837:4;8775:30;:67::i;:::-;8639:218;;8618:352;;;8881:74;8917:8;8927:4;8933:2;8937:3;8942:6;8950:4;8881:35;:74::i;:::-;8618:352;8559:421;8537:443;8296:690;;;;;:::o;10307:445::-;10514:1;10500:16;;:2;:16;;;10496:88;;10570:1;10539:34;;;;;;;;;;;:::i;:::-;;;;;;;;10496:88;10613:1;10597:18;;:4;:18;;;10593:88;;10667:1;10638:32;;;;;;;;;;;:::i;:::-;;;;;;;;10593:88;10690:55;10717:4;10723:2;10727:3;10732:6;10740:4;10690:26;:55::i;:::-;10307:445;;;;;:::o;1957:138:10:-;2009:7;2035:47;1327:66;2062:19;;2035:26;:47::i;:::-;:53;;;;;;;;;;;;2028:60;;1957:138;:::o;2779:335::-;2870:37;2889:17;2870:18;:37::i;:::-;2931:17;2922:27;;;;;;;;;;;;2978:1;2964:4;:11;:15;2960:148;;;2995:53;3024:17;3043:4;2995:28;:53::i;:::-;;2960:148;;;3079:18;:16;:18::i;:::-;2960:148;2779:335;;:::o;14619:374:3:-;14722:24;14749:20;:18;:20::i;:::-;14722:47;;14803:1;14783:22;;:8;:22;;;14779:94;;14859:1;14828:34;;;;;;;;;;;:::i;:::-;;;;;;;;14779:94;14922:8;14882:1;:20;;:27;14903:5;14882:27;;;;;;;;;;;;;;;:37;14910:8;14882:37;;;;;;;;;;;;;;;;:48;;;;;;;;;;;;;;;;;;14967:8;14945:41;;14960:5;14945:41;;;14977:8;14945:41;;;;;;:::i;:::-;;;;;;;;14712:281;14619:374;;;:::o;7084:141:1:-;7151:17;:15;:17::i;:::-;7146:73;;7191:17;;;;;;;;;;;;;;7146:73;7084:141::o;1980:235:0:-;6931:20:1;:18;:20::i;:::-;2100:1:0::1;2076:26;;:12;:26;;::::0;2072:95:::1;;2153:1;2125:31;;;;;;;;;;;:::i;:::-;;;;;;;;2072:95;2176:32;2195:12;2176:18;:32::i;:::-;1980:235:::0;:::o;9443:463:3:-;9579:1;9565:16;;:2;:16;;;9561:88;;9635:1;9604:34;;;;;;;;;;;:::i;:::-;;;;;;;;9561:88;9678:1;9662:18;;:4;:18;;;9658:88;;9732:1;9703:32;;;;;;;;;;;:::i;:::-;;;;;;;;9658:88;9756:20;9778:23;9805:29;9824:2;9828:5;9805:18;:29::i;:::-;9755:79;;;;9844:55;9871:4;9877:2;9881:3;9886:6;9894:4;9844:26;:55::i;:::-;9551:355;;9443:463;;;;;:::o;2442:1595:4:-;2606:30;2639:26;:24;:26::i;:::-;2606:59;;2675:36;2689:4;2695:2;2699:3;2704:6;2675:13;:36::i;:::-;2742:1;2726:18;;:4;:18;;;2722:537;;2760:22;2805:9;2800:295;2824:3;:10;2820:1;:14;2800:295;;;2859:13;2875:6;2882:1;2875:9;;;;;;;;:::i;:::-;;;;;;;;2859:25;;3034:5;3008:1;:14;;:22;3023:3;3027:1;3023:6;;;;;;;;:::i;:::-;;;;;;;;3008:22;;;;;;;;;;;;:31;;;;;;;:::i;:::-;;;;;;;;3075:5;3057:23;;;;;:::i;:::-;;;2841:254;2836:3;;;;:::i;:::-;;;2800:295;;;;3234:14;3213:1;:17;;;:35;;;;;;;:::i;:::-;;;;;;;;2746:513;2722:537;3287:1;3273:16;;:2;:16;;;3269:762;;3305:22;3350:9;3345:461;3369:3;:10;3365:1;:14;3345:461;;;3404:13;3420:6;3427:1;3420:9;;;;;;;;:::i;:::-;;;;;;;;3404:25;;3612:5;3586:1;:14;;:22;3601:3;3605:1;3601:6;;;;;;;;:::i;:::-;;;;;;;;3586:22;;;;;;;;;;;;:31;;;;;;;;;;;3768:5;3750:23;;;;3386:420;3381:3;;;;:::i;:::-;;;3345:461;;;;3992:14;3971:1;:17;;;:35;;;;;;;;;;;3291:740;3269:762;2596:1441;2442:1595;;;;:::o;15171:974:3:-;15394:1;15377:2;:14;;;:18;15373:766;;;15432:2;15415:38;;;15454:8;15464:4;15470:2;15474:5;15481:4;15415:71;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;15411:718;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15787:1;15770:6;:13;:18;15766:349;;15897:2;15874:26;;;;;;;;;;;:::i;:::-;;;;;;;;15766:349;16067:6;16061:13;16052:6;16048:2;16044:15;16037:38;15411:718;15547:43;;;15535:55;;;:8;:55;;;;15531:174;;15683:2;15660:26;;;;;;;;;;;:::i;:::-;;;;;;;;15531:174;15487:232;15373:766;15171:974;;;;;;:::o;16333:1041::-;16581:1;16564:2;:14;;;:18;16560:808;;;16619:2;16602:43;;;16646:8;16656:4;16662:3;16667:6;16675:4;16602:78;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;16598:760;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17016:1;16999:6;:13;:18;16995:349;;17126:2;17103:26;;;;;;;;;;;:::i;:::-;;;;;;;;16995:349;17296:6;17290:13;17281:6;17277:2;17273:15;17266:38;16598:760;16771:48;;;16759:60;;;:8;:60;;;;16755:179;;16912:2;16889:26;;;;;;;;;;;:::i;:::-;;;;;;;;16755:179;16681:267;16560:808;16333:1041;;;;;;:::o;1684:190:18:-;1745:21;1854:4;1844:14;;1684:190;;;:::o;2186:281:10:-;2296:1;2263:17;:29;;;:34;2259:119;;2349:17;2320:47;;;;;;;;;;;:::i;:::-;;;;;;;;2259:119;2443:17;2387:47;1327:66;2414:19;;2387:26;:47::i;:::-;:53;;;:73;;;;;;;;;;;;;;;;;;2186:281;:::o;4106:253:16:-;4189:12;4214;4228:23;4255:6;:19;;4275:4;4255:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4213:67;;;;4297:55;4324:6;4332:7;4341:10;4297:26;:55::i;:::-;4290:62;;;;4106:253;;;;:::o;6598:122:10:-;6660:1;6648:9;:13;6644:70;;;6684:19;;;;;;;;;;;;;;6644:70;6598:122::o;8487:120:1:-;8537:4;8560:26;:24;:26::i;:::-;:40;;;;;;;;;;;;8553:47;;8487:120;:::o;6373:1344:3:-;6490:24;6517:20;:18;:20::i;:::-;6490:47;;6565:6;:13;6551:3;:10;:27;6547:117;;6627:3;:10;6639:6;:13;6601:52;;;;;;;;;;;;:::i;:::-;;;;;;;;6547:117;6674:16;6693:12;:10;:12::i;:::-;6674:31;;6721:9;6716:697;6740:3;:10;6736:1;:14;6716:697;;;6771:10;6784:25;6807:1;6784:3;:22;;:25;;;;:::i;:::-;6771:38;;6823:13;6839:28;6865:1;6839:6;:25;;:28;;;;:::i;:::-;6823:44;;6902:1;6886:18;;:4;:18;;;6882:424;;6924:19;6946:1;:11;;:15;6958:2;6946:15;;;;;;;;;;;:21;6962:4;6946:21;;;;;;;;;;;;;;;;6924:43;;7003:5;6989:11;:19;6985:129;;;7066:4;7072:11;7085:5;7092:2;7039:56;;;;;;;;;;;;;;:::i;:::-;;;;;;;;6985:129;7268:5;7254:11;:19;7230:1;:11;;:15;7242:2;7230:15;;;;;;;;;;;:21;7246:4;7230:21;;;;;;;;;;;;;;;:43;;;;6906:400;6882:424;7338:1;7324:16;;:2;:16;;;7320:83;;7383:5;7360:1;:11;;:15;7372:2;7360:15;;;;;;;;;;;:19;7376:2;7360:19;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;7320:83;6757:656;;6752:3;;;;:::i;:::-;;;6716:697;;;;7441:1;7427:3;:10;:15;7423:288;;7458:10;7471:25;7494:1;7471:3;:22;;:25;;;;:::i;:::-;7458:38;;7510:13;7526:28;7552:1;7526:6;:25;;:28;;;;:::i;:::-;7510:44;;7604:2;7573:45;;7598:4;7573:45;;7588:8;7573:45;;;7608:2;7612:5;7573:45;;;;;;;:::i;:::-;;;;;;;;7444:185;;7423:288;;;7684:2;7654:46;;7678:4;7654:46;;7668:8;7654:46;;;7688:3;7693:6;7654:46;;;;;;;:::i;:::-;;;;;;;;7423:288;6480:1237;;6373:1344;;;;:::o;4625:582:16:-;4769:12;4798:7;4793:408;;4821:19;4829:10;4821:7;:19::i;:::-;4793:408;;;5066:1;5045:10;:17;:22;:49;;;;;5093:1;5071:6;:18;;;:23;5045:49;5041:119;;;5138:6;5121:24;;;;;;;;;;;:::i;:::-;;;;;;;;5041:119;5180:10;5173:17;;;;4793:408;4625:582;;;;;;:::o;5743:516::-;5894:1;5874:10;:17;:21;5870:383;;;6102:10;6096:17;6158:15;6145:10;6141:2;6137:19;6130:44;5870:383;6225:17;;;;;;;;;;;;;;7:75:25;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:77::-;878:7;907:5;896:16;;841:77;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:474::-;1265:6;1273;1322:2;1310:9;1301:7;1297:23;1293:32;1290:119;;;1328:79;;:::i;:::-;1290:119;1448:1;1473:53;1518:7;1509:6;1498:9;1494:22;1473:53;:::i;:::-;1463:63;;1419:117;1575:2;1601:53;1646:7;1637:6;1626:9;1622:22;1601:53;:::i;:::-;1591:63;;1546:118;1197:474;;;;;:::o;1677:118::-;1764:24;1782:5;1764:24;:::i;:::-;1759:3;1752:37;1677:118;;:::o;1801:222::-;1894:4;1932:2;1921:9;1917:18;1909:26;;1945:71;2013:1;2002:9;1998:17;1989:6;1945:71;:::i;:::-;1801:222;;;;:::o;2029:149::-;2065:7;2105:66;2098:5;2094:78;2083:89;;2029:149;;;:::o;2184:120::-;2256:23;2273:5;2256:23;:::i;:::-;2249:5;2246:34;2236:62;;2294:1;2291;2284:12;2236:62;2184:120;:::o;2310:137::-;2355:5;2393:6;2380:20;2371:29;;2409:32;2435:5;2409:32;:::i;:::-;2310:137;;;;:::o;2453:327::-;2511:6;2560:2;2548:9;2539:7;2535:23;2531:32;2528:119;;;2566:79;;:::i;:::-;2528:119;2686:1;2711:52;2755:7;2746:6;2735:9;2731:22;2711:52;:::i;:::-;2701:62;;2657:116;2453:327;;;;:::o;2786:90::-;2820:7;2863:5;2856:13;2849:21;2838:32;;2786:90;;;:::o;2882:109::-;2963:21;2978:5;2963:21;:::i;:::-;2958:3;2951:34;2882:109;;:::o;2997:210::-;3084:4;3122:2;3111:9;3107:18;3099:26;;3135:65;3197:1;3186:9;3182:17;3173:6;3135:65;:::i;:::-;2997:210;;;;:::o;3213:117::-;3322:1;3319;3312:12;3336:117;3445:1;3442;3435:12;3459:102;3500:6;3551:2;3547:7;3542:2;3535:5;3531:14;3527:28;3517:38;;3459:102;;;:::o;3567:180::-;3615:77;3612:1;3605:88;3712:4;3709:1;3702:15;3736:4;3733:1;3726:15;3753:281;3836:27;3858:4;3836:27;:::i;:::-;3828:6;3824:40;3966:6;3954:10;3951:22;3930:18;3918:10;3915:34;3912:62;3909:88;;;3977:18;;:::i;:::-;3909:88;4017:10;4013:2;4006:22;3796:238;3753:281;;:::o;4040:129::-;4074:6;4101:20;;:::i;:::-;4091:30;;4130:33;4158:4;4150:6;4130:33;:::i;:::-;4040:129;;;:::o;4175:308::-;4237:4;4327:18;4319:6;4316:30;4313:56;;;4349:18;;:::i;:::-;4313:56;4387:29;4409:6;4387:29;:::i;:::-;4379:37;;4471:4;4465;4461:15;4453:23;;4175:308;;;:::o;4489:146::-;4586:6;4581:3;4576;4563:30;4627:1;4618:6;4613:3;4609:16;4602:27;4489:146;;;:::o;4641:425::-;4719:5;4744:66;4760:49;4802:6;4760:49;:::i;:::-;4744:66;:::i;:::-;4735:75;;4833:6;4826:5;4819:21;4871:4;4864:5;4860:16;4909:3;4900:6;4895:3;4891:16;4888:25;4885:112;;;4916:79;;:::i;:::-;4885:112;5006:54;5053:6;5048:3;5043;5006:54;:::i;:::-;4725:341;4641:425;;;;;:::o;5086:340::-;5142:5;5191:3;5184:4;5176:6;5172:17;5168:27;5158:122;;5199:79;;:::i;:::-;5158:122;5316:6;5303:20;5341:79;5416:3;5408:6;5401:4;5393:6;5389:17;5341:79;:::i;:::-;5332:88;;5148:278;5086:340;;;;:::o;5432:509::-;5501:6;5550:2;5538:9;5529:7;5525:23;5521:32;5518:119;;;5556:79;;:::i;:::-;5518:119;5704:1;5693:9;5689:17;5676:31;5734:18;5726:6;5723:30;5720:117;;;5756:79;;:::i;:::-;5720:117;5861:63;5916:7;5907:6;5896:9;5892:22;5861:63;:::i;:::-;5851:73;;5647:287;5432:509;;;;:::o;5947:311::-;6024:4;6114:18;6106:6;6103:30;6100:56;;;6136:18;;:::i;:::-;6100:56;6186:4;6178:6;6174:17;6166:25;;6246:4;6240;6236:15;6228:23;;5947:311;;;:::o;6264:117::-;6373:1;6370;6363:12;6404:710;6500:5;6525:81;6541:64;6598:6;6541:64;:::i;:::-;6525:81;:::i;:::-;6516:90;;6626:5;6655:6;6648:5;6641:21;6689:4;6682:5;6678:16;6671:23;;6742:4;6734:6;6730:17;6722:6;6718:30;6771:3;6763:6;6760:15;6757:122;;;6790:79;;:::i;:::-;6757:122;6905:6;6888:220;6922:6;6917:3;6914:15;6888:220;;;6997:3;7026:37;7059:3;7047:10;7026:37;:::i;:::-;7021:3;7014:50;7093:4;7088:3;7084:14;7077:21;;6964:144;6948:4;6943:3;6939:14;6932:21;;6888:220;;;6892:21;6506:608;;6404:710;;;;;:::o;7137:370::-;7208:5;7257:3;7250:4;7242:6;7238:17;7234:27;7224:122;;7265:79;;:::i;:::-;7224:122;7382:6;7369:20;7407:94;7497:3;7489:6;7482:4;7474:6;7470:17;7407:94;:::i;:::-;7398:103;;7214:293;7137:370;;;;:::o;7513:311::-;7590:4;7680:18;7672:6;7669:30;7666:56;;;7702:18;;:::i;:::-;7666:56;7752:4;7744:6;7740:17;7732:25;;7812:4;7806;7802:15;7794:23;;7513:311;;;:::o;7847:710::-;7943:5;7968:81;7984:64;8041:6;7984:64;:::i;:::-;7968:81;:::i;:::-;7959:90;;8069:5;8098:6;8091:5;8084:21;8132:4;8125:5;8121:16;8114:23;;8185:4;8177:6;8173:17;8165:6;8161:30;8214:3;8206:6;8203:15;8200:122;;;8233:79;;:::i;:::-;8200:122;8348:6;8331:220;8365:6;8360:3;8357:15;8331:220;;;8440:3;8469:37;8502:3;8490:10;8469:37;:::i;:::-;8464:3;8457:50;8536:4;8531:3;8527:14;8520:21;;8407:144;8391:4;8386:3;8382:14;8375:21;;8331:220;;;8335:21;7949:608;;7847:710;;;;;:::o;8580:370::-;8651:5;8700:3;8693:4;8685:6;8681:17;8677:27;8667:122;;8708:79;;:::i;:::-;8667:122;8825:6;8812:20;8850:94;8940:3;8932:6;8925:4;8917:6;8913:17;8850:94;:::i;:::-;8841:103;;8657:293;8580:370;;;;:::o;8956:894::-;9074:6;9082;9131:2;9119:9;9110:7;9106:23;9102:32;9099:119;;;9137:79;;:::i;:::-;9099:119;9285:1;9274:9;9270:17;9257:31;9315:18;9307:6;9304:30;9301:117;;;9337:79;;:::i;:::-;9301:117;9442:78;9512:7;9503:6;9492:9;9488:22;9442:78;:::i;:::-;9432:88;;9228:302;9597:2;9586:9;9582:18;9569:32;9628:18;9620:6;9617:30;9614:117;;;9650:79;;:::i;:::-;9614:117;9755:78;9825:7;9816:6;9805:9;9801:22;9755:78;:::i;:::-;9745:88;;9540:303;8956:894;;;;;:::o;9856:329::-;9915:6;9964:2;9952:9;9943:7;9939:23;9935:32;9932:119;;;9970:79;;:::i;:::-;9932:119;10090:1;10115:53;10160:7;10151:6;10140:9;10136:22;10115:53;:::i;:::-;10105:63;;10061:117;9856:329;;;;:::o;10191:99::-;10243:6;10277:5;10271:12;10261:22;;10191:99;;;:::o;10296:169::-;10380:11;10414:6;10409:3;10402:19;10454:4;10449:3;10445:14;10430:29;;10296:169;;;;:::o;10471:246::-;10552:1;10562:113;10576:6;10573:1;10570:13;10562:113;;;10661:1;10656:3;10652:11;10646:18;10642:1;10637:3;10633:11;10626:39;10598:2;10595:1;10591:10;10586:15;;10562:113;;;10709:1;10700:6;10695:3;10691:16;10684:27;10533:184;10471:246;;;:::o;10723:377::-;10811:3;10839:39;10872:5;10839:39;:::i;:::-;10894:71;10958:6;10953:3;10894:71;:::i;:::-;10887:78;;10974:65;11032:6;11027:3;11020:4;11013:5;11009:16;10974:65;:::i;:::-;11064:29;11086:6;11064:29;:::i;:::-;11059:3;11055:39;11048:46;;10815:285;10723:377;;;;:::o;11106:313::-;11219:4;11257:2;11246:9;11242:18;11234:26;;11306:9;11300:4;11296:20;11292:1;11281:9;11277:17;11270:47;11334:78;11407:4;11398:6;11334:78;:::i;:::-;11326:86;;11106:313;;;;:::o;11425:329::-;11484:6;11533:2;11521:9;11512:7;11508:23;11504:32;11501:119;;;11539:79;;:::i;:::-;11501:119;11659:1;11684:53;11729:7;11720:6;11709:9;11705:22;11684:53;:::i;:::-;11674:63;;11630:117;11425:329;;;;:::o;11760:474::-;11828:6;11836;11885:2;11873:9;11864:7;11860:23;11856:32;11853:119;;;11891:79;;:::i;:::-;11853:119;12011:1;12036:53;12081:7;12072:6;12061:9;12057:22;12036:53;:::i;:::-;12026:63;;11982:117;12138:2;12164:53;12209:7;12200:6;12189:9;12185:22;12164:53;:::i;:::-;12154:63;;12109:118;11760:474;;;;;:::o;12240:307::-;12301:4;12391:18;12383:6;12380:30;12377:56;;;12413:18;;:::i;:::-;12377:56;12451:29;12473:6;12451:29;:::i;:::-;12443:37;;12535:4;12529;12525:15;12517:23;;12240:307;;;:::o;12553:423::-;12630:5;12655:65;12671:48;12712:6;12671:48;:::i;:::-;12655:65;:::i;:::-;12646:74;;12743:6;12736:5;12729:21;12781:4;12774:5;12770:16;12819:3;12810:6;12805:3;12801:16;12798:25;12795:112;;;12826:79;;:::i;:::-;12795:112;12916:54;12963:6;12958:3;12953;12916:54;:::i;:::-;12636:340;12553:423;;;;;:::o;12995:338::-;13050:5;13099:3;13092:4;13084:6;13080:17;13076:27;13066:122;;13107:79;;:::i;:::-;13066:122;13224:6;13211:20;13249:78;13323:3;13315:6;13308:4;13300:6;13296:17;13249:78;:::i;:::-;13240:87;;13056:277;12995:338;;;;:::o;13339:1509::-;13493:6;13501;13509;13517;13525;13574:3;13562:9;13553:7;13549:23;13545:33;13542:120;;;13581:79;;:::i;:::-;13542:120;13701:1;13726:53;13771:7;13762:6;13751:9;13747:22;13726:53;:::i;:::-;13716:63;;13672:117;13828:2;13854:53;13899:7;13890:6;13879:9;13875:22;13854:53;:::i;:::-;13844:63;;13799:118;13984:2;13973:9;13969:18;13956:32;14015:18;14007:6;14004:30;14001:117;;;14037:79;;:::i;:::-;14001:117;14142:78;14212:7;14203:6;14192:9;14188:22;14142:78;:::i;:::-;14132:88;;13927:303;14297:2;14286:9;14282:18;14269:32;14328:18;14320:6;14317:30;14314:117;;;14350:79;;:::i;:::-;14314:117;14455:78;14525:7;14516:6;14505:9;14501:22;14455:78;:::i;:::-;14445:88;;14240:303;14610:3;14599:9;14595:19;14582:33;14642:18;14634:6;14631:30;14628:117;;;14664:79;;:::i;:::-;14628:117;14769:62;14823:7;14814:6;14803:9;14799:22;14769:62;:::i;:::-;14759:72;;14553:288;13339:1509;;;;;;;;:::o;14854:114::-;14921:6;14955:5;14949:12;14939:22;;14854:114;;;:::o;14974:184::-;15073:11;15107:6;15102:3;15095:19;15147:4;15142:3;15138:14;15123:29;;14974:184;;;;:::o;15164:132::-;15231:4;15254:3;15246:11;;15284:4;15279:3;15275:14;15267:22;;15164:132;;;:::o;15302:108::-;15379:24;15397:5;15379:24;:::i;:::-;15374:3;15367:37;15302:108;;:::o;15416:179::-;15485:10;15506:46;15548:3;15540:6;15506:46;:::i;:::-;15584:4;15579:3;15575:14;15561:28;;15416:179;;;;:::o;15601:113::-;15671:4;15703;15698:3;15694:14;15686:22;;15601:113;;;:::o;15750:732::-;15869:3;15898:54;15946:5;15898:54;:::i;:::-;15968:86;16047:6;16042:3;15968:86;:::i;:::-;15961:93;;16078:56;16128:5;16078:56;:::i;:::-;16157:7;16188:1;16173:284;16198:6;16195:1;16192:13;16173:284;;;16274:6;16268:13;16301:63;16360:3;16345:13;16301:63;:::i;:::-;16294:70;;16387:60;16440:6;16387:60;:::i;:::-;16377:70;;16233:224;16220:1;16217;16213:9;16208:14;;16173:284;;;16177:14;16473:3;16466:10;;15874:608;;;15750:732;;;;:::o;16488:373::-;16631:4;16669:2;16658:9;16654:18;16646:26;;16718:9;16712:4;16708:20;16704:1;16693:9;16689:17;16682:47;16746:108;16849:4;16840:6;16746:108;:::i;:::-;16738:116;;16488:373;;;;:::o;16867:652::-;16944:6;16952;17001:2;16989:9;16980:7;16976:23;16972:32;16969:119;;;17007:79;;:::i;:::-;16969:119;17127:1;17152:53;17197:7;17188:6;17177:9;17173:22;17152:53;:::i;:::-;17142:63;;17098:117;17282:2;17271:9;17267:18;17254:32;17313:18;17305:6;17302:30;17299:117;;;17335:79;;:::i;:::-;17299:117;17440:62;17494:7;17485:6;17474:9;17470:22;17440:62;:::i;:::-;17430:72;;17225:287;16867:652;;;;;:::o;17525:77::-;17562:7;17591:5;17580:16;;17525:77;;;:::o;17608:118::-;17695:24;17713:5;17695:24;:::i;:::-;17690:3;17683:37;17608:118;;:::o;17732:222::-;17825:4;17863:2;17852:9;17848:18;17840:26;;17876:71;17944:1;17933:9;17929:17;17920:6;17876:71;:::i;:::-;17732:222;;;;:::o;17960:118::-;18047:24;18065:5;18047:24;:::i;:::-;18042:3;18035:37;17960:118;;:::o;18084:222::-;18177:4;18215:2;18204:9;18200:18;18192:26;;18228:71;18296:1;18285:9;18281:17;18272:6;18228:71;:::i;:::-;18084:222;;;;:::o;18312:474::-;18380:6;18388;18437:2;18425:9;18416:7;18412:23;18408:32;18405:119;;;18443:79;;:::i;:::-;18405:119;18563:1;18588:53;18633:7;18624:6;18613:9;18609:22;18588:53;:::i;:::-;18578:63;;18534:117;18690:2;18716:53;18761:7;18752:6;18741:9;18737:22;18716:53;:::i;:::-;18706:63;;18661:118;18312:474;;;;;:::o;18792:116::-;18862:21;18877:5;18862:21;:::i;:::-;18855:5;18852:32;18842:60;;18898:1;18895;18888:12;18842:60;18792:116;:::o;18914:133::-;18957:5;18995:6;18982:20;18973:29;;19011:30;19035:5;19011:30;:::i;:::-;18914:133;;;;:::o;19053:468::-;19118:6;19126;19175:2;19163:9;19154:7;19150:23;19146:32;19143:119;;;19181:79;;:::i;:::-;19143:119;19301:1;19326:53;19371:7;19362:6;19351:9;19347:22;19326:53;:::i;:::-;19316:63;;19272:117;19428:2;19454:50;19496:7;19487:6;19476:9;19472:22;19454:50;:::i;:::-;19444:60;;19399:115;19053:468;;;;;:::o;19527:1009::-;19639:6;19647;19655;19704:2;19692:9;19683:7;19679:23;19675:32;19672:119;;;19710:79;;:::i;:::-;19672:119;19830:1;19855:53;19900:7;19891:6;19880:9;19876:22;19855:53;:::i;:::-;19845:63;;19801:117;19985:2;19974:9;19970:18;19957:32;20016:18;20008:6;20005:30;20002:117;;;20038:79;;:::i;:::-;20002:117;20143:78;20213:7;20204:6;20193:9;20189:22;20143:78;:::i;:::-;20133:88;;19928:303;20298:2;20287:9;20283:18;20270:32;20329:18;20321:6;20318:30;20315:117;;;20351:79;;:::i;:::-;20315:117;20456:63;20511:7;20502:6;20491:9;20487:22;20456:63;:::i;:::-;20446:73;;20241:288;19527:1009;;;;;:::o;20542:474::-;20610:6;20618;20667:2;20655:9;20646:7;20642:23;20638:32;20635:119;;;20673:79;;:::i;:::-;20635:119;20793:1;20818:53;20863:7;20854:6;20843:9;20839:22;20818:53;:::i;:::-;20808:63;;20764:117;20920:2;20946:53;20991:7;20982:6;20971:9;20967:22;20946:53;:::i;:::-;20936:63;;20891:118;20542:474;;;;;:::o;21022:1089::-;21126:6;21134;21142;21150;21158;21207:3;21195:9;21186:7;21182:23;21178:33;21175:120;;;21214:79;;:::i;:::-;21175:120;21334:1;21359:53;21404:7;21395:6;21384:9;21380:22;21359:53;:::i;:::-;21349:63;;21305:117;21461:2;21487:53;21532:7;21523:6;21512:9;21508:22;21487:53;:::i;:::-;21477:63;;21432:118;21589:2;21615:53;21660:7;21651:6;21640:9;21636:22;21615:53;:::i;:::-;21605:63;;21560:118;21717:2;21743:53;21788:7;21779:6;21768:9;21764:22;21743:53;:::i;:::-;21733:63;;21688:118;21873:3;21862:9;21858:19;21845:33;21905:18;21897:6;21894:30;21891:117;;;21927:79;;:::i;:::-;21891:117;22032:62;22086:7;22077:6;22066:9;22062:22;22032:62;:::i;:::-;22022:72;;21816:288;21022:1089;;;;;;;;:::o;22117:159::-;22257:11;22253:1;22245:6;22241:14;22234:35;22117:159;:::o;22282:365::-;22424:3;22445:66;22509:1;22504:3;22445:66;:::i;:::-;22438:73;;22520:93;22609:3;22520:93;:::i;:::-;22638:2;22633:3;22629:12;22622:19;;22282:365;;;:::o;22653:419::-;22819:4;22857:2;22846:9;22842:18;22834:26;;22906:9;22900:4;22896:20;22892:1;22881:9;22877:17;22870:47;22934:131;23060:4;22934:131;:::i;:::-;22926:139;;22653:419;;;:::o;23078:180::-;23126:77;23123:1;23116:88;23223:4;23220:1;23213:15;23247:4;23244:1;23237:15;23264:332;23385:4;23423:2;23412:9;23408:18;23400:26;;23436:71;23504:1;23493:9;23489:17;23480:6;23436:71;:::i;:::-;23517:72;23585:2;23574:9;23570:18;23561:6;23517:72;:::i;:::-;23264:332;;;;;:::o;23602:180::-;23650:77;23647:1;23640:88;23747:4;23744:1;23737:15;23771:4;23768:1;23761:15;23788:233;23827:3;23850:24;23868:5;23850:24;:::i;:::-;23841:33;;23896:66;23889:5;23886:77;23883:103;;23966:18;;:::i;:::-;23883:103;24013:1;24006:5;24002:13;23995:20;;23788:233;;;:::o;24027:180::-;24075:77;24072:1;24065:88;24172:4;24169:1;24162:15;24196:4;24193:1;24186:15;24213:320;24257:6;24294:1;24288:4;24284:12;24274:22;;24341:1;24335:4;24331:12;24362:18;24352:81;;24418:4;24410:6;24406:17;24396:27;;24352:81;24480:2;24472:6;24469:14;24449:18;24446:38;24443:84;;24499:18;;:::i;:::-;24443:84;24264:269;24213:320;;;:::o;24539:221::-;24679:34;24675:1;24667:6;24663:14;24656:58;24748:4;24743:2;24735:6;24731:15;24724:29;24539:221;:::o;24766:366::-;24908:3;24929:67;24993:2;24988:3;24929:67;:::i;:::-;24922:74;;25005:93;25094:3;25005:93;:::i;:::-;25123:2;25118:3;25114:12;25107:19;;24766:366;;;:::o;25138:419::-;25304:4;25342:2;25331:9;25327:18;25319:26;;25391:9;25385:4;25381:20;25377:1;25366:9;25362:17;25355:47;25419:131;25545:4;25419:131;:::i;:::-;25411:139;;25138:419;;;:::o;25563:191::-;25603:3;25622:20;25640:1;25622:20;:::i;:::-;25617:25;;25656:20;25674:1;25656:20;:::i;:::-;25651:25;;25699:1;25696;25692:9;25685:16;;25720:3;25717:1;25714:10;25711:36;;;25727:18;;:::i;:::-;25711:36;25563:191;;;;:::o;25760:177::-;25900:29;25896:1;25888:6;25884:14;25877:53;25760:177;:::o;25943:366::-;26085:3;26106:67;26170:2;26165:3;26106:67;:::i;:::-;26099:74;;26182:93;26271:3;26182:93;:::i;:::-;26300:2;26295:3;26291:12;26284:19;;25943:366;;;:::o;26315:419::-;26481:4;26519:2;26508:9;26504:18;26496:26;;26568:9;26562:4;26558:20;26554:1;26543:9;26539:17;26532:47;26596:131;26722:4;26596:131;:::i;:::-;26588:139;;26315:419;;;:::o;26740:137::-;26794:5;26825:6;26819:13;26810:22;;26841:30;26865:5;26841:30;:::i;:::-;26740:137;;;;:::o;26883:345::-;26950:6;26999:2;26987:9;26978:7;26974:23;26970:32;26967:119;;;27005:79;;:::i;:::-;26967:119;27125:1;27150:61;27203:7;27194:6;27183:9;27179:22;27150:61;:::i;:::-;27140:71;;27096:125;26883:345;;;;:::o;27234:332::-;27355:4;27393:2;27382:9;27378:18;27370:26;;27406:71;27474:1;27463:9;27459:17;27450:6;27406:71;:::i;:::-;27487:72;27555:2;27544:9;27540:18;27531:6;27487:72;:::i;:::-;27234:332;;;;;:::o;27572:163::-;27712:15;27708:1;27700:6;27696:14;27689:39;27572:163;:::o;27741:366::-;27883:3;27904:67;27968:2;27963:3;27904:67;:::i;:::-;27897:74;;27980:93;28069:3;27980:93;:::i;:::-;28098:2;28093:3;28089:12;28082:19;;27741:366;;;:::o;28113:419::-;28279:4;28317:2;28306:9;28302:18;28294:26;;28366:9;28360:4;28356:20;28352:1;28341:9;28337:17;28330:47;28394:131;28520:4;28394:131;:::i;:::-;28386:139;;28113:419;;;:::o;28538:85::-;28583:7;28612:5;28601:16;;28538:85;;;:::o;28629:101::-;28665:7;28705:18;28698:5;28694:30;28683:41;;28629:101;;;:::o;28736:60::-;28764:3;28785:5;28778:12;;28736:60;;;:::o;28802:156::-;28859:9;28892:60;28909:42;28918:32;28944:5;28918:32;:::i;:::-;28909:42;:::i;:::-;28892:60;:::i;:::-;28879:73;;28802:156;;;:::o;28964:145::-;29058:44;29096:5;29058:44;:::i;:::-;29053:3;29046:57;28964:145;;:::o;29115:236::-;29215:4;29253:2;29242:9;29238:18;29230:26;;29266:78;29341:1;29330:9;29326:17;29317:6;29266:78;:::i;:::-;29115:236;;;;:::o;29357:223::-;29497:34;29493:1;29485:6;29481:14;29474:58;29566:6;29561:2;29553:6;29549:15;29542:31;29357:223;:::o;29586:366::-;29728:3;29749:67;29813:2;29808:3;29749:67;:::i;:::-;29742:74;;29825:93;29914:3;29825:93;:::i;:::-;29943:2;29938:3;29934:12;29927:19;;29586:366;;;:::o;29958:419::-;30124:4;30162:2;30151:9;30147:18;30139:26;;30211:9;30205:4;30201:20;30197:1;30186:9;30182:17;30175:47;30239:131;30365:4;30239:131;:::i;:::-;30231:139;;29958:419;;;:::o;30383:179::-;30523:31;30519:1;30511:6;30507:14;30500:55;30383:179;:::o;30568:366::-;30710:3;30731:67;30795:2;30790:3;30731:67;:::i;:::-;30724:74;;30807:93;30896:3;30807:93;:::i;:::-;30925:2;30920:3;30916:12;30909:19;;30568:366;;;:::o;30940:419::-;31106:4;31144:2;31133:9;31129:18;31121:26;;31193:9;31187:4;31183:20;31179:1;31168:9;31164:17;31157:47;31221:131;31347:4;31221:131;:::i;:::-;31213:139;;30940:419;;;:::o;31365:141::-;31414:4;31437:3;31429:11;;31460:3;31457:1;31450:14;31494:4;31491:1;31481:18;31473:26;;31365:141;;;:::o;31512:93::-;31549:6;31596:2;31591;31584:5;31580:14;31576:23;31566:33;;31512:93;;;:::o;31611:107::-;31655:8;31705:5;31699:4;31695:16;31674:37;;31611:107;;;;:::o;31724:393::-;31793:6;31843:1;31831:10;31827:18;31866:97;31896:66;31885:9;31866:97;:::i;:::-;31984:39;32014:8;32003:9;31984:39;:::i;:::-;31972:51;;32056:4;32052:9;32045:5;32041:21;32032:30;;32105:4;32095:8;32091:19;32084:5;32081:30;32071:40;;31800:317;;31724:393;;;;;:::o;32123:142::-;32173:9;32206:53;32224:34;32233:24;32251:5;32233:24;:::i;:::-;32224:34;:::i;:::-;32206:53;:::i;:::-;32193:66;;32123:142;;;:::o;32271:75::-;32314:3;32335:5;32328:12;;32271:75;;;:::o;32352:269::-;32462:39;32493:7;32462:39;:::i;:::-;32523:91;32572:41;32596:16;32572:41;:::i;:::-;32564:6;32557:4;32551:11;32523:91;:::i;:::-;32517:4;32510:105;32428:193;32352:269;;;:::o;32627:73::-;32672:3;32627:73;:::o;32706:189::-;32783:32;;:::i;:::-;32824:65;32882:6;32874;32868:4;32824:65;:::i;:::-;32759:136;32706:189;;:::o;32901:186::-;32961:120;32978:3;32971:5;32968:14;32961:120;;;33032:39;33069:1;33062:5;33032:39;:::i;:::-;33005:1;32998:5;32994:13;32985:22;;32961:120;;;32901:186;;:::o;33093:543::-;33194:2;33189:3;33186:11;33183:446;;;33228:38;33260:5;33228:38;:::i;:::-;33312:29;33330:10;33312:29;:::i;:::-;33302:8;33298:44;33495:2;33483:10;33480:18;33477:49;;;33516:8;33501:23;;33477:49;33539:80;33595:22;33613:3;33595:22;:::i;:::-;33585:8;33581:37;33568:11;33539:80;:::i;:::-;33198:431;;33183:446;33093:543;;;:::o;33642:117::-;33696:8;33746:5;33740:4;33736:16;33715:37;;33642:117;;;;:::o;33765:169::-;33809:6;33842:51;33890:1;33886:6;33878:5;33875:1;33871:13;33842:51;:::i;:::-;33838:56;33923:4;33917;33913:15;33903:25;;33816:118;33765:169;;;;:::o;33939:295::-;34015:4;34161:29;34186:3;34180:4;34161:29;:::i;:::-;34153:37;;34223:3;34220:1;34216:11;34210:4;34207:21;34199:29;;33939:295;;;;:::o;34239:1395::-;34356:37;34389:3;34356:37;:::i;:::-;34458:18;34450:6;34447:30;34444:56;;;34480:18;;:::i;:::-;34444:56;34524:38;34556:4;34550:11;34524:38;:::i;:::-;34609:67;34669:6;34661;34655:4;34609:67;:::i;:::-;34703:1;34727:4;34714:17;;34759:2;34751:6;34748:14;34776:1;34771:618;;;;35433:1;35450:6;35447:77;;;35499:9;35494:3;35490:19;35484:26;35475:35;;35447:77;35550:67;35610:6;35603:5;35550:67;:::i;:::-;35544:4;35537:81;35406:222;34741:887;;34771:618;34823:4;34819:9;34811:6;34807:22;34857:37;34889:4;34857:37;:::i;:::-;34916:1;34930:208;34944:7;34941:1;34938:14;34930:208;;;35023:9;35018:3;35014:19;35008:26;35000:6;34993:42;35074:1;35066:6;35062:14;35052:24;;35121:2;35110:9;35106:18;35093:31;;34967:4;34964:1;34960:12;34955:17;;34930:208;;;35166:6;35157:7;35154:19;35151:179;;;35224:9;35219:3;35215:19;35209:26;35267:48;35309:4;35301:6;35297:17;35286:9;35267:48;:::i;:::-;35259:6;35252:64;35174:156;35151:179;35376:1;35372;35364:6;35360:14;35356:22;35350:4;35343:36;34778:611;;;34741:887;;34331:1303;;;34239:1395;;:::o;35640:332::-;35761:4;35799:2;35788:9;35784:18;35776:26;;35812:71;35880:1;35869:9;35865:17;35856:6;35812:71;:::i;:::-;35893:72;35961:2;35950:9;35946:18;35937:6;35893:72;:::i;:::-;35640:332;;;;;:::o;35978:122::-;36051:24;36069:5;36051:24;:::i;:::-;36044:5;36041:35;36031:63;;36090:1;36087;36080:12;36031:63;35978:122;:::o;36106:143::-;36163:5;36194:6;36188:13;36179:22;;36210:33;36237:5;36210:33;:::i;:::-;36106:143;;;;:::o;36255:351::-;36325:6;36374:2;36362:9;36353:7;36349:23;36345:32;36342:119;;;36380:79;;:::i;:::-;36342:119;36500:1;36525:64;36581:7;36572:6;36561:9;36557:22;36525:64;:::i;:::-;36515:74;;36471:128;36255:351;;;;:::o;36612:98::-;36663:6;36697:5;36691:12;36681:22;;36612:98;;;:::o;36716:168::-;36799:11;36833:6;36828:3;36821:19;36873:4;36868:3;36864:14;36849:29;;36716:168;;;;:::o;36890:373::-;36976:3;37004:38;37036:5;37004:38;:::i;:::-;37058:70;37121:6;37116:3;37058:70;:::i;:::-;37051:77;;37137:65;37195:6;37190:3;37183:4;37176:5;37172:16;37137:65;:::i;:::-;37227:29;37249:6;37227:29;:::i;:::-;37222:3;37218:39;37211:46;;36980:283;36890:373;;;;:::o;37269:751::-;37492:4;37530:3;37519:9;37515:19;37507:27;;37544:71;37612:1;37601:9;37597:17;37588:6;37544:71;:::i;:::-;37625:72;37693:2;37682:9;37678:18;37669:6;37625:72;:::i;:::-;37707;37775:2;37764:9;37760:18;37751:6;37707:72;:::i;:::-;37789;37857:2;37846:9;37842:18;37833:6;37789:72;:::i;:::-;37909:9;37903:4;37899:20;37893:3;37882:9;37878:19;37871:49;37937:76;38008:4;37999:6;37937:76;:::i;:::-;37929:84;;37269:751;;;;;;;;:::o;38026:141::-;38082:5;38113:6;38107:13;38098:22;;38129:32;38155:5;38129:32;:::i;:::-;38026:141;;;;:::o;38173:349::-;38242:6;38291:2;38279:9;38270:7;38266:23;38262:32;38259:119;;;38297:79;;:::i;:::-;38259:119;38417:1;38442:63;38497:7;38488:6;38477:9;38473:22;38442:63;:::i;:::-;38432:73;;38388:127;38173:349;;;;:::o;38528:1053::-;38851:4;38889:3;38878:9;38874:19;38866:27;;38903:71;38971:1;38960:9;38956:17;38947:6;38903:71;:::i;:::-;38984:72;39052:2;39041:9;39037:18;39028:6;38984:72;:::i;:::-;39103:9;39097:4;39093:20;39088:2;39077:9;39073:18;39066:48;39131:108;39234:4;39225:6;39131:108;:::i;:::-;39123:116;;39286:9;39280:4;39276:20;39271:2;39260:9;39256:18;39249:48;39314:108;39417:4;39408:6;39314:108;:::i;:::-;39306:116;;39470:9;39464:4;39460:20;39454:3;39443:9;39439:19;39432:49;39498:76;39569:4;39560:6;39498:76;:::i;:::-;39490:84;;38528:1053;;;;;;;;:::o;39587:147::-;39688:11;39725:3;39710:18;;39587:147;;;;:::o;39740:386::-;39844:3;39872:38;39904:5;39872:38;:::i;:::-;39926:88;40007:6;40002:3;39926:88;:::i;:::-;39919:95;;40023:65;40081:6;40076:3;40069:4;40062:5;40058:16;40023:65;:::i;:::-;40113:6;40108:3;40104:16;40097:23;;39848:278;39740:386;;;;:::o;40132:271::-;40262:3;40284:93;40373:3;40364:6;40284:93;:::i;:::-;40277:100;;40394:3;40387:10;;40132:271;;;;:::o;40409:553::-;40586:4;40624:3;40613:9;40609:19;40601:27;;40638:71;40706:1;40695:9;40691:17;40682:6;40638:71;:::i;:::-;40719:72;40787:2;40776:9;40772:18;40763:6;40719:72;:::i;:::-;40801;40869:2;40858:9;40854:18;40845:6;40801:72;:::i;:::-;40883;40951:2;40940:9;40936:18;40927:6;40883:72;:::i;:::-;40409:553;;;;;;;:::o;40968:634::-;41189:4;41227:2;41216:9;41212:18;41204:26;;41276:9;41270:4;41266:20;41262:1;41251:9;41247:17;41240:47;41304:108;41407:4;41398:6;41304:108;:::i;:::-;41296:116;;41459:9;41453:4;41449:20;41444:2;41433:9;41429:18;41422:48;41487:108;41590:4;41581:6;41487:108;:::i;:::-;41479:116;;40968:634;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3785600","executionCost":"infinite","totalCost":"infinite"},"external":{"UPGRADE_INTERFACE_VERSION()":"infinite","addAdmin(address)":"infinite","adminBurn(address,uint256)":"infinite","adminBurnBatch(address[],uint256[])":"infinite","adminMint(uint256,uint256)":"infinite","admins(address)":"2890","artistAddresses(uint256)":"2951","balanceOf(address,uint256)":"infinite","balanceOfBatch(address[],uint256[])":"infinite","exists(uint256)":"3000","increaseTokenSupplyLimit(uint256,uint256)":"infinite","init(address,address[],string)":"infinite","isAdmin(address)":"2991","isApprovedForAll(address,address)":"infinite","mint(uint256,uint256)":"infinite","owner()":"2621","proxiableUUID()":"infinite","removeAdmin(address)":"infinite","renounceOwnership()":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","setArtistAddress(uint256,address)":"27305","setURI(string)":"infinite","supportsInterface(bytes4)":"931","tokenSupplyLimits(uint256)":"infinite","totalSupply()":"2537","totalSupply(uint256)":"infinite","transferOwnership(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite","uri(uint256)":"infinite"},"internal":{"_authorizeUpgrade(address)":"infinite"}},"methodIdentifiers":{"UPGRADE_INTERFACE_VERSION()":"ad3cb1cc","addAdmin(address)":"70480275","adminBurn(address,uint256)":"06dd0419","adminBurnBatch(address[],uint256[])":"077d9234","adminMint(uint256,uint256)":"d00e40ce","admins(address)":"429b62e5","artistAddresses(uint256)":"831ffd05","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","exists(uint256)":"4f558e79","increaseTokenSupplyLimit(uint256,uint256)":"c36497e5","init(address,address[],string)":"bb625509","isAdmin(address)":"24d7806c","isApprovedForAll(address,address)":"e985e9c5","mint(uint256,uint256)":"1b2ef1ca","owner()":"8da5cb5b","proxiableUUID()":"52d1902d","removeAdmin(address)":"1785f53c","renounceOwnership()":"715018a6","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","setArtistAddress(uint256,address)":"9eca4b7b","setURI(string)":"02fe5305","supportsInterface(bytes4)":"01ffc9a7","tokenSupplyLimits(uint256)":"fbe0a892","totalSupply()":"18160ddd","totalSupply(uint256)":"bd85b039","transferOwnership(address)":"f2fde38b","upgradeToAndCall(address,bytes)":"4f1ef286","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"adminBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"adminBurnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artistAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraSupply\",\"type\":\"uint256\"}],\"name\":\"increaseTokenSupplyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"initialAdmins\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"}],\"name\":\"setArtistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupplyLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"Add an admin Params: _adminAddress: the new address\"},\"adminBurn(address,uint256)\":{\"details\":\"The admin burn function for burning a user's token Params: from: the owner of the token tokenId: the token id\"},\"adminBurnBatch(address[],uint256[])\":{\"details\":\"The admin burn batch function for burning a user's token Params: from: the owners of the token tokenIds: the token ids\"},\"adminMint(uint256,uint256)\":{\"details\":\"The admin mint function (mints new tokens of a particular id) Params: tokenId: the token id to be minted count: the number of new tokens to mint\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"increaseTokenSupplyLimit(uint256,uint256)\":{\"details\":\"Increase the max allowed supply of an artist token Params: tokenId: the id of the token being updated extraSupply: the additional supply to be allowed\"},\"isAdmin(address)\":{\"details\":\"Check address is admin Params: _address: the address to check\"},\"mint(uint256,uint256)\":{\"details\":\"The mint function (mints new tokens of a particular id) Params: tokenId: the token id to be minted count: the number of new tokens to mint\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"removeAdmin(address)\":{\"details\":\"Remove an admin Params: adminAddress: the address to remove\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setArtistAddress(uint256,address)\":{\"details\":\"Update the artist address for a particular token Params: tokenId: the id of the token being updated artistAddress: the new address of the artist for this token\"},\"setURI(string)\":{\"details\":\"Update the uri template Params: _uri: the new uri template\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply()\":{\"details\":\"Total value of tokens.\"},\"totalSupply(uint256)\":{\"details\":\"Total value of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HoldrArtistsERC1155.sol\":\"HoldrArtistsERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Arrays} from \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155\\n    struct ERC1155Storage {\\n        mapping(uint256 id => mapping(address account => uint256)) _balances;\\n\\n        mapping(address account => mapping(address operator => bool)) _operatorApprovals;\\n\\n        // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n        string _uri;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC1155\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC1155StorageLocation = 0x88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500;\\n\\n    function _getERC1155Storage() private pure returns (ERC1155Storage storage $) {\\n        assembly {\\n            $.slot := ERC1155StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = $._balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    $._balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                $._balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        $._uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x070826217a19b56724fe97adc7e5daef1d614e45b98ab964bda02b3be01e9870\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155Upgradeable} from \\\"../ERC1155Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n *\\n * NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens\\n * that can be minted.\\n *\\n * CAUTION: This extension should not be added in an upgrade to an already deployed contract.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155Supply\\n    struct ERC1155SupplyStorage {\\n        mapping(uint256 id => uint256) _totalSupply;\\n        uint256 _totalSupplyAll;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC1155Supply\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC1155SupplyStorageLocation = 0x4a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e2800;\\n\\n    function _getERC1155SupplyStorage() private pure returns (ERC1155SupplyStorage storage $) {\\n        assembly {\\n            $.slot := ERC1155SupplyStorageLocation\\n        }\\n    }\\n\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Total value of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        return $._totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Total value of tokens.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        return $._totalSupplyAll;\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_update}.\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) internal virtual override {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        super._update(from, to, ids, values);\\n\\n        if (from == address(0)) {\\n            uint256 totalMintValue = 0;\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 value = values[i];\\n                // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n                $._totalSupply[ids[i]] += value;\\n                totalMintValue += value;\\n            }\\n            // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\\n            $._totalSupplyAll += totalMintValue;\\n        }\\n\\n        if (to == address(0)) {\\n            uint256 totalBurnValue = 0;\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 value = values[i];\\n\\n                unchecked {\\n                    // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\\n                    $._totalSupply[ids[i]] -= value;\\n                    // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\\n                    totalBurnValue += value;\\n                }\\n            }\\n            unchecked {\\n                // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\\n                $._totalSupplyAll -= totalBurnValue;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x734e28bc55a4939ff5b831d733f6d6414b35251cd85b1155cefb66e73ae844f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x72d47aebad24c59f6e78d0c3e827440173419a333fd910a37fa1e532c98f7e4c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x89b84f7b1b2d6c294cd6b9a9f661c1cfb1b9b10ca7bac5b3445850a8ce96dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC2981} from \\\"../../interfaces/IERC2981.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 tokenId => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev The default royalty set is invalid (eg. (numerator / denominator) >= 1).\\n     */\\n    error ERC2981InvalidDefaultRoyalty(uint256 numerator, uint256 denominator);\\n\\n    /**\\n     * @dev The default royalty receiver is invalid.\\n     */\\n    error ERC2981InvalidDefaultRoyaltyReceiver(address receiver);\\n\\n    /**\\n     * @dev The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\\n     */\\n    error ERC2981InvalidTokenRoyalty(uint256 tokenId, uint256 numerator, uint256 denominator);\\n\\n    /**\\n     * @dev The royalty receiver for `tokenId` is invalid.\\n     */\\n    error ERC2981InvalidTokenRoyaltyReceiver(uint256 tokenId, address receiver);\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        uint256 denominator = _feeDenominator();\\n        if (feeNumerator > denominator) {\\n            // Royalty fee will exceed the sale price\\n            revert ERC2981InvalidDefaultRoyalty(feeNumerator, denominator);\\n        }\\n        if (receiver == address(0)) {\\n            revert ERC2981InvalidDefaultRoyaltyReceiver(address(0));\\n        }\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        uint256 denominator = _feeDenominator();\\n        if (feeNumerator > denominator) {\\n            // Royalty fee will exceed the sale price\\n            revert ERC2981InvalidTokenRoyalty(tokenId, feeNumerator, denominator);\\n        }\\n        if (receiver == address(0)) {\\n            revert ERC2981InvalidTokenRoyaltyReceiver(tokenId, address(0));\\n        }\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x87e4eac873515f713e858d72150a7d2a69ddd531967e60a5d6ba77127db1fd54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/HoldrArtistsERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/common/ERC2981.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract HoldrArtistsERC1155 is Initializable, ERC1155SupplyUpgradeable, OwnableUpgradeable, UUPSUpgradeable {\\n\\n  mapping(address => bool) public admins;\\n  mapping(uint256 => address) public artistAddresses;\\n  mapping(uint256 => uint256) public tokenSupplyLimits;\\n\\n  function init(address initialOwner, address[] memory initialAdmins, string memory uri) public initializer {\\n    __ERC1155Supply_init();\\n    __Ownable_init(initialOwner);\\n    __UUPSUpgradeable_init();\\n    _setURI(uri);\\n\\n    for (uint i = 0; i < initialAdmins.length; i++) {\\n      admins[initialAdmins[i]] = true;\\n    }\\n  }\\n\\n  /**\\n     * @dev Update the artist address for a particular token\\n\\n     * Params:\\n     * tokenId: the id of the token being updated\\n     * artistAddress: the new address of the artist for this token\\n     */\\n  function setArtistAddress(uint256 tokenId, address artistAddress) external {\\n    require(admins[msg.sender], \\\"not admin\\\");\\n    require(tokenId != 0, \\\"0 not allowed\\\");\\n    artistAddresses[tokenId] = artistAddress;\\n  }\\n\\n  /**\\n     * @dev Increase the max allowed supply of an artist token\\n\\n     * Params:\\n     * tokenId: the id of the token being updated\\n     * extraSupply: the additional supply to be allowed\\n     */\\n  function increaseTokenSupplyLimit(uint256 tokenId, uint256 extraSupply) external {\\n    require(admins[msg.sender], \\\"not admin\\\");\\n    require(tokenSupplyLimits[tokenId] + extraSupply <= 1000, \\\"new maximum supply would exceed 1000\\\");\\n    tokenSupplyLimits[tokenId] = tokenSupplyLimits[tokenId] + extraSupply;\\n  }\\n\\n  /**\\n     * @dev Update the uri template\\n\\n     * Params:\\n     * _uri: the new uri template\\n     */\\n  function setURI(string memory uri) external onlyOwner {\\n    _setURI(uri);\\n  }\\n\\n  /**\\n     * @dev Check address is admin\\n\\n     * Params:\\n     * _address: the address to check\\n     */\\n  function isAdmin(address adminAddress) view external returns (bool) {\\n    return admins[adminAddress] == true;\\n  }\\n\\n  /**\\n     * @dev Add an admin\\n\\n     * Params:\\n     * _adminAddress: the new address\\n     */\\n  function addAdmin(address adminAddress) external onlyOwner {\\n    admins[adminAddress] = true;\\n  }\\n\\n  /**\\n     * @dev Remove an admin\\n\\n     * Params:\\n     * adminAddress: the address to remove\\n     */\\n  function removeAdmin(address adminAddress) external onlyOwner {\\n    delete admins[adminAddress];\\n  }\\n\\n  /**\\n     * @dev The mint function (mints new tokens of a particular id)\\n\\n     * Params:\\n     * tokenId: the token id to be minted\\n     * count: the number of new tokens to mint\\n     */\\n  function mint(uint256 tokenId, uint256 count) external {\\n    require(artistAddresses[tokenId] == msg.sender, \\\"sender is not owner for this token\\\");\\n    require(totalSupply(tokenId) + count <= tokenSupplyLimits[tokenId], \\\"new supply would exceed max\\\");\\n    _mint(artistAddresses[tokenId], tokenId, count, \\\"\\\");\\n  }\\n\\n  /**\\n     * @dev The admin mint function (mints new tokens of a particular id)\\n\\n     * Params:\\n     * tokenId: the token id to be minted\\n     * count: the number of new tokens to mint\\n     */\\n  function adminMint(uint256 tokenId, uint256 count) external {\\n    require(admins[msg.sender], \\\"not admin\\\");\\n    require(artistAddresses[tokenId] != address(0), \\\"artist not set for this token\\\");\\n    require(totalSupply(tokenId) + count <= tokenSupplyLimits[tokenId], \\\"new supply would exceed max\\\");\\n    _mint(artistAddresses[tokenId], tokenId, count, \\\"\\\");\\n  }\\n\\n  /**\\n    * @dev The admin burn function for burning a user's token\\n\\n    * Params:\\n    * from: the owner of the token\\n    * tokenId: the token id\\n    */\\n  function adminBurn(address from, uint256 tokenId) external {\\n    require(admins[msg.sender], \\\"not admin\\\");\\n    super._burn(from, tokenId, 1);\\n  }\\n\\n  /**\\n    * @dev The admin burn batch function for burning a user's token\\n\\n    * Params:\\n    * from: the owners of the token\\n    * tokenIds: the token ids\\n    */\\n  function adminBurnBatch(address[] memory from, uint256[] memory tokenIds) external {\\n    for (uint i = 0; i < from.length; i++) {\\n      this.adminBurn(from[i], tokenIds[i]);\\n    }\\n  }\\n\\n  function setApprovalForAll(address operator, bool approved) public override {\\n    super.setApprovalForAll(operator, approved);\\n  }\\n\\n  function safeTransferFrom(address from, address to, uint256 tokenId, uint256 amount, bytes memory data) public override {\\n    require(this.isAdmin(msg.sender), \\\"not admin\\\");\\n    super.safeTransferFrom(from, to, tokenId, amount, data);\\n  }\\n\\n  function safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual override {\\n    require(this.isAdmin(msg.sender), \\\"not admin\\\");\\n    super.safeBatchTransferFrom(from, to, ids, amounts, data);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155Upgradeable) returns (bool) {\\n    return (\\n      interfaceId == type(IERC2981).interfaceId ||\\n        super.supportsInterface(interfaceId)\\n    );\\n  }\\n\\n  function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n    if (admins[operator]) {\\n      return true;\\n    }\\n    return super.isApprovedForAll(owner, operator);\\n  }\\n\\n  function _authorizeUpgrade(address newImplementation) override internal virtual onlyOwner {\\n    // no op\\n  }\\n\\n}\\n\",\"keccak256\":\"0xa86d16344799696cf85cc66be32e0754ffc742518945541c7c1f007c9075bcee\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4987,"contract":"contracts/HoldrArtistsERC1155.sol:HoldrArtistsERC1155","label":"admins","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":4991,"contract":"contracts/HoldrArtistsERC1155.sol:HoldrArtistsERC1155","label":"artistAddresses","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_address)"},{"astId":4995,"contract":"contracts/HoldrArtistsERC1155.sol:HoldrArtistsERC1155","label":"tokenSupplyLimits","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/HoldrArtistsERC1155UpgradeTest.sol":{"HoldrArtistsERC1155UpgradeTest":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"},{"inputs":[{"internalType":"address","name":"implementation","type":"address"}],"name":"ERC1967InvalidImplementation","type":"error"},{"inputs":[],"name":"ERC1967NonPayable","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"UUPSUnauthorizedCallContext","type":"error"},{"inputs":[{"internalType":"bytes32","name":"slot","type":"bytes32"}],"name":"UUPSUnsupportedProxiableUUID","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"UPGRADE_INTERFACE_VERSION","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adminAddress","type":"address"}],"name":"addAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"adminBurn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"from","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"adminBurnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"count","type":"uint256"}],"name":"adminMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"admins","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"artistAddresses","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"exists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"extraSupply","type":"uint256"}],"name":"increaseTokenSupplyLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"initialOwner","type":"address"},{"internalType":"address[]","name":"initialAdmins","type":"address[]"},{"internalType":"string","name":"uri","type":"string"}],"name":"init","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"adminAddress","type":"address"}],"name":"isAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"count","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"adminAddress","type":"address"}],"name":"removeAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"artistAddress","type":"address"}],"name":"setArtistAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"uri","type":"string"}],"name":"setURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenSupplyLimits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}],"ERC1967InvalidImplementation(address)":[{"details":"The `implementation` of the proxy is invalid."}],"ERC1967NonPayable()":[{"details":"An upgrade function sees `msg.value > 0` that may be lost."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"NotInitializing()":[{"details":"The contract is not initializing."}],"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}],"UUPSUnauthorizedCallContext()":[{"details":"The call is from an unauthorized context."}],"UUPSUnsupportedProxiableUUID(bytes32)":[{"details":"The storage `slot` is unsupported as a UUID."}]},"events":{"ApprovalForAll(address,address,bool)":{"details":"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."},"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"TransferBatch(address,address,address,uint256[],uint256[])":{"details":"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."},"TransferSingle(address,address,address,uint256,uint256)":{"details":"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."},"URI(string,uint256)":{"details":"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"addAdmin(address)":{"details":"Add an admin Params: _adminAddress: the new address"},"adminBurn(address,uint256)":{"details":"The admin burn function for burning a user's token Params: from: the owner of the token tokenId: the token id"},"adminBurnBatch(address[],uint256[])":{"details":"The admin burn batch function for burning a user's token Params: from: the owners of the token tokenIds: the token ids"},"adminMint(uint256,uint256)":{"details":"The admin mint function (mints new tokens of a particular id) Params: tokenId: the token id to be minted count: the number of new tokens to mint"},"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"exists(uint256)":{"details":"Indicates whether any token exist with a given id, or not."},"increaseTokenSupplyLimit(uint256,uint256)":{"details":"Increase the max allowed supply of an artist token Params: tokenId: the id of the token being updated extraSupply: the additional supply to be allowed"},"isAdmin(address)":{"details":"Check address is admin Params: _address: the address to check"},"mint(uint256,uint256)":{"details":"The mint function (mints new tokens of a particular id) Params: tokenId: the token id to be minted count: the number of new tokens to mint"},"owner()":{"details":"Returns the address of the current owner."},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"removeAdmin(address)":{"details":"Remove an admin Params: adminAddress: the address to remove"},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"setArtistAddress(uint256,address)":{"details":"Update the artist address for a particular token Params: tokenId: the id of the token being updated artistAddress: the new address of the artist for this token"},"setURI(string)":{"details":"Update the uri template Params: _uri: the new uri template"},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"totalSupply()":{"details":"Total value of tokens."},"totalSupply(uint256)":{"details":"Total value of tokens in with a given id."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"uri(uint256)":{"details":"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1681525034801561004357600080fd5b506080516148d361006d60003960008181611b8701528181611bdc0152611d9701526148d36000f3fe6080604052600436106101d75760003560e01c806352d1902d11610102578063bb62550911610095578063e985e9c511610064578063e985e9c5146106cc578063f242432a14610709578063f2fde38b14610732578063fbe0a8921461075b576101d7565b8063bb62550914610614578063bd85b0391461063d578063c36497e51461067a578063d00e40ce146106a3576101d7565b80638da5cb5b116100d15780638da5cb5b1461056c5780639eca4b7b14610597578063a22cb465146105c0578063ad3cb1cc146105e9576101d7565b806352d1902d146104c457806370480275146104ef578063715018a614610518578063831ffd051461052f576101d7565b806318160ddd1161017a578063429b62e511610149578063429b62e5146103f15780634e1273f41461042e5780634f1ef2861461046b5780634f558e7914610487576101d7565b806318160ddd146103375780631b2ef1ca1461036257806324d7806c1461038b5780632eb2c2d6146103c8576101d7565b806306dd0419116101b657806306dd04191461027f578063077d9234146102a85780630e89341c146102d15780631785f53c1461030e576101d7565b8062fdd58e146101dc57806301ffc9a71461021957806302fe530514610256575b600080fd5b3480156101e857600080fd5b5061020360048036038101906101fe91906132f3565b610798565b6040516102109190613342565b60405180910390f35b34801561022557600080fd5b50610240600480360381019061023b91906133b5565b610801565b60405161024d91906133fd565b60405180910390f35b34801561026257600080fd5b5061027d6004803603810190610278919061355e565b61083e565b005b34801561028b57600080fd5b506102a660048036038101906102a191906132f3565b610852565b005b3480156102b457600080fd5b506102cf60048036038101906102ca9190613732565b6108ed565b005b3480156102dd57600080fd5b506102f860048036038101906102f391906137aa565b6109b2565b6040516103059190613856565b60405180910390f35b34801561031a57600080fd5b5061033560048036038101906103309190613878565b610a55565b005b34801561034357600080fd5b5061034c610aae565b6040516103599190613342565b60405180910390f35b34801561036e57600080fd5b50610389600480360381019061038491906138a5565b610ac6565b005b34801561039757600080fd5b506103b260048036038101906103ad9190613878565b610c22565b6040516103bf91906133fd565b60405180910390f35b3480156103d457600080fd5b506103ef60048036038101906103ea9190613986565b610c7e565b005b3480156103fd57600080fd5b5061041860048036038101906104139190613878565b610d4b565b60405161042591906133fd565b60405180910390f35b34801561043a57600080fd5b5061045560048036038101906104509190613732565b610d6b565b6040516104629190613b13565b60405180910390f35b61048560048036038101906104809190613b35565b610e7a565b005b34801561049357600080fd5b506104ae60048036038101906104a991906137aa565b610e99565b6040516104bb91906133fd565b60405180910390f35b3480156104d057600080fd5b506104d9610ead565b6040516104e69190613baa565b60405180910390f35b3480156104fb57600080fd5b5061051660048036038101906105119190613878565b610ee0565b005b34801561052457600080fd5b5061052d610f42565b005b34801561053b57600080fd5b50610556600480360381019061055191906137aa565b610f56565b6040516105639190613bd4565b60405180910390f35b34801561057857600080fd5b50610581610f89565b60405161058e9190613bd4565b60405180910390f35b3480156105a357600080fd5b506105be60048036038101906105b99190613bef565b610fc1565b005b3480156105cc57600080fd5b506105e760048036038101906105e29190613c5b565b6110e5565b005b3480156105f557600080fd5b506105fe6110f3565b60405161060b9190613856565b60405180910390f35b34801561062057600080fd5b5061063b60048036038101906106369190613c9b565b61112c565b005b34801561064957600080fd5b50610664600480360381019061065f91906137aa565b611367565b6040516106719190613342565b60405180910390f35b34801561068657600080fd5b506106a1600480360381019061069c91906138a5565b611392565b005b3480156106af57600080fd5b506106ca60048036038101906106c591906138a5565b6114ba565b005b3480156106d857600080fd5b506106f360048036038101906106ee9190613d26565b6116a2565b60405161070091906133fd565b60405180910390f35b34801561071557600080fd5b50610730600480360381019061072b9190613d66565b611711565b005b34801561073e57600080fd5b5061075960048036038101906107549190613878565b6117de565b005b34801561076757600080fd5b50610782600480360381019061077d91906137aa565b611864565b60405161078f9190613342565b60405180910390f35b6000806107a361187c565b905080600001600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083590613e49565b60405180910390fd5b6108466118a4565b61084f8161192b565b50565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d490613eb5565b60405180910390fd5b6108e98282600161194d565b5050565b60005b82518110156109ad573073ffffffffffffffffffffffffffffffffffffffff166306dd041984838151811061092857610927613ed5565b5b602002602001015184848151811061094357610942613ed5565b5b60200260200101516040518363ffffffff1660e01b8152600401610968929190613f04565b600060405180830381600087803b15801561098257600080fd5b505af1158015610996573d6000803e3d6000fd5b5050505080806109a590613f5c565b9150506108f0565b505050565b606060006109be61187c565b90508060020180546109cf90613fd3565b80601f01602080910402602001604051908101604052809291908181526020018280546109fb90613fd3565b8015610a485780601f10610a1d57610100808354040283529160200191610a48565b820191906000526020600020905b815481529060010190602001808311610a2b57829003601f168201915b5050505050915050919050565b610a5d6118a4565b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905550565b600080610ab96119f4565b9050806001015491505090565b3373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5e90614076565b60405180910390fd5b600260008381526020019081526020016000205481610b8584611367565b610b8f9190614096565b1115610bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc790614116565b60405180910390fd5b610c1e6001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838360405180602001604052806000815250611a1c565b5050565b6000600115156000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515149050919050565b3073ffffffffffffffffffffffffffffffffffffffff166324d7806c336040518263ffffffff1660e01b8152600401610cb79190613bd4565b602060405180830381865afa158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf8919061414b565b610d37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2e90613eb5565b60405180910390fd5b610d448585858585611ab5565b5050505050565b60006020528060005260406000206000915054906101000a900460ff1681565b60608151835114610db757815183516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401610dae929190614178565b60405180910390fd5b6000835167ffffffffffffffff811115610dd457610dd3613433565b5b604051908082528060200260200182016040528015610e025781602001602082028036833780820191505090505b50905060005b8451811015610e6f57610e3f610e278287611b5d90919063ffffffff16565b610e3a8387611b7190919063ffffffff16565b610798565b828281518110610e5257610e51613ed5565b5b60200260200101818152505080610e6890613f5c565b9050610e08565b508091505092915050565b610e82611b85565b610e8b82611c6b565b610e958282611c76565b5050565b600080610ea583611367565b119050919050565b6000610eb7611d95565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b610ee86118a4565b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610f4a6118a4565b610f546000611e1c565b565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610f94611ef3565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661104c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104390613eb5565b60405180910390fd5b6000820361108f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611086906141ed565b60405180910390fd5b806001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6110ef8282611f1b565b5050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b6000611136611f31565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156111845750825b9050600060018367ffffffffffffffff161480156111b9575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156111c7575080155b156111fe576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561124e5760018560000160086101000a81548160ff0219169083151502179055505b611256611f59565b61125f88611f63565b611267611f77565b6112708661192b565b60005b87518110156113005760016000808a848151811061129457611293613ed5565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806112f890613f5c565b915050611273565b50831561135d5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516113549190614266565b60405180910390a15b5050505050505050565b6000806113726119f4565b905080600001600084815260200190815260200160002054915050919050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661141d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141490613eb5565b60405180910390fd5b6103e881600260008581526020019081526020016000205461143f9190614096565b1115611480576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611477906142f3565b60405180910390fd5b80600260008481526020019081526020016000205461149f9190614096565b60026000848152602001908152602001600020819055505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153c90613eb5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036115e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115de9061435f565b60405180910390fd5b60026000838152602001908152602001600020548161160584611367565b61160f9190614096565b1115611650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164790614116565b60405180910390fd5b61169e6001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838360405180602001604052806000815250611a1c565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156116fe576001905061170b565b6117088383611f81565b90505b92915050565b3073ffffffffffffffffffffffffffffffffffffffff166324d7806c336040518263ffffffff1660e01b815260040161174a9190613bd4565b602060405180830381865afa158015611767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178b919061414b565b6117ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c190613eb5565b60405180910390fd5b6117d78585858585612023565b5050505050565b6117e66118a4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118585760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161184f9190613bd4565b60405180910390fd5b61186181611e1c565b50565b60026020528060005260406000206000915090505481565b60007f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500905090565b6118ac6120cb565b73ffffffffffffffffffffffffffffffffffffffff166118ca610f89565b73ffffffffffffffffffffffffffffffffffffffff1614611929576118ed6120cb565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016119209190613bd4565b60405180910390fd5b565b600061193561187c565b9050818160020190816119489190614521565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036119bf5760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016119b69190613bd4565b60405180910390fd5b6000806119cc84846120d3565b915091506119ed856000848460405180602001604052806000815250612103565b5050505050565b60007f4a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e2800905090565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611a8e5760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611a859190613bd4565b60405180910390fd5b600080611a9b85856120d3565b91509150611aad600087848487612103565b505050505050565b6000611abf6120cb565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015611b045750611b0286826116a2565b155b15611b485780866040517fe237d922000000000000000000000000000000000000000000000000000000008152600401611b3f9291906145f3565b60405180910390fd5b611b5586868686866121b5565b505050505050565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480611c3257507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611c196122ad565b73ffffffffffffffffffffffffffffffffffffffff1614155b15611c69576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611c736118a4565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611cde57506040513d601f19601f82011682018060405250810190611cdb9190614648565b60015b611d1f57816040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401611d169190613bd4565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114611d8657806040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600401611d7d9190613baa565b60405180910390fd5b611d908383612304565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611e1a576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000611e26611ef3565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b611f2d611f266120cb565b8383612377565b5050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b611f616124f6565b565b611f6b6124f6565b611f7481612536565b50565b611f7f6124f6565b565b600080611f8c61187c565b90508060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b600061202d6120cb565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015612072575061207086826116a2565b155b156120b65780866040517fe237d9220000000000000000000000000000000000000000000000000000000081526004016120ad9291906145f3565b60405180910390fd5b6120c386868686866125bc565b505050505050565b600033905090565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b61210f858585856126c7565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146121ae57600061214d6120cb565b9050600184510361219d57600061216e600086611b7190919063ffffffff16565b90506000612186600086611b7190919063ffffffff16565b9050612196838989858589612893565b50506121ac565b6121ab818787878787612a47565b5b505b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036122275760006040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161221e9190613bd4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036122995760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016122909190613bd4565b60405180910390fd5b6122a68585858585612103565b5050505050565b60006122db7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612bfb565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61230d82612c05565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a260008151111561236a576123648282612cd2565b50612373565b612372612d56565b5b5050565b600061238161187c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036123f55760006040517fced3e1000000000000000000000000000000000000000000000000000000000081526004016123ec9190613bd4565b60405180910390fd5b818160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31846040516124e891906133fd565b60405180910390a350505050565b6124fe612d93565b612534576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61253e6124f6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036125b05760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016125a79190613bd4565b60405180910390fd5b6125b981611e1c565b50565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361262e5760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016126259190613bd4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036126a05760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016126979190613bd4565b60405180910390fd5b6000806126ad85856120d3565b915091506126be8787848487612103565b50505050505050565b60006126d16119f4565b90506126df85858585612db3565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036127c3576000805b84518110156127a557600084828151811061273557612734613ed5565b5b602002602001015190508084600001600088858151811061275957612758613ed5565b5b60200260200101518152602001908152602001600020600082825461277e9190614096565b9250508190555080836127919190614096565b9250508061279e90613f5c565b9050612717565b50808260010160008282546127ba9190614096565b92505081905550505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361288c576000805b845181101561287757600084828151811061281957612818613ed5565b5b602002602001015190508084600001600088858151811061283d5761283c613ed5565b5b60200260200101518152602001908152602001600020600082825403925050819055508083019250508061287090613f5c565b90506127fb565b50808260010160008282540392505081905550505b5050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115612a3f578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016128f49594939291906146ca565b6020604051808303816000875af192505050801561293057506040513d601f19601f8201168201806040525081019061292d9190614739565b60015b6129b4573d8060008114612960576040519150601f19603f3d011682016040523d82523d6000602084013e612965565b606091505b5060008151036129ac57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016129a39190613bd4565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612a3d57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612a349190613bd4565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115612bf3578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612aa8959493929190614766565b6020604051808303816000875af1925050508015612ae457506040513d601f19601f82011682018060405250810190612ae19190614739565b60015b612b68573d8060008114612b14576040519150601f19603f3d011682016040523d82523d6000602084013e612b19565b606091505b506000815103612b6057846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612b579190613bd4565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612bf157846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612be89190613bd4565b60405180910390fd5b505b505050505050565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b03612c6157806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401612c589190613bd4565b60405180910390fd5b80612c8e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612bfb565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051612cfc919061480a565b600060405180830381855af49150503d8060008114612d37576040519150601f19603f3d011682016040523d82523d6000602084013e612d3c565b606091505b5091509150612d4c858383613177565b9250505092915050565b6000341115612d91576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612d9d611f31565b60000160089054906101000a900460ff16905090565b6000612dbd61187c565b90508151835114612e0957825182516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401612e00929190614178565b60405180910390fd5b6000612e136120cb565b905060005b8451811015613031576000612e368287611b7190919063ffffffff16565b90506000612e4d8387611b7190919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614612f8057600085600001600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612f2557898183856040517f03dee4c5000000000000000000000000000000000000000000000000000000008152600401612f1c9493929190614821565b60405180910390fd5b81810386600001600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461301e578085600001600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546130169190614096565b925050819055505b50508061302a90613f5c565b9050612e18565b5060018451036130f0576000613051600086611b7190919063ffffffff16565b90506000613069600086611b7190919063ffffffff16565b90508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6285856040516130e1929190614178565b60405180910390a4505061316f565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051613166929190614866565b60405180910390a45b505050505050565b60608261318c5761318782613206565b6131fe565b600082511480156131b4575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156131f657836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016131ed9190613bd4565b60405180910390fd5b8190506131ff565b5b9392505050565b6000815111156132195780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061328a8261325f565b9050919050565b61329a8161327f565b81146132a557600080fd5b50565b6000813590506132b781613291565b92915050565b6000819050919050565b6132d0816132bd565b81146132db57600080fd5b50565b6000813590506132ed816132c7565b92915050565b6000806040838503121561330a57613309613255565b5b6000613318858286016132a8565b9250506020613329858286016132de565b9150509250929050565b61333c816132bd565b82525050565b60006020820190506133576000830184613333565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6133928161335d565b811461339d57600080fd5b50565b6000813590506133af81613389565b92915050565b6000602082840312156133cb576133ca613255565b5b60006133d9848285016133a0565b91505092915050565b60008115159050919050565b6133f7816133e2565b82525050565b600060208201905061341260008301846133ee565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61346b82613422565b810181811067ffffffffffffffff8211171561348a57613489613433565b5b80604052505050565b600061349d61324b565b90506134a98282613462565b919050565b600067ffffffffffffffff8211156134c9576134c8613433565b5b6134d282613422565b9050602081019050919050565b82818337600083830152505050565b60006135016134fc846134ae565b613493565b90508281526020810184848401111561351d5761351c61341d565b5b6135288482856134df565b509392505050565b600082601f83011261354557613544613418565b5b81356135558482602086016134ee565b91505092915050565b60006020828403121561357457613573613255565b5b600082013567ffffffffffffffff8111156135925761359161325a565b5b61359e84828501613530565b91505092915050565b600067ffffffffffffffff8211156135c2576135c1613433565b5b602082029050602081019050919050565b600080fd5b60006135eb6135e6846135a7565b613493565b9050808382526020820190506020840283018581111561360e5761360d6135d3565b5b835b81811015613637578061362388826132a8565b845260208401935050602081019050613610565b5050509392505050565b600082601f83011261365657613655613418565b5b81356136668482602086016135d8565b91505092915050565b600067ffffffffffffffff82111561368a57613689613433565b5b602082029050602081019050919050565b60006136ae6136a98461366f565b613493565b905080838252602082019050602084028301858111156136d1576136d06135d3565b5b835b818110156136fa57806136e688826132de565b8452602084019350506020810190506136d3565b5050509392505050565b600082601f83011261371957613718613418565b5b813561372984826020860161369b565b91505092915050565b6000806040838503121561374957613748613255565b5b600083013567ffffffffffffffff8111156137675761376661325a565b5b61377385828601613641565b925050602083013567ffffffffffffffff8111156137945761379361325a565b5b6137a085828601613704565b9150509250929050565b6000602082840312156137c0576137bf613255565b5b60006137ce848285016132de565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156138115780820151818401526020810190506137f6565b60008484015250505050565b6000613828826137d7565b61383281856137e2565b93506138428185602086016137f3565b61384b81613422565b840191505092915050565b60006020820190508181036000830152613870818461381d565b905092915050565b60006020828403121561388e5761388d613255565b5b600061389c848285016132a8565b91505092915050565b600080604083850312156138bc576138bb613255565b5b60006138ca858286016132de565b92505060206138db858286016132de565b9150509250929050565b600067ffffffffffffffff821115613900576138ff613433565b5b61390982613422565b9050602081019050919050565b6000613929613924846138e5565b613493565b9050828152602081018484840111156139455761394461341d565b5b6139508482856134df565b509392505050565b600082601f83011261396d5761396c613418565b5b813561397d848260208601613916565b91505092915050565b600080600080600060a086880312156139a2576139a1613255565b5b60006139b0888289016132a8565b95505060206139c1888289016132a8565b945050604086013567ffffffffffffffff8111156139e2576139e161325a565b5b6139ee88828901613704565b935050606086013567ffffffffffffffff811115613a0f57613a0e61325a565b5b613a1b88828901613704565b925050608086013567ffffffffffffffff811115613a3c57613a3b61325a565b5b613a4888828901613958565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613a8a816132bd565b82525050565b6000613a9c8383613a81565b60208301905092915050565b6000602082019050919050565b6000613ac082613a55565b613aca8185613a60565b9350613ad583613a71565b8060005b83811015613b06578151613aed8882613a90565b9750613af883613aa8565b925050600181019050613ad9565b5085935050505092915050565b60006020820190508181036000830152613b2d8184613ab5565b905092915050565b60008060408385031215613b4c57613b4b613255565b5b6000613b5a858286016132a8565b925050602083013567ffffffffffffffff811115613b7b57613b7a61325a565b5b613b8785828601613958565b9150509250929050565b6000819050919050565b613ba481613b91565b82525050565b6000602082019050613bbf6000830184613b9b565b92915050565b613bce8161327f565b82525050565b6000602082019050613be96000830184613bc5565b92915050565b60008060408385031215613c0657613c05613255565b5b6000613c14858286016132de565b9250506020613c25858286016132a8565b9150509250929050565b613c38816133e2565b8114613c4357600080fd5b50565b600081359050613c5581613c2f565b92915050565b60008060408385031215613c7257613c71613255565b5b6000613c80858286016132a8565b9250506020613c9185828601613c46565b9150509250929050565b600080600060608486031215613cb457613cb3613255565b5b6000613cc2868287016132a8565b935050602084013567ffffffffffffffff811115613ce357613ce261325a565b5b613cef86828701613641565b925050604084013567ffffffffffffffff811115613d1057613d0f61325a565b5b613d1c86828701613530565b9150509250925092565b60008060408385031215613d3d57613d3c613255565b5b6000613d4b858286016132a8565b9250506020613d5c858286016132a8565b9150509250929050565b600080600080600060a08688031215613d8257613d81613255565b5b6000613d90888289016132a8565b9550506020613da1888289016132a8565b9450506040613db2888289016132de565b9350506060613dc3888289016132de565b925050608086013567ffffffffffffffff811115613de457613de361325a565b5b613df088828901613958565b9150509295509295909350565b7f5468697320697320612064756d6d79206572726f720000000000000000000000600082015250565b6000613e336015836137e2565b9150613e3e82613dfd565b602082019050919050565b60006020820190508181036000830152613e6281613e26565b9050919050565b7f6e6f742061646d696e0000000000000000000000000000000000000000000000600082015250565b6000613e9f6009836137e2565b9150613eaa82613e69565b602082019050919050565b60006020820190508181036000830152613ece81613e92565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050613f196000830185613bc5565b613f266020830184613333565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613f67826132bd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613f9957613f98613f2d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613feb57607f821691505b602082108103613ffe57613ffd613fa4565b5b50919050565b7f73656e646572206973206e6f74206f776e657220666f72207468697320746f6b60008201527f656e000000000000000000000000000000000000000000000000000000000000602082015250565b60006140606022836137e2565b915061406b82614004565b604082019050919050565b6000602082019050818103600083015261408f81614053565b9050919050565b60006140a1826132bd565b91506140ac836132bd565b92508282019050808211156140c4576140c3613f2d565b5b92915050565b7f6e657720737570706c7920776f756c6420657863656564206d61780000000000600082015250565b6000614100601b836137e2565b915061410b826140ca565b602082019050919050565b6000602082019050818103600083015261412f816140f3565b9050919050565b60008151905061414581613c2f565b92915050565b60006020828403121561416157614160613255565b5b600061416f84828501614136565b91505092915050565b600060408201905061418d6000830185613333565b61419a6020830184613333565b9392505050565b7f30206e6f7420616c6c6f77656400000000000000000000000000000000000000600082015250565b60006141d7600d836137e2565b91506141e2826141a1565b602082019050919050565b60006020820190508181036000830152614206816141ca565b9050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b600061425061424b6142468461420d565b61422b565b614217565b9050919050565b61426081614235565b82525050565b600060208201905061427b6000830184614257565b92915050565b7f6e6577206d6178696d756d20737570706c7920776f756c64206578636565642060008201527f3130303000000000000000000000000000000000000000000000000000000000602082015250565b60006142dd6024836137e2565b91506142e882614281565b604082019050919050565b6000602082019050818103600083015261430c816142d0565b9050919050565b7f617274697374206e6f742073657420666f72207468697320746f6b656e000000600082015250565b6000614349601d836137e2565b915061435482614313565b602082019050919050565b600060208201905081810360008301526143788161433c565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026143e17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826143a4565b6143eb86836143a4565b95508019841693508086168417925050509392505050565b600061441e614419614414846132bd565b61422b565b6132bd565b9050919050565b6000819050919050565b61443883614403565b61444c61444482614425565b8484546143b1565b825550505050565b600090565b614461614454565b61446c81848461442f565b505050565b5b8181101561449057614485600082614459565b600181019050614472565b5050565b601f8211156144d5576144a68161437f565b6144af84614394565b810160208510156144be578190505b6144d26144ca85614394565b830182614471565b50505b505050565b600082821c905092915050565b60006144f8600019846008026144da565b1980831691505092915050565b600061451183836144e7565b9150826002028217905092915050565b61452a826137d7565b67ffffffffffffffff81111561454357614542613433565b5b61454d8254613fd3565b614558828285614494565b600060209050601f83116001811461458b5760008415614579578287015190505b6145838582614505565b8655506145eb565b601f1984166145998661437f565b60005b828110156145c15784890151825560018201915060208501945060208101905061459c565b868310156145de57848901516145da601f8916826144e7565b8355505b6001600288020188555050505b505050505050565b60006040820190506146086000830185613bc5565b6146156020830184613bc5565b9392505050565b61462581613b91565b811461463057600080fd5b50565b6000815190506146428161461c565b92915050565b60006020828403121561465e5761465d613255565b5b600061466c84828501614633565b91505092915050565b600081519050919050565b600082825260208201905092915050565b600061469c82614675565b6146a68185614680565b93506146b68185602086016137f3565b6146bf81613422565b840191505092915050565b600060a0820190506146df6000830188613bc5565b6146ec6020830187613bc5565b6146f96040830186613333565b6147066060830185613333565b81810360808301526147188184614691565b90509695505050505050565b60008151905061473381613389565b92915050565b60006020828403121561474f5761474e613255565b5b600061475d84828501614724565b91505092915050565b600060a08201905061477b6000830188613bc5565b6147886020830187613bc5565b818103604083015261479a8186613ab5565b905081810360608301526147ae8185613ab5565b905081810360808301526147c28184614691565b90509695505050505050565b600081905092915050565b60006147e482614675565b6147ee81856147ce565b93506147fe8185602086016137f3565b80840191505092915050565b600061481682846147d9565b915081905092915050565b60006080820190506148366000830187613bc5565b6148436020830186613333565b6148506040830185613333565b61485d6060830184613333565b95945050505050565b600060408201905081810360008301526148808185613ab5565b905081810360208301526148948184613ab5565b9050939250505056fea26469706673582212203b58cd0c0c28308fd991d3826cabeed5c38182e9fb2b173edf2e0197b31cf34164736f6c63430008140033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP CALLVALUE DUP1 ISZERO PUSH2 0x43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH2 0x48D3 PUSH2 0x6D PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x1B87 ADD MSTORE DUP2 DUP2 PUSH2 0x1BDC ADD MSTORE PUSH2 0x1D97 ADD MSTORE PUSH2 0x48D3 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x52D1902D GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xBB625509 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE985E9C5 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x6CC JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x709 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x732 JUMPI DUP1 PUSH4 0xFBE0A892 EQ PUSH2 0x75B JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0xBB625509 EQ PUSH2 0x614 JUMPI DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x63D JUMPI DUP1 PUSH4 0xC36497E5 EQ PUSH2 0x67A JUMPI DUP1 PUSH4 0xD00E40CE EQ PUSH2 0x6A3 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x56C JUMPI DUP1 PUSH4 0x9ECA4B7B EQ PUSH2 0x597 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x5C0 JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x5E9 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x52D1902D EQ PUSH2 0x4C4 JUMPI DUP1 PUSH4 0x70480275 EQ PUSH2 0x4EF JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x518 JUMPI DUP1 PUSH4 0x831FFD05 EQ PUSH2 0x52F JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x429B62E5 GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x429B62E5 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x42E JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x46B JUMPI DUP1 PUSH4 0x4F558E79 EQ PUSH2 0x487 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD EQ PUSH2 0x337 JUMPI DUP1 PUSH4 0x1B2EF1CA EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0x24D7806C EQ PUSH2 0x38B JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x3C8 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x6DD0419 GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x6DD0419 EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0x77D9234 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x1785F53C EQ PUSH2 0x30E JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0x2FE5305 EQ PUSH2 0x256 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x32F3 JUMP JUMPDEST PUSH2 0x798 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x210 SWAP2 SWAP1 PUSH2 0x3342 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23B SWAP2 SWAP1 PUSH2 0x33B5 JUMP JUMPDEST PUSH2 0x801 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24D SWAP2 SWAP1 PUSH2 0x33FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x278 SWAP2 SWAP1 PUSH2 0x355E JUMP JUMPDEST PUSH2 0x83E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x32F3 JUMP JUMPDEST PUSH2 0x852 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CA SWAP2 SWAP1 PUSH2 0x3732 JUMP JUMPDEST PUSH2 0x8ED JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F3 SWAP2 SWAP1 PUSH2 0x37AA JUMP JUMPDEST PUSH2 0x9B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x3856 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x335 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x330 SWAP2 SWAP1 PUSH2 0x3878 JUMP JUMPDEST PUSH2 0xA55 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x34C PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x359 SWAP2 SWAP1 PUSH2 0x3342 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x389 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x384 SWAP2 SWAP1 PUSH2 0x38A5 JUMP JUMPDEST PUSH2 0xAC6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x397 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3AD SWAP2 SWAP1 PUSH2 0x3878 JUMP JUMPDEST PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3BF SWAP2 SWAP1 PUSH2 0x33FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3EA SWAP2 SWAP1 PUSH2 0x3986 JUMP JUMPDEST PUSH2 0xC7E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x418 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x413 SWAP2 SWAP1 PUSH2 0x3878 JUMP JUMPDEST PUSH2 0xD4B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x425 SWAP2 SWAP1 PUSH2 0x33FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x455 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x450 SWAP2 SWAP1 PUSH2 0x3732 JUMP JUMPDEST PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x462 SWAP2 SWAP1 PUSH2 0x3B13 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x485 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x480 SWAP2 SWAP1 PUSH2 0x3B35 JUMP JUMPDEST PUSH2 0xE7A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4A9 SWAP2 SWAP1 PUSH2 0x37AA JUMP JUMPDEST PUSH2 0xE99 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4BB SWAP2 SWAP1 PUSH2 0x33FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D9 PUSH2 0xEAD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E6 SWAP2 SWAP1 PUSH2 0x3BAA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x516 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x511 SWAP2 SWAP1 PUSH2 0x3878 JUMP JUMPDEST PUSH2 0xEE0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x524 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x52D PUSH2 0xF42 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x556 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x551 SWAP2 SWAP1 PUSH2 0x37AA JUMP JUMPDEST PUSH2 0xF56 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x563 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x581 PUSH2 0xF89 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x58E SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5BE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B9 SWAP2 SWAP1 PUSH2 0x3BEF JUMP JUMPDEST PUSH2 0xFC1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5E2 SWAP2 SWAP1 PUSH2 0x3C5B JUMP JUMPDEST PUSH2 0x10E5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5FE PUSH2 0x10F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x60B SWAP2 SWAP1 PUSH2 0x3856 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x620 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x63B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x636 SWAP2 SWAP1 PUSH2 0x3C9B JUMP JUMPDEST PUSH2 0x112C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x664 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x65F SWAP2 SWAP1 PUSH2 0x37AA JUMP JUMPDEST PUSH2 0x1367 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x671 SWAP2 SWAP1 PUSH2 0x3342 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x686 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x69C SWAP2 SWAP1 PUSH2 0x38A5 JUMP JUMPDEST PUSH2 0x1392 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6C5 SWAP2 SWAP1 PUSH2 0x38A5 JUMP JUMPDEST PUSH2 0x14BA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6EE SWAP2 SWAP1 PUSH2 0x3D26 JUMP JUMPDEST PUSH2 0x16A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x700 SWAP2 SWAP1 PUSH2 0x33FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x730 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x72B SWAP2 SWAP1 PUSH2 0x3D66 JUMP JUMPDEST PUSH2 0x1711 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x759 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x754 SWAP2 SWAP1 PUSH2 0x3878 JUMP JUMPDEST PUSH2 0x17DE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x767 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x782 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x77D SWAP2 SWAP1 PUSH2 0x37AA JUMP JUMPDEST PUSH2 0x1864 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78F SWAP2 SWAP1 PUSH2 0x3342 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7A3 PUSH2 0x187C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x835 SWAP1 PUSH2 0x3E49 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x846 PUSH2 0x18A4 JUMP JUMPDEST PUSH2 0x84F DUP2 PUSH2 0x192B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x8DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D4 SWAP1 PUSH2 0x3EB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E9 DUP3 DUP3 PUSH1 0x1 PUSH2 0x194D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x9AD JUMPI ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6DD0419 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x928 JUMPI PUSH2 0x927 PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x943 JUMPI PUSH2 0x942 PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x968 SWAP3 SWAP2 SWAP1 PUSH2 0x3F04 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x982 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x996 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0x9A5 SWAP1 PUSH2 0x3F5C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8F0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x9BE PUSH2 0x187C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x9CF SWAP1 PUSH2 0x3FD3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9FB SWAP1 PUSH2 0x3FD3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA48 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA1D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA48 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA2B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA5D PUSH2 0x18A4 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAB9 PUSH2 0x19F4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD SLOAD SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB67 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB5E SWAP1 PUSH2 0x4076 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 PUSH2 0xB85 DUP5 PUSH2 0x1367 JUMP JUMPDEST PUSH2 0xB8F SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST GT ISZERO PUSH2 0xBD0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC7 SWAP1 PUSH2 0x4116 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC1E PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1A1C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 ISZERO ISZERO PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x24D7806C CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCD4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCF8 SWAP2 SWAP1 PUSH2 0x414B JUMP JUMPDEST PUSH2 0xD37 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD2E SWAP1 PUSH2 0x3EB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD44 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1AB5 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xDB7 JUMPI DUP2 MLOAD DUP4 MLOAD PUSH1 0x40 MLOAD PUSH32 0x5B05999100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDAE SWAP3 SWAP2 SWAP1 PUSH2 0x4178 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xDD4 JUMPI PUSH2 0xDD3 PUSH2 0x3433 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE02 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xE6F JUMPI PUSH2 0xE3F PUSH2 0xE27 DUP3 DUP8 PUSH2 0x1B5D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xE3A DUP4 DUP8 PUSH2 0x1B71 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x798 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xE52 JUMPI PUSH2 0xE51 PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 PUSH2 0xE68 SWAP1 PUSH2 0x3F5C JUMP JUMPDEST SWAP1 POP PUSH2 0xE08 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xE82 PUSH2 0x1B85 JUMP JUMPDEST PUSH2 0xE8B DUP3 PUSH2 0x1C6B JUMP JUMPDEST PUSH2 0xE95 DUP3 DUP3 PUSH2 0x1C76 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xEA5 DUP4 PUSH2 0x1367 JUMP JUMPDEST GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB7 PUSH2 0x1D95 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xEE8 PUSH2 0x18A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0xF4A PUSH2 0x18A4 JUMP JUMPDEST PUSH2 0xF54 PUSH1 0x0 PUSH2 0x1E1C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF94 PUSH2 0x1EF3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x104C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1043 SWAP1 PUSH2 0x3EB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SUB PUSH2 0x108F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1086 SWAP1 PUSH2 0x41ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x10EF DUP3 DUP3 PUSH2 0x1F1B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x352E302E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1136 PUSH2 0x1F31 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1184 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x11B9 JUMPI POP PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x11C7 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x11FE JUMPI PUSH1 0x40 MLOAD PUSH32 0xF92EE8A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 ISZERO PUSH2 0x124E JUMPI PUSH1 0x1 DUP6 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x1256 PUSH2 0x1F59 JUMP JUMPDEST PUSH2 0x125F DUP9 PUSH2 0x1F63 JUMP JUMPDEST PUSH2 0x1267 PUSH2 0x1F77 JUMP JUMPDEST PUSH2 0x1270 DUP7 PUSH2 0x192B JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x1300 JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1294 JUMPI PUSH2 0x1293 PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x12F8 SWAP1 PUSH2 0x3F5C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1273 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x135D JUMPI PUSH1 0x0 DUP6 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x1354 SWAP2 SWAP1 PUSH2 0x4266 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1372 PUSH2 0x19F4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x141D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1414 SWAP1 PUSH2 0x3EB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3E8 DUP2 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x143F SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST GT ISZERO PUSH2 0x1480 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1477 SWAP1 PUSH2 0x42F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x149F SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1545 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x153C SWAP1 PUSH2 0x3EB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x15E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15DE SWAP1 PUSH2 0x435F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 PUSH2 0x1605 DUP5 PUSH2 0x1367 JUMP JUMPDEST PUSH2 0x160F SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST GT ISZERO PUSH2 0x1650 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1647 SWAP1 PUSH2 0x4116 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x169E PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1A1C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x16FE JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x170B JUMP JUMPDEST PUSH2 0x1708 DUP4 DUP4 PUSH2 0x1F81 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x24D7806C CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x174A SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1767 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x178B SWAP2 SWAP1 PUSH2 0x414B JUMP JUMPDEST PUSH2 0x17CA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17C1 SWAP1 PUSH2 0x3EB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x17D7 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2023 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x17E6 PUSH2 0x18A4 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1858 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x184F SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1861 DUP2 PUSH2 0x1E1C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x88BE536D5240C274A3B1D3A1BE54482FD9CAA294F08C62A7CDE569F49A3C4500 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x18AC PUSH2 0x20CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18CA PUSH2 0xF89 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1929 JUMPI PUSH2 0x18ED PUSH2 0x20CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1920 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1935 PUSH2 0x187C JUMP JUMPDEST SWAP1 POP DUP2 DUP2 PUSH1 0x2 ADD SWAP1 DUP2 PUSH2 0x1948 SWAP2 SWAP1 PUSH2 0x4521 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x19BF JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1A8351400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19B6 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x19CC DUP5 DUP5 PUSH2 0x20D3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x19ED DUP6 PUSH1 0x0 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2103 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4A593662EE04D27B6A00EBB31BE7FE0C102C2ADE82A7C5D764F2DF05DC4E2800 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1A8E JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A85 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A9B DUP6 DUP6 PUSH2 0x20D3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1AAD PUSH1 0x0 DUP8 DUP5 DUP5 DUP8 PUSH2 0x2103 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ABF PUSH2 0x20CB JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1B04 JUMPI POP PUSH2 0x1B02 DUP7 DUP3 PUSH2 0x16A2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1B48 JUMPI DUP1 DUP7 PUSH1 0x40 MLOAD PUSH32 0xE237D92200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B3F SWAP3 SWAP2 SWAP1 PUSH2 0x45F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1B55 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x21B5 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MUL PUSH1 0x20 DUP5 ADD ADD MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MUL PUSH1 0x20 DUP5 ADD ADD MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1C32 JUMPI POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C19 PUSH2 0x22AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1C69 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE07C8DBA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x1C73 PUSH2 0x18A4 JUMP JUMPDEST POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1CDE JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CDB SWAP2 SWAP1 PUSH2 0x4648 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1D1F JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x4C9C8CE300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D16 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL DUP2 EQ PUSH2 0x1D86 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xAA1D49A400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D7D SWAP2 SWAP1 PUSH2 0x3BAA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D90 DUP4 DUP4 PUSH2 0x2304 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1E1A JUMPI PUSH1 0x40 MLOAD PUSH32 0xE07C8DBA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E26 PUSH2 0x1EF3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1F2D PUSH2 0x1F26 PUSH2 0x20CB JUMP JUMPDEST DUP4 DUP4 PUSH2 0x2377 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1F61 PUSH2 0x24F6 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1F6B PUSH2 0x24F6 JUMP JUMPDEST PUSH2 0x1F74 DUP2 PUSH2 0x2536 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1F7F PUSH2 0x24F6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F8C PUSH2 0x187C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202D PUSH2 0x20CB JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2072 JUMPI POP PUSH2 0x2070 DUP7 DUP3 PUSH2 0x16A2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x20B6 JUMPI DUP1 DUP7 PUSH1 0x40 MLOAD PUSH32 0xE237D92200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20AD SWAP3 SWAP2 SWAP1 PUSH2 0x45F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x20C3 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x25BC JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH1 0x1 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 MSTORE SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x210F DUP6 DUP6 DUP6 DUP6 PUSH2 0x26C7 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x21AE JUMPI PUSH1 0x0 PUSH2 0x214D PUSH2 0x20CB JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP5 MLOAD SUB PUSH2 0x219D JUMPI PUSH1 0x0 PUSH2 0x216E PUSH1 0x0 DUP7 PUSH2 0x1B71 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2186 PUSH1 0x0 DUP7 PUSH2 0x1B71 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x2196 DUP4 DUP10 DUP10 DUP6 DUP6 DUP10 PUSH2 0x2893 JUMP JUMPDEST POP POP PUSH2 0x21AC JUMP JUMPDEST PUSH2 0x21AB DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2A47 JUMP JUMPDEST JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2227 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x221E SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2299 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1A8351400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2290 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x22A6 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2103 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22DB PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x2BFB JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x230D DUP3 PUSH2 0x2C05 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x236A JUMPI PUSH2 0x2364 DUP3 DUP3 PUSH2 0x2CD2 JUMP JUMPDEST POP PUSH2 0x2373 JUMP JUMPDEST PUSH2 0x2372 PUSH2 0x2D56 JUMP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2381 PUSH2 0x187C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x23F5 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xCED3E10000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23EC SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP5 PUSH1 0x40 MLOAD PUSH2 0x24E8 SWAP2 SWAP1 PUSH2 0x33FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x24FE PUSH2 0x2D93 JUMP JUMPDEST PUSH2 0x2534 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7E6BCF800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x253E PUSH2 0x24F6 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x25B0 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A7 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x25B9 DUP2 PUSH2 0x1E1C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x262E JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2625 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x26A0 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1A8351400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2697 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x26AD DUP6 DUP6 PUSH2 0x20D3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x26BE DUP8 DUP8 DUP5 DUP5 DUP8 PUSH2 0x2103 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26D1 PUSH2 0x19F4 JUMP JUMPDEST SWAP1 POP PUSH2 0x26DF DUP6 DUP6 DUP6 DUP6 PUSH2 0x2DB3 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x27C3 JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x27A5 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2735 JUMPI PUSH2 0x2734 PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2759 JUMPI PUSH2 0x2758 PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x277E SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP4 PUSH2 0x2791 SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST SWAP3 POP POP DUP1 PUSH2 0x279E SWAP1 PUSH2 0x3F5C JUMP JUMPDEST SWAP1 POP PUSH2 0x2717 JUMP JUMPDEST POP DUP1 DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x27BA SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x288C JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2877 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2819 JUMPI PUSH2 0x2818 PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x283D JUMPI PUSH2 0x283C PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP4 ADD SWAP3 POP POP DUP1 PUSH2 0x2870 SWAP1 PUSH2 0x3F5C JUMP JUMPDEST SWAP1 POP PUSH2 0x27FB JUMP JUMPDEST POP DUP1 DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x2A3F JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF23A6E61 DUP8 DUP8 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28F4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x46CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2930 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x292D SWAP2 SWAP1 PUSH2 0x4739 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x29B4 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2960 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2965 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x29AC JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29A3 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x2A3D JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A34 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x2BF3 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBC197C81 DUP8 DUP8 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AA8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4766 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2AE4 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2AE1 SWAP2 SWAP1 PUSH2 0x4739 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2B68 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2B14 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2B19 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x2B60 JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B57 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x2BF1 JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2BE8 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE SUB PUSH2 0x2C61 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x4C9C8CE300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C58 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x2C8E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x2BFB JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x2CFC SWAP2 SWAP1 PUSH2 0x480A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2D37 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2D3C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2D4C DUP6 DUP4 DUP4 PUSH2 0x3177 JUMP JUMPDEST SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT ISZERO PUSH2 0x2D91 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB398979F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D9D PUSH2 0x1F31 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DBD PUSH2 0x187C JUMP JUMPDEST SWAP1 POP DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x2E09 JUMPI DUP3 MLOAD DUP3 MLOAD PUSH1 0x40 MLOAD PUSH32 0x5B05999100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E00 SWAP3 SWAP2 SWAP1 PUSH2 0x4178 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2E13 PUSH2 0x20CB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x3031 JUMPI PUSH1 0x0 PUSH2 0x2E36 DUP3 DUP8 PUSH2 0x1B71 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2E4D DUP4 DUP8 PUSH2 0x1B71 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2F80 JUMPI PUSH1 0x0 DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x2F25 JUMPI DUP10 DUP2 DUP4 DUP6 PUSH1 0x40 MLOAD PUSH32 0x3DEE4C500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F1C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4821 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x301E JUMPI DUP1 DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3016 SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST POP POP DUP1 PUSH2 0x302A SWAP1 PUSH2 0x3F5C JUMP JUMPDEST SWAP1 POP PUSH2 0x2E18 JUMP JUMPDEST POP PUSH1 0x1 DUP5 MLOAD SUB PUSH2 0x30F0 JUMPI PUSH1 0x0 PUSH2 0x3051 PUSH1 0x0 DUP7 PUSH2 0x1B71 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3069 PUSH1 0x0 DUP7 PUSH2 0x1B71 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x30E1 SWAP3 SWAP2 SWAP1 PUSH2 0x4178 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH2 0x316F JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x3166 SWAP3 SWAP2 SWAP1 PUSH2 0x4866 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x318C JUMPI PUSH2 0x3187 DUP3 PUSH2 0x3206 JUMP JUMPDEST PUSH2 0x31FE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD EQ DUP1 ISZERO PUSH2 0x31B4 JUMPI POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x31F6 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x31ED SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP PUSH2 0x31FF JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x3219 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x328A DUP3 PUSH2 0x325F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x329A DUP2 PUSH2 0x327F JUMP JUMPDEST DUP2 EQ PUSH2 0x32A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x32B7 DUP2 PUSH2 0x3291 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32D0 DUP2 PUSH2 0x32BD JUMP JUMPDEST DUP2 EQ PUSH2 0x32DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x32ED DUP2 PUSH2 0x32C7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x330A JUMPI PUSH2 0x3309 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3318 DUP6 DUP3 DUP7 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3329 DUP6 DUP3 DUP7 ADD PUSH2 0x32DE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x333C DUP2 PUSH2 0x32BD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3357 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3333 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3392 DUP2 PUSH2 0x335D JUMP JUMPDEST DUP2 EQ PUSH2 0x339D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x33AF DUP2 PUSH2 0x3389 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33CB JUMPI PUSH2 0x33CA PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x33D9 DUP5 DUP3 DUP6 ADD PUSH2 0x33A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33F7 DUP2 PUSH2 0x33E2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3412 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x33EE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x346B DUP3 PUSH2 0x3422 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x348A JUMPI PUSH2 0x3489 PUSH2 0x3433 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x349D PUSH2 0x324B JUMP JUMPDEST SWAP1 POP PUSH2 0x34A9 DUP3 DUP3 PUSH2 0x3462 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x34C9 JUMPI PUSH2 0x34C8 PUSH2 0x3433 JUMP JUMPDEST JUMPDEST PUSH2 0x34D2 DUP3 PUSH2 0x3422 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3501 PUSH2 0x34FC DUP5 PUSH2 0x34AE JUMP JUMPDEST PUSH2 0x3493 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x351D JUMPI PUSH2 0x351C PUSH2 0x341D JUMP JUMPDEST JUMPDEST PUSH2 0x3528 DUP5 DUP3 DUP6 PUSH2 0x34DF JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3545 JUMPI PUSH2 0x3544 PUSH2 0x3418 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3555 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x34EE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3574 JUMPI PUSH2 0x3573 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3592 JUMPI PUSH2 0x3591 PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x359E DUP5 DUP3 DUP6 ADD PUSH2 0x3530 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x35C2 JUMPI PUSH2 0x35C1 PUSH2 0x3433 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x35EB PUSH2 0x35E6 DUP5 PUSH2 0x35A7 JUMP JUMPDEST PUSH2 0x3493 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x360E JUMPI PUSH2 0x360D PUSH2 0x35D3 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3637 JUMPI DUP1 PUSH2 0x3623 DUP9 DUP3 PUSH2 0x32A8 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3610 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3656 JUMPI PUSH2 0x3655 PUSH2 0x3418 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3666 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x35D8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x368A JUMPI PUSH2 0x3689 PUSH2 0x3433 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36AE PUSH2 0x36A9 DUP5 PUSH2 0x366F JUMP JUMPDEST PUSH2 0x3493 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x36D1 JUMPI PUSH2 0x36D0 PUSH2 0x35D3 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x36FA JUMPI DUP1 PUSH2 0x36E6 DUP9 DUP3 PUSH2 0x32DE JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x36D3 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3719 JUMPI PUSH2 0x3718 PUSH2 0x3418 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3729 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x369B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3749 JUMPI PUSH2 0x3748 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3767 JUMPI PUSH2 0x3766 PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x3773 DUP6 DUP3 DUP7 ADD PUSH2 0x3641 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3794 JUMPI PUSH2 0x3793 PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x37A0 DUP6 DUP3 DUP7 ADD PUSH2 0x3704 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37C0 JUMPI PUSH2 0x37BF PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x37CE DUP5 DUP3 DUP6 ADD PUSH2 0x32DE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3811 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x37F6 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3828 DUP3 PUSH2 0x37D7 JUMP JUMPDEST PUSH2 0x3832 DUP2 DUP6 PUSH2 0x37E2 JUMP JUMPDEST SWAP4 POP PUSH2 0x3842 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37F3 JUMP JUMPDEST PUSH2 0x384B DUP2 PUSH2 0x3422 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3870 DUP2 DUP5 PUSH2 0x381D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x388E JUMPI PUSH2 0x388D PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x389C DUP5 DUP3 DUP6 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38BC JUMPI PUSH2 0x38BB PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x38CA DUP6 DUP3 DUP7 ADD PUSH2 0x32DE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x38DB DUP6 DUP3 DUP7 ADD PUSH2 0x32DE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3900 JUMPI PUSH2 0x38FF PUSH2 0x3433 JUMP JUMPDEST JUMPDEST PUSH2 0x3909 DUP3 PUSH2 0x3422 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3929 PUSH2 0x3924 DUP5 PUSH2 0x38E5 JUMP JUMPDEST PUSH2 0x3493 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x3945 JUMPI PUSH2 0x3944 PUSH2 0x341D JUMP JUMPDEST JUMPDEST PUSH2 0x3950 DUP5 DUP3 DUP6 PUSH2 0x34DF JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x396D JUMPI PUSH2 0x396C PUSH2 0x3418 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x397D DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3916 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x39A2 JUMPI PUSH2 0x39A1 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x39B0 DUP9 DUP3 DUP10 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x39C1 DUP9 DUP3 DUP10 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39E2 JUMPI PUSH2 0x39E1 PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x39EE DUP9 DUP3 DUP10 ADD PUSH2 0x3704 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A0F JUMPI PUSH2 0x3A0E PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x3A1B DUP9 DUP3 DUP10 ADD PUSH2 0x3704 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A3C JUMPI PUSH2 0x3A3B PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x3A48 DUP9 DUP3 DUP10 ADD PUSH2 0x3958 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3A8A DUP2 PUSH2 0x32BD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A9C DUP4 DUP4 PUSH2 0x3A81 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AC0 DUP3 PUSH2 0x3A55 JUMP JUMPDEST PUSH2 0x3ACA DUP2 DUP6 PUSH2 0x3A60 JUMP JUMPDEST SWAP4 POP PUSH2 0x3AD5 DUP4 PUSH2 0x3A71 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3B06 JUMPI DUP2 MLOAD PUSH2 0x3AED DUP9 DUP3 PUSH2 0x3A90 JUMP JUMPDEST SWAP8 POP PUSH2 0x3AF8 DUP4 PUSH2 0x3AA8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3AD9 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B2D DUP2 DUP5 PUSH2 0x3AB5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B4C JUMPI PUSH2 0x3B4B PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3B5A DUP6 DUP3 DUP7 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B7B JUMPI PUSH2 0x3B7A PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x3B87 DUP6 DUP3 DUP7 ADD PUSH2 0x3958 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3BA4 DUP2 PUSH2 0x3B91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3BBF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3B9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3BCE DUP2 PUSH2 0x327F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3BE9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3BC5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3C06 JUMPI PUSH2 0x3C05 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3C14 DUP6 DUP3 DUP7 ADD PUSH2 0x32DE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3C25 DUP6 DUP3 DUP7 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x3C38 DUP2 PUSH2 0x33E2 JUMP JUMPDEST DUP2 EQ PUSH2 0x3C43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3C55 DUP2 PUSH2 0x3C2F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3C72 JUMPI PUSH2 0x3C71 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3C80 DUP6 DUP3 DUP7 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3C91 DUP6 DUP3 DUP7 ADD PUSH2 0x3C46 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3CB4 JUMPI PUSH2 0x3CB3 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3CC2 DUP7 DUP3 DUP8 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CE3 JUMPI PUSH2 0x3CE2 PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x3CEF DUP7 DUP3 DUP8 ADD PUSH2 0x3641 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D10 JUMPI PUSH2 0x3D0F PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x3D1C DUP7 DUP3 DUP8 ADD PUSH2 0x3530 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3D3D JUMPI PUSH2 0x3D3C PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3D4B DUP6 DUP3 DUP7 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3D5C DUP6 DUP3 DUP7 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3D82 JUMPI PUSH2 0x3D81 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3D90 DUP9 DUP3 DUP10 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x3DA1 DUP9 DUP3 DUP10 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x3DB2 DUP9 DUP3 DUP10 ADD PUSH2 0x32DE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x3DC3 DUP9 DUP3 DUP10 ADD PUSH2 0x32DE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DE4 JUMPI PUSH2 0x3DE3 PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x3DF0 DUP9 DUP3 DUP10 ADD PUSH2 0x3958 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH32 0x5468697320697320612064756D6D79206572726F720000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E33 PUSH1 0x15 DUP4 PUSH2 0x37E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3E3E DUP3 PUSH2 0x3DFD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3E62 DUP2 PUSH2 0x3E26 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6E6F742061646D696E0000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E9F PUSH1 0x9 DUP4 PUSH2 0x37E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3EAA DUP3 PUSH2 0x3E69 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3ECE DUP2 PUSH2 0x3E92 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3F19 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3BC5 JUMP JUMPDEST PUSH2 0x3F26 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3333 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3F67 DUP3 PUSH2 0x32BD JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3F99 JUMPI PUSH2 0x3F98 PUSH2 0x3F2D JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3FEB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3FFE JUMPI PUSH2 0x3FFD PUSH2 0x3FA4 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x73656E646572206973206E6F74206F776E657220666F72207468697320746F6B PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x656E000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4060 PUSH1 0x22 DUP4 PUSH2 0x37E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x406B DUP3 PUSH2 0x4004 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x408F DUP2 PUSH2 0x4053 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40A1 DUP3 PUSH2 0x32BD JUMP JUMPDEST SWAP2 POP PUSH2 0x40AC DUP4 PUSH2 0x32BD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x40C4 JUMPI PUSH2 0x40C3 PUSH2 0x3F2D JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x6E657720737570706C7920776F756C6420657863656564206D61780000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4100 PUSH1 0x1B DUP4 PUSH2 0x37E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x410B DUP3 PUSH2 0x40CA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x412F DUP2 PUSH2 0x40F3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4145 DUP2 PUSH2 0x3C2F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4161 JUMPI PUSH2 0x4160 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x416F DUP5 DUP3 DUP6 ADD PUSH2 0x4136 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x418D PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3333 JUMP JUMPDEST PUSH2 0x419A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3333 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x30206E6F7420616C6C6F77656400000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41D7 PUSH1 0xD DUP4 PUSH2 0x37E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x41E2 DUP3 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4206 DUP2 PUSH2 0x41CA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4250 PUSH2 0x424B PUSH2 0x4246 DUP5 PUSH2 0x420D JUMP JUMPDEST PUSH2 0x422B JUMP JUMPDEST PUSH2 0x4217 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4260 DUP2 PUSH2 0x4235 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x427B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4257 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x6E6577206D6178696D756D20737570706C7920776F756C642065786365656420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x3130303000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42DD PUSH1 0x24 DUP4 PUSH2 0x37E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x42E8 DUP3 PUSH2 0x4281 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x430C DUP2 PUSH2 0x42D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x617274697374206E6F742073657420666F72207468697320746F6B656E000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4349 PUSH1 0x1D DUP4 PUSH2 0x37E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x4354 DUP3 PUSH2 0x4313 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4378 DUP2 PUSH2 0x433C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x43E1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x43A4 JUMP JUMPDEST PUSH2 0x43EB DUP7 DUP4 PUSH2 0x43A4 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x441E PUSH2 0x4419 PUSH2 0x4414 DUP5 PUSH2 0x32BD JUMP JUMPDEST PUSH2 0x422B JUMP JUMPDEST PUSH2 0x32BD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4438 DUP4 PUSH2 0x4403 JUMP JUMPDEST PUSH2 0x444C PUSH2 0x4444 DUP3 PUSH2 0x4425 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x43B1 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x4461 PUSH2 0x4454 JUMP JUMPDEST PUSH2 0x446C DUP2 DUP5 DUP5 PUSH2 0x442F JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4490 JUMPI PUSH2 0x4485 PUSH1 0x0 DUP3 PUSH2 0x4459 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x4472 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x44D5 JUMPI PUSH2 0x44A6 DUP2 PUSH2 0x437F JUMP JUMPDEST PUSH2 0x44AF DUP5 PUSH2 0x4394 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x44BE JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x44D2 PUSH2 0x44CA DUP6 PUSH2 0x4394 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x4471 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44F8 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x44DA JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4511 DUP4 DUP4 PUSH2 0x44E7 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x452A DUP3 PUSH2 0x37D7 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4543 JUMPI PUSH2 0x4542 PUSH2 0x3433 JUMP JUMPDEST JUMPDEST PUSH2 0x454D DUP3 SLOAD PUSH2 0x3FD3 JUMP JUMPDEST PUSH2 0x4558 DUP3 DUP3 DUP6 PUSH2 0x4494 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x458B JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x4579 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x4583 DUP6 DUP3 PUSH2 0x4505 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x45EB JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x4599 DUP7 PUSH2 0x437F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x45C1 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x459C JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x45DE JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x45DA PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x44E7 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x4608 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3BC5 JUMP JUMPDEST PUSH2 0x4615 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3BC5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x4625 DUP2 PUSH2 0x3B91 JUMP JUMPDEST DUP2 EQ PUSH2 0x4630 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4642 DUP2 PUSH2 0x461C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x465E JUMPI PUSH2 0x465D PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x466C DUP5 DUP3 DUP6 ADD PUSH2 0x4633 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x469C DUP3 PUSH2 0x4675 JUMP JUMPDEST PUSH2 0x46A6 DUP2 DUP6 PUSH2 0x4680 JUMP JUMPDEST SWAP4 POP PUSH2 0x46B6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37F3 JUMP JUMPDEST PUSH2 0x46BF DUP2 PUSH2 0x3422 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x46DF PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3BC5 JUMP JUMPDEST PUSH2 0x46EC PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3BC5 JUMP JUMPDEST PUSH2 0x46F9 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x3333 JUMP JUMPDEST PUSH2 0x4706 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x3333 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x4718 DUP2 DUP5 PUSH2 0x4691 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4733 DUP2 PUSH2 0x3389 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x474F JUMPI PUSH2 0x474E PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x475D DUP5 DUP3 DUP6 ADD PUSH2 0x4724 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x477B PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3BC5 JUMP JUMPDEST PUSH2 0x4788 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3BC5 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x479A DUP2 DUP7 PUSH2 0x3AB5 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x47AE DUP2 DUP6 PUSH2 0x3AB5 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x47C2 DUP2 DUP5 PUSH2 0x4691 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x47E4 DUP3 PUSH2 0x4675 JUMP JUMPDEST PUSH2 0x47EE DUP2 DUP6 PUSH2 0x47CE JUMP JUMPDEST SWAP4 POP PUSH2 0x47FE DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37F3 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4816 DUP3 DUP5 PUSH2 0x47D9 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x4836 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x3BC5 JUMP JUMPDEST PUSH2 0x4843 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x3333 JUMP JUMPDEST PUSH2 0x4850 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3333 JUMP JUMPDEST PUSH2 0x485D PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x3333 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4880 DUP2 DUP6 PUSH2 0x3AB5 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4894 DUP2 DUP5 PUSH2 0x3AB5 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE PC 0xCD 0xC 0xC 0x28 ADDRESS DUP16 0xD9 SWAP2 0xD3 DUP3 PUSH13 0xABEED5C38182E9FB2B173EDF2E ADD SWAP8 0xB3 SHR RETURN COINBASE PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"95:225:24:-:0;;;1171:4:2;1128:48;;;;;;;;;95:225:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@UPGRADE_INTERFACE_VERSION_472":{"entryPoint":4339,"id":472,"parameterSlots":0,"returnSlots":0},"@__ERC1155Supply_init_1797":{"entryPoint":8025,"id":1797,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_54":{"entryPoint":8035,"id":54,"parameterSlots":1,"returnSlots":0},"@__Ownable_init_unchained_81":{"entryPoint":9526,"id":81,"parameterSlots":1,"returnSlots":0},"@__UUPSUpgradeable_init_502":{"entryPoint":8055,"id":502,"parameterSlots":0,"returnSlots":0},"@_asSingletonArrays_1760":{"entryPoint":8403,"id":1760,"parameterSlots":2,"returnSlots":2},"@_authorizeUpgrade_5462":{"entryPoint":7275,"id":5462,"parameterSlots":1,"returnSlots":0},"@_burn_1519":{"entryPoint":6477,"id":1519,"parameterSlots":3,"returnSlots":0},"@_checkInitializing_370":{"entryPoint":9462,"id":370,"parameterSlots":0,"returnSlots":0},"@_checkNonPayable_2537":{"entryPoint":11606,"id":2537,"parameterSlots":0,"returnSlots":0},"@_checkNotDelegated_578":{"entryPoint":7573,"id":578,"parameterSlots":0,"returnSlots":0},"@_checkOwner_122":{"entryPoint":6308,"id":122,"parameterSlots":0,"returnSlots":0},"@_checkProxy_562":{"entryPoint":7045,"id":562,"parameterSlots":0,"returnSlots":0},"@_doSafeBatchTransferAcceptanceCheck_1744":{"entryPoint":10823,"id":1744,"parameterSlots":6,"returnSlots":0},"@_doSafeTransferAcceptanceCheck_1674":{"entryPoint":10387,"id":1674,"parameterSlots":6,"returnSlots":0},"@_getERC1155Storage_698":{"entryPoint":6268,"id":698,"parameterSlots":0,"returnSlots":1},"@_getERC1155SupplyStorage_1791":{"entryPoint":6644,"id":1791,"parameterSlots":0,"returnSlots":1},"@_getInitializableStorage_447":{"entryPoint":7985,"id":447,"parameterSlots":0,"returnSlots":1},"@_getOwnableStorage_25":{"entryPoint":7923,"id":25,"parameterSlots":0,"returnSlots":1},"@_isInitializing_438":{"entryPoint":11667,"id":438,"parameterSlots":0,"returnSlots":1},"@_mint_1428":{"entryPoint":6684,"id":1428,"parameterSlots":4,"returnSlots":0},"@_msgSender_2018":{"entryPoint":8395,"id":2018,"parameterSlots":0,"returnSlots":1},"@_revert_3235":{"entryPoint":12806,"id":3235,"parameterSlots":1,"returnSlots":0},"@_safeBatchTransferFrom_1357":{"entryPoint":8629,"id":1357,"parameterSlots":5,"returnSlots":0},"@_safeTransferFrom_1302":{"entryPoint":9660,"id":1302,"parameterSlots":5,"returnSlots":0},"@_setApprovalForAll_1606":{"entryPoint":9079,"id":1606,"parameterSlots":3,"returnSlots":0},"@_setImplementation_2323":{"entryPoint":11269,"id":2323,"parameterSlots":1,"returnSlots":0},"@_setURI_1376":{"entryPoint":6443,"id":1376,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_193":{"entryPoint":7708,"id":193,"parameterSlots":1,"returnSlots":0},"@_updateWithAcceptanceCheck_1236":{"entryPoint":8451,"id":1236,"parameterSlots":5,"returnSlots":0},"@_update_1160":{"entryPoint":11699,"id":1160,"parameterSlots":4,"returnSlots":0},"@_update_1989":{"entryPoint":9927,"id":1989,"parameterSlots":4,"returnSlots":0},"@_upgradeToAndCallUUPS_629":{"entryPoint":7286,"id":629,"parameterSlots":2,"returnSlots":0},"@addAdmin_5154":{"entryPoint":3808,"id":5154,"parameterSlots":1,"returnSlots":0},"@adminBurnBatch_5320":{"entryPoint":2285,"id":5320,"parameterSlots":2,"returnSlots":0},"@adminBurn_5285":{"entryPoint":2130,"id":5285,"parameterSlots":2,"returnSlots":0},"@adminMint_5260":{"entryPoint":5306,"id":5260,"parameterSlots":2,"returnSlots":0},"@admins_4987":{"entryPoint":3403,"id":4987,"parameterSlots":0,"returnSlots":0},"@artistAddresses_4991":{"entryPoint":3926,"id":4991,"parameterSlots":0,"returnSlots":0},"@balanceOfBatch_866":{"entryPoint":3435,"id":866,"parameterSlots":2,"returnSlots":1},"@balanceOf_796":{"entryPoint":1944,"id":796,"parameterSlots":2,"returnSlots":1},"@exists_1854":{"entryPoint":3737,"id":1854,"parameterSlots":1,"returnSlots":1},"@functionDelegateCall_3155":{"entryPoint":11474,"id":3155,"parameterSlots":2,"returnSlots":1},"@getAddressSlot_3451":{"entryPoint":11259,"id":3451,"parameterSlots":1,"returnSlots":1},"@getImplementation_2296":{"entryPoint":8877,"id":2296,"parameterSlots":0,"returnSlots":1},"@increaseTokenSupplyLimit_5111":{"entryPoint":5010,"id":5111,"parameterSlots":2,"returnSlots":0},"@init_5043":{"entryPoint":4396,"id":5043,"parameterSlots":3,"returnSlots":0},"@isAdmin_5139":{"entryPoint":3106,"id":5139,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_5453":{"entryPoint":5794,"id":5453,"parameterSlots":2,"returnSlots":1},"@isApprovedForAll_906":{"entryPoint":8065,"id":906,"parameterSlots":2,"returnSlots":1},"@mint_5209":{"entryPoint":2758,"id":5209,"parameterSlots":2,"returnSlots":0},"@owner_105":{"entryPoint":3977,"id":105,"parameterSlots":0,"returnSlots":1},"@proxiableUUID_520":{"entryPoint":3757,"id":520,"parameterSlots":0,"returnSlots":1},"@removeAdmin_5168":{"entryPoint":2645,"id":5168,"parameterSlots":1,"returnSlots":0},"@renounceOwnership_136":{"entryPoint":3906,"id":136,"parameterSlots":0,"returnSlots":0},"@safeBatchTransferFrom_5406":{"entryPoint":3198,"id":5406,"parameterSlots":5,"returnSlots":0},"@safeBatchTransferFrom_996":{"entryPoint":6837,"id":996,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_5370":{"entryPoint":5905,"id":5370,"parameterSlots":5,"returnSlots":0},"@safeTransferFrom_950":{"entryPoint":8227,"id":950,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_5336":{"entryPoint":4325,"id":5336,"parameterSlots":2,"returnSlots":0},"@setApprovalForAll_882":{"entryPoint":7963,"id":882,"parameterSlots":2,"returnSlots":0},"@setArtistAddress_5073":{"entryPoint":4033,"id":5073,"parameterSlots":2,"returnSlots":0},"@setURI_5124":{"entryPoint":2110,"id":5124,"parameterSlots":1,"returnSlots":0},"@supportsInterface_5482":{"entryPoint":2049,"id":5482,"parameterSlots":1,"returnSlots":1},"@tokenSupplyLimits_4995":{"entryPoint":6244,"id":4995,"parameterSlots":0,"returnSlots":0},"@totalSupply_1823":{"entryPoint":4967,"id":1823,"parameterSlots":1,"returnSlots":1},"@totalSupply_1839":{"entryPoint":2734,"id":1839,"parameterSlots":0,"returnSlots":1},"@transferOwnership_164":{"entryPoint":6110,"id":164,"parameterSlots":1,"returnSlots":0},"@unsafeMemoryAccess_3405":{"entryPoint":7025,"id":3405,"parameterSlots":2,"returnSlots":1},"@unsafeMemoryAccess_3418":{"entryPoint":7005,"id":3418,"parameterSlots":2,"returnSlots":1},"@upgradeToAndCall_2357":{"entryPoint":8964,"id":2357,"parameterSlots":2,"returnSlots":0},"@upgradeToAndCall_540":{"entryPoint":3706,"id":540,"parameterSlots":2,"returnSlots":0},"@uri_772":{"entryPoint":2482,"id":772,"parameterSlots":1,"returnSlots":1},"@verifyCallResultFromTarget_3195":{"entryPoint":12663,"id":3195,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":13784,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":13979,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":14614,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":13550,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":12968,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":13889,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":14084,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":15430,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":16694,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":17971,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":13216,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":18212,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":14680,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr":{"entryPoint":13616,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":13022,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":14456,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":15654,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr":{"entryPoint":14726,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr":{"entryPoint":15718,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_array$_t_address_$dyn_memory_ptrt_string_memory_ptr":{"entryPoint":15515,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_bool":{"entryPoint":15451,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":15157,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":13043,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":14130,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":16715,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":17992,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":13237,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":18233,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":13662,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":14250,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":15343,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":14501,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encodeUpdatedPos_t_uint256_to_t_uint256":{"entryPoint":14992,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":15301,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":15029,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":13294,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":15259,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":18065,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":18393,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_rational_1_by_1_to_t_uint64_fromStack":{"entryPoint":16983,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":14365,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2_to_t_string_memory_ptr_fromStack":{"entryPoint":16842,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51_to_t_string_memory_ptr_fromStack":{"entryPoint":17212,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae_to_t_string_memory_ptr_fromStack":{"entryPoint":17104,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d_to_t_string_memory_ptr_fromStack":{"entryPoint":15910,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483_to_t_string_memory_ptr_fromStack":{"entryPoint":16627,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75_to_t_string_memory_ptr_fromStack":{"entryPoint":16467,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283_to_t_string_memory_ptr_fromStack":{"entryPoint":16018,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":14977,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":13107,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":18442,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":15316,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":17907,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":18278,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":18122,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":16132,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":18465,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":15123,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":18534,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":13309,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":15274,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed":{"entryPoint":16998,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14422,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16877,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17247,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":17139,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15945,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16662,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16502,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":16053,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":13122,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":16760,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_memory":{"entryPoint":13459,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":12875,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":13735,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":13935,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":14565,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":13486,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":14961,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":17279,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":14933,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":18037,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":14295,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":15016,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":14944,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":18048,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":18382,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":14306,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":16534,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":17556,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":12927,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":13282,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":15249,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":13149,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":16909,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":12895,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":12989,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":16919,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":17521,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_rational_1_by_1_to_t_uint64":{"entryPoint":16949,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":17411,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":17697,"id":null,"parameterSlots":2,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":13535,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":14323,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":17300,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":16339,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":17669,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":13410,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":16939,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":16220,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":17639,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":16173,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":16292,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":16085,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":13363,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":17445,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":13336,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":13779,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":13341,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":12890,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":12885,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":13346,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":17316,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":17626,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":17497,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2":{"entryPoint":16801,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51":{"entryPoint":17171,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae":{"entryPoint":17025,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d":{"entryPoint":15869,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483":{"entryPoint":16586,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75":{"entryPoint":16388,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283":{"entryPoint":15977,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":17329,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":17455,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":12945,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":15407,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":17948,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":13193,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":12999,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":17492,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:42579:25","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:25","statements":[{"nodeType":"YulAssignment","src":"57:19:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:25","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:25"},"nodeType":"YulFunctionCall","src":"67:9:25"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:25"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:25","type":""}],"src":"7:75:25"},{"body":{"nodeType":"YulBlock","src":"177:28:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:25"},"nodeType":"YulFunctionCall","src":"187:12:25"},"nodeType":"YulExpressionStatement","src":"187:12:25"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:25"},{"body":{"nodeType":"YulBlock","src":"300:28:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:25"},"nodeType":"YulFunctionCall","src":"310:12:25"},"nodeType":"YulExpressionStatement","src":"310:12:25"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:25"},{"body":{"nodeType":"YulBlock","src":"379:81:25","statements":[{"nodeType":"YulAssignment","src":"389:65:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:25","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:25"},"nodeType":"YulFunctionCall","src":"400:54:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:25"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:25","type":""}],"src":"334:126:25"},{"body":{"nodeType":"YulBlock","src":"511:51:25","statements":[{"nodeType":"YulAssignment","src":"521:35:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:25"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:25"},"nodeType":"YulFunctionCall","src":"532:24:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:25"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:25","type":""}],"src":"466:96:25"},{"body":{"nodeType":"YulBlock","src":"611:79:25","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:25"},"nodeType":"YulFunctionCall","src":"670:12:25"},"nodeType":"YulExpressionStatement","src":"670:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:25"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:25"},"nodeType":"YulFunctionCall","src":"641:24:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:25"},"nodeType":"YulFunctionCall","src":"631:35:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:25"},"nodeType":"YulFunctionCall","src":"624:43:25"},"nodeType":"YulIf","src":"621:63:25"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:25","type":""}],"src":"568:122:25"},{"body":{"nodeType":"YulBlock","src":"748:87:25","statements":[{"nodeType":"YulAssignment","src":"758:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"780:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"767:12:25"},"nodeType":"YulFunctionCall","src":"767:20:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"758:5:25"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"823:5:25"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"796:26:25"},"nodeType":"YulFunctionCall","src":"796:33:25"},"nodeType":"YulExpressionStatement","src":"796:33:25"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"726:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"734:3:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"742:5:25","type":""}],"src":"696:139:25"},{"body":{"nodeType":"YulBlock","src":"886:32:25","statements":[{"nodeType":"YulAssignment","src":"896:16:25","value":{"name":"value","nodeType":"YulIdentifier","src":"907:5:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"896:7:25"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"868:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"878:7:25","type":""}],"src":"841:77:25"},{"body":{"nodeType":"YulBlock","src":"967:79:25","statements":[{"body":{"nodeType":"YulBlock","src":"1024:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1033:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1036:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1026:6:25"},"nodeType":"YulFunctionCall","src":"1026:12:25"},"nodeType":"YulExpressionStatement","src":"1026:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"990:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1015:5:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"997:17:25"},"nodeType":"YulFunctionCall","src":"997:24:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"987:2:25"},"nodeType":"YulFunctionCall","src":"987:35:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"980:6:25"},"nodeType":"YulFunctionCall","src":"980:43:25"},"nodeType":"YulIf","src":"977:63:25"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"960:5:25","type":""}],"src":"924:122:25"},{"body":{"nodeType":"YulBlock","src":"1104:87:25","statements":[{"nodeType":"YulAssignment","src":"1114:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1136:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1123:12:25"},"nodeType":"YulFunctionCall","src":"1123:20:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1114:5:25"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1179:5:25"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1152:26:25"},"nodeType":"YulFunctionCall","src":"1152:33:25"},"nodeType":"YulExpressionStatement","src":"1152:33:25"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1082:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"1090:3:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1098:5:25","type":""}],"src":"1052:139:25"},{"body":{"nodeType":"YulBlock","src":"1280:391:25","statements":[{"body":{"nodeType":"YulBlock","src":"1326:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1328:77:25"},"nodeType":"YulFunctionCall","src":"1328:79:25"},"nodeType":"YulExpressionStatement","src":"1328:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1301:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"1310:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1297:3:25"},"nodeType":"YulFunctionCall","src":"1297:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"1322:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1293:3:25"},"nodeType":"YulFunctionCall","src":"1293:32:25"},"nodeType":"YulIf","src":"1290:119:25"},{"nodeType":"YulBlock","src":"1419:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1434:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1448:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1438:6:25","type":""}]},{"nodeType":"YulAssignment","src":"1463:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1498:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"1509:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1494:3:25"},"nodeType":"YulFunctionCall","src":"1494:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1518:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1473:20:25"},"nodeType":"YulFunctionCall","src":"1473:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1463:6:25"}]}]},{"nodeType":"YulBlock","src":"1546:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"1561:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"1575:2:25","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1565:6:25","type":""}]},{"nodeType":"YulAssignment","src":"1591:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1626:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"1637:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1622:3:25"},"nodeType":"YulFunctionCall","src":"1622:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1646:7:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1601:20:25"},"nodeType":"YulFunctionCall","src":"1601:53:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1591:6:25"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1242:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1253:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1265:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1273:6:25","type":""}],"src":"1197:474:25"},{"body":{"nodeType":"YulBlock","src":"1742:53:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1759:3:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1782:5:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1764:17:25"},"nodeType":"YulFunctionCall","src":"1764:24:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1752:6:25"},"nodeType":"YulFunctionCall","src":"1752:37:25"},"nodeType":"YulExpressionStatement","src":"1752:37:25"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1730:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1737:3:25","type":""}],"src":"1677:118:25"},{"body":{"nodeType":"YulBlock","src":"1899:124:25","statements":[{"nodeType":"YulAssignment","src":"1909:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1921:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"1932:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1917:3:25"},"nodeType":"YulFunctionCall","src":"1917:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1909:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1989:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2002:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"2013:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1998:3:25"},"nodeType":"YulFunctionCall","src":"1998:17:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"1945:43:25"},"nodeType":"YulFunctionCall","src":"1945:71:25"},"nodeType":"YulExpressionStatement","src":"1945:71:25"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1871:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1883:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1894:4:25","type":""}],"src":"1801:222:25"},{"body":{"nodeType":"YulBlock","src":"2073:105:25","statements":[{"nodeType":"YulAssignment","src":"2083:89:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2098:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"2105:66:25","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2094:3:25"},"nodeType":"YulFunctionCall","src":"2094:78:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2083:7:25"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2055:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2065:7:25","type":""}],"src":"2029:149:25"},{"body":{"nodeType":"YulBlock","src":"2226:78:25","statements":[{"body":{"nodeType":"YulBlock","src":"2282:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2291:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2294:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2284:6:25"},"nodeType":"YulFunctionCall","src":"2284:12:25"},"nodeType":"YulExpressionStatement","src":"2284:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2249:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2273:5:25"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"2256:16:25"},"nodeType":"YulFunctionCall","src":"2256:23:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2246:2:25"},"nodeType":"YulFunctionCall","src":"2246:34:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2239:6:25"},"nodeType":"YulFunctionCall","src":"2239:42:25"},"nodeType":"YulIf","src":"2236:62:25"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2219:5:25","type":""}],"src":"2184:120:25"},{"body":{"nodeType":"YulBlock","src":"2361:86:25","statements":[{"nodeType":"YulAssignment","src":"2371:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2393:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2380:12:25"},"nodeType":"YulFunctionCall","src":"2380:20:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2371:5:25"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2435:5:25"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"2409:25:25"},"nodeType":"YulFunctionCall","src":"2409:32:25"},"nodeType":"YulExpressionStatement","src":"2409:32:25"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2339:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"2347:3:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2355:5:25","type":""}],"src":"2310:137:25"},{"body":{"nodeType":"YulBlock","src":"2518:262:25","statements":[{"body":{"nodeType":"YulBlock","src":"2564:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2566:77:25"},"nodeType":"YulFunctionCall","src":"2566:79:25"},"nodeType":"YulExpressionStatement","src":"2566:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2539:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"2548:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2535:3:25"},"nodeType":"YulFunctionCall","src":"2535:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"2560:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2531:3:25"},"nodeType":"YulFunctionCall","src":"2531:32:25"},"nodeType":"YulIf","src":"2528:119:25"},{"nodeType":"YulBlock","src":"2657:116:25","statements":[{"nodeType":"YulVariableDeclaration","src":"2672:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"2686:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2676:6:25","type":""}]},{"nodeType":"YulAssignment","src":"2701:62:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2735:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"2746:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2731:3:25"},"nodeType":"YulFunctionCall","src":"2731:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2755:7:25"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"2711:19:25"},"nodeType":"YulFunctionCall","src":"2711:52:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2701:6:25"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2488:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2499:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2511:6:25","type":""}],"src":"2453:327:25"},{"body":{"nodeType":"YulBlock","src":"2828:48:25","statements":[{"nodeType":"YulAssignment","src":"2838:32:25","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2863:5:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2856:6:25"},"nodeType":"YulFunctionCall","src":"2856:13:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2849:6:25"},"nodeType":"YulFunctionCall","src":"2849:21:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2838:7:25"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2810:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2820:7:25","type":""}],"src":"2786:90:25"},{"body":{"nodeType":"YulBlock","src":"2941:50:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2958:3:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2978:5:25"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"2963:14:25"},"nodeType":"YulFunctionCall","src":"2963:21:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2951:6:25"},"nodeType":"YulFunctionCall","src":"2951:34:25"},"nodeType":"YulExpressionStatement","src":"2951:34:25"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2929:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2936:3:25","type":""}],"src":"2882:109:25"},{"body":{"nodeType":"YulBlock","src":"3089:118:25","statements":[{"nodeType":"YulAssignment","src":"3099:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3111:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3122:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3107:3:25"},"nodeType":"YulFunctionCall","src":"3107:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3099:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3173:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3186:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"3197:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3182:3:25"},"nodeType":"YulFunctionCall","src":"3182:17:25"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3135:37:25"},"nodeType":"YulFunctionCall","src":"3135:65:25"},"nodeType":"YulExpressionStatement","src":"3135:65:25"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3061:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3073:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3084:4:25","type":""}],"src":"2997:210:25"},{"body":{"nodeType":"YulBlock","src":"3302:28:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3319:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3322:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3312:6:25"},"nodeType":"YulFunctionCall","src":"3312:12:25"},"nodeType":"YulExpressionStatement","src":"3312:12:25"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"3213:117:25"},{"body":{"nodeType":"YulBlock","src":"3425:28:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3442:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3445:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3435:6:25"},"nodeType":"YulFunctionCall","src":"3435:12:25"},"nodeType":"YulExpressionStatement","src":"3435:12:25"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"3336:117:25"},{"body":{"nodeType":"YulBlock","src":"3507:54:25","statements":[{"nodeType":"YulAssignment","src":"3517:38:25","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3535:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"3542:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3531:3:25"},"nodeType":"YulFunctionCall","src":"3531:14:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3551:2:25","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3547:3:25"},"nodeType":"YulFunctionCall","src":"3547:7:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3527:3:25"},"nodeType":"YulFunctionCall","src":"3527:28:25"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3517:6:25"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3490:5:25","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"3500:6:25","type":""}],"src":"3459:102:25"},{"body":{"nodeType":"YulBlock","src":"3595:152:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3612:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3615:77:25","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3605:6:25"},"nodeType":"YulFunctionCall","src":"3605:88:25"},"nodeType":"YulExpressionStatement","src":"3605:88:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3709:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3712:4:25","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3702:6:25"},"nodeType":"YulFunctionCall","src":"3702:15:25"},"nodeType":"YulExpressionStatement","src":"3702:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3733:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3736:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3726:6:25"},"nodeType":"YulFunctionCall","src":"3726:15:25"},"nodeType":"YulExpressionStatement","src":"3726:15:25"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3567:180:25"},{"body":{"nodeType":"YulBlock","src":"3796:238:25","statements":[{"nodeType":"YulVariableDeclaration","src":"3806:58:25","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3828:6:25"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3858:4:25"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"3836:21:25"},"nodeType":"YulFunctionCall","src":"3836:27:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3824:3:25"},"nodeType":"YulFunctionCall","src":"3824:40:25"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3810:10:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"3975:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3977:16:25"},"nodeType":"YulFunctionCall","src":"3977:18:25"},"nodeType":"YulExpressionStatement","src":"3977:18:25"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3918:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"3930:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3915:2:25"},"nodeType":"YulFunctionCall","src":"3915:34:25"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3954:10:25"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3966:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3951:2:25"},"nodeType":"YulFunctionCall","src":"3951:22:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3912:2:25"},"nodeType":"YulFunctionCall","src":"3912:62:25"},"nodeType":"YulIf","src":"3909:88:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4013:2:25","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4017:10:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4006:6:25"},"nodeType":"YulFunctionCall","src":"4006:22:25"},"nodeType":"YulExpressionStatement","src":"4006:22:25"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"3782:6:25","type":""},{"name":"size","nodeType":"YulTypedName","src":"3790:4:25","type":""}],"src":"3753:281:25"},{"body":{"nodeType":"YulBlock","src":"4081:88:25","statements":[{"nodeType":"YulAssignment","src":"4091:30:25","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"4101:18:25"},"nodeType":"YulFunctionCall","src":"4101:20:25"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4091:6:25"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4150:6:25"},{"name":"size","nodeType":"YulIdentifier","src":"4158:4:25"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"4130:19:25"},"nodeType":"YulFunctionCall","src":"4130:33:25"},"nodeType":"YulExpressionStatement","src":"4130:33:25"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"4065:4:25","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4074:6:25","type":""}],"src":"4040:129:25"},{"body":{"nodeType":"YulBlock","src":"4242:241:25","statements":[{"body":{"nodeType":"YulBlock","src":"4347:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4349:16:25"},"nodeType":"YulFunctionCall","src":"4349:18:25"},"nodeType":"YulExpressionStatement","src":"4349:18:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4319:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"4327:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4316:2:25"},"nodeType":"YulFunctionCall","src":"4316:30:25"},"nodeType":"YulIf","src":"4313:56:25"},{"nodeType":"YulAssignment","src":"4379:37:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4409:6:25"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"4387:21:25"},"nodeType":"YulFunctionCall","src":"4387:29:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4379:4:25"}]},{"nodeType":"YulAssignment","src":"4453:23:25","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"4465:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"4471:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4461:3:25"},"nodeType":"YulFunctionCall","src":"4461:15:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"4453:4:25"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"4226:6:25","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"4237:4:25","type":""}],"src":"4175:308:25"},{"body":{"nodeType":"YulBlock","src":"4553:82:25","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4576:3:25"},{"name":"src","nodeType":"YulIdentifier","src":"4581:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"4586:6:25"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4563:12:25"},"nodeType":"YulFunctionCall","src":"4563:30:25"},"nodeType":"YulExpressionStatement","src":"4563:30:25"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4613:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"4618:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4609:3:25"},"nodeType":"YulFunctionCall","src":"4609:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"4627:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4602:6:25"},"nodeType":"YulFunctionCall","src":"4602:27:25"},"nodeType":"YulExpressionStatement","src":"4602:27:25"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"4535:3:25","type":""},{"name":"dst","nodeType":"YulTypedName","src":"4540:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"4545:6:25","type":""}],"src":"4489:146:25"},{"body":{"nodeType":"YulBlock","src":"4725:341:25","statements":[{"nodeType":"YulAssignment","src":"4735:75:25","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4802:6:25"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"4760:41:25"},"nodeType":"YulFunctionCall","src":"4760:49:25"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4744:15:25"},"nodeType":"YulFunctionCall","src":"4744:66:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4735:5:25"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4826:5:25"},{"name":"length","nodeType":"YulIdentifier","src":"4833:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4819:6:25"},"nodeType":"YulFunctionCall","src":"4819:21:25"},"nodeType":"YulExpressionStatement","src":"4819:21:25"},{"nodeType":"YulVariableDeclaration","src":"4849:27:25","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4864:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"4871:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4860:3:25"},"nodeType":"YulFunctionCall","src":"4860:16:25"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4853:3:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"4914:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"4916:77:25"},"nodeType":"YulFunctionCall","src":"4916:79:25"},"nodeType":"YulExpressionStatement","src":"4916:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4895:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"4900:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4891:3:25"},"nodeType":"YulFunctionCall","src":"4891:16:25"},{"name":"end","nodeType":"YulIdentifier","src":"4909:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4888:2:25"},"nodeType":"YulFunctionCall","src":"4888:25:25"},"nodeType":"YulIf","src":"4885:112:25"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5043:3:25"},{"name":"dst","nodeType":"YulIdentifier","src":"5048:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"5053:6:25"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5006:36:25"},"nodeType":"YulFunctionCall","src":"5006:54:25"},"nodeType":"YulExpressionStatement","src":"5006:54:25"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"4698:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"4703:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"4711:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4719:5:25","type":""}],"src":"4641:425:25"},{"body":{"nodeType":"YulBlock","src":"5148:278:25","statements":[{"body":{"nodeType":"YulBlock","src":"5197:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"5199:77:25"},"nodeType":"YulFunctionCall","src":"5199:79:25"},"nodeType":"YulExpressionStatement","src":"5199:79:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5176:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"5184:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5172:3:25"},"nodeType":"YulFunctionCall","src":"5172:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"5191:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5168:3:25"},"nodeType":"YulFunctionCall","src":"5168:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5161:6:25"},"nodeType":"YulFunctionCall","src":"5161:35:25"},"nodeType":"YulIf","src":"5158:122:25"},{"nodeType":"YulVariableDeclaration","src":"5289:34:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5316:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5303:12:25"},"nodeType":"YulFunctionCall","src":"5303:20:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5293:6:25","type":""}]},{"nodeType":"YulAssignment","src":"5332:88:25","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5393:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"5401:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5389:3:25"},"nodeType":"YulFunctionCall","src":"5389:17:25"},{"name":"length","nodeType":"YulIdentifier","src":"5408:6:25"},{"name":"end","nodeType":"YulIdentifier","src":"5416:3:25"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"5341:47:25"},"nodeType":"YulFunctionCall","src":"5341:79:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"5332:5:25"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5126:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"5134:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"5142:5:25","type":""}],"src":"5086:340:25"},{"body":{"nodeType":"YulBlock","src":"5508:433:25","statements":[{"body":{"nodeType":"YulBlock","src":"5554:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5556:77:25"},"nodeType":"YulFunctionCall","src":"5556:79:25"},"nodeType":"YulExpressionStatement","src":"5556:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5529:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"5538:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5525:3:25"},"nodeType":"YulFunctionCall","src":"5525:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"5550:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5521:3:25"},"nodeType":"YulFunctionCall","src":"5521:32:25"},"nodeType":"YulIf","src":"5518:119:25"},{"nodeType":"YulBlock","src":"5647:287:25","statements":[{"nodeType":"YulVariableDeclaration","src":"5662:45:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5693:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"5704:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5689:3:25"},"nodeType":"YulFunctionCall","src":"5689:17:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5676:12:25"},"nodeType":"YulFunctionCall","src":"5676:31:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5666:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"5754:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5756:77:25"},"nodeType":"YulFunctionCall","src":"5756:79:25"},"nodeType":"YulExpressionStatement","src":"5756:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5726:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"5734:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5723:2:25"},"nodeType":"YulFunctionCall","src":"5723:30:25"},"nodeType":"YulIf","src":"5720:117:25"},{"nodeType":"YulAssignment","src":"5851:73:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5896:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"5907:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5892:3:25"},"nodeType":"YulFunctionCall","src":"5892:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5916:7:25"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"5861:30:25"},"nodeType":"YulFunctionCall","src":"5861:63:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5851:6:25"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5478:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5489:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5501:6:25","type":""}],"src":"5432:509:25"},{"body":{"nodeType":"YulBlock","src":"6029:229:25","statements":[{"body":{"nodeType":"YulBlock","src":"6134:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6136:16:25"},"nodeType":"YulFunctionCall","src":"6136:18:25"},"nodeType":"YulExpressionStatement","src":"6136:18:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6106:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"6114:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6103:2:25"},"nodeType":"YulFunctionCall","src":"6103:30:25"},"nodeType":"YulIf","src":"6100:56:25"},{"nodeType":"YulAssignment","src":"6166:25:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6178:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"6186:4:25","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6174:3:25"},"nodeType":"YulFunctionCall","src":"6174:17:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6166:4:25"}]},{"nodeType":"YulAssignment","src":"6228:23:25","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6240:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"6246:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6236:3:25"},"nodeType":"YulFunctionCall","src":"6236:15:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6228:4:25"}]}]},"name":"array_allocation_size_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"6013:6:25","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"6024:4:25","type":""}],"src":"5947:311:25"},{"body":{"nodeType":"YulBlock","src":"6353:28:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6370:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6373:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6363:6:25"},"nodeType":"YulFunctionCall","src":"6363:12:25"},"nodeType":"YulExpressionStatement","src":"6363:12:25"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"6264:117:25"},{"body":{"nodeType":"YulBlock","src":"6506:608:25","statements":[{"nodeType":"YulAssignment","src":"6516:90:25","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6598:6:25"}],"functionName":{"name":"array_allocation_size_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"6541:56:25"},"nodeType":"YulFunctionCall","src":"6541:64:25"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"6525:15:25"},"nodeType":"YulFunctionCall","src":"6525:81:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"6516:5:25"}]},{"nodeType":"YulVariableDeclaration","src":"6615:16:25","value":{"name":"array","nodeType":"YulIdentifier","src":"6626:5:25"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"6619:3:25","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6648:5:25"},{"name":"length","nodeType":"YulIdentifier","src":"6655:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6641:6:25"},"nodeType":"YulFunctionCall","src":"6641:21:25"},"nodeType":"YulExpressionStatement","src":"6641:21:25"},{"nodeType":"YulAssignment","src":"6671:23:25","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6682:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"6689:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6678:3:25"},"nodeType":"YulFunctionCall","src":"6678:16:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6671:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"6704:44:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6722:6:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6734:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"6742:4:25","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6730:3:25"},"nodeType":"YulFunctionCall","src":"6730:17:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6718:3:25"},"nodeType":"YulFunctionCall","src":"6718:30:25"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"6708:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"6776:103:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"6790:77:25"},"nodeType":"YulFunctionCall","src":"6790:79:25"},"nodeType":"YulExpressionStatement","src":"6790:79:25"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"6763:6:25"},{"name":"end","nodeType":"YulIdentifier","src":"6771:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6760:2:25"},"nodeType":"YulFunctionCall","src":"6760:15:25"},"nodeType":"YulIf","src":"6757:122:25"},{"body":{"nodeType":"YulBlock","src":"6964:144:25","statements":[{"nodeType":"YulVariableDeclaration","src":"6979:21:25","value":{"name":"src","nodeType":"YulIdentifier","src":"6997:3:25"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"6983:10:25","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7021:3:25"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"7047:10:25"},{"name":"end","nodeType":"YulIdentifier","src":"7059:3:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7026:20:25"},"nodeType":"YulFunctionCall","src":"7026:37:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7014:6:25"},"nodeType":"YulFunctionCall","src":"7014:50:25"},"nodeType":"YulExpressionStatement","src":"7014:50:25"},{"nodeType":"YulAssignment","src":"7077:21:25","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7088:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"7093:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7084:3:25"},"nodeType":"YulFunctionCall","src":"7084:14:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"7077:3:25"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6917:3:25"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"6922:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6914:2:25"},"nodeType":"YulFunctionCall","src":"6914:15:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6930:25:25","statements":[{"nodeType":"YulAssignment","src":"6932:21:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6943:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"6948:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6939:3:25"},"nodeType":"YulFunctionCall","src":"6939:14:25"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"6932:3:25"}]}]},"pre":{"nodeType":"YulBlock","src":"6892:21:25","statements":[{"nodeType":"YulVariableDeclaration","src":"6894:17:25","value":{"name":"offset","nodeType":"YulIdentifier","src":"6905:6:25"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"6898:3:25","type":""}]}]},"src":"6888:220:25"}]},"name":"abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6476:6:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"6484:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"6492:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"6500:5:25","type":""}],"src":"6404:710:25"},{"body":{"nodeType":"YulBlock","src":"7214:293:25","statements":[{"body":{"nodeType":"YulBlock","src":"7263:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"7265:77:25"},"nodeType":"YulFunctionCall","src":"7265:79:25"},"nodeType":"YulExpressionStatement","src":"7265:79:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7242:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7250:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7238:3:25"},"nodeType":"YulFunctionCall","src":"7238:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"7257:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7234:3:25"},"nodeType":"YulFunctionCall","src":"7234:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7227:6:25"},"nodeType":"YulFunctionCall","src":"7227:35:25"},"nodeType":"YulIf","src":"7224:122:25"},{"nodeType":"YulVariableDeclaration","src":"7355:34:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7382:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7369:12:25"},"nodeType":"YulFunctionCall","src":"7369:20:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7359:6:25","type":""}]},{"nodeType":"YulAssignment","src":"7398:103:25","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7474:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7482:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7470:3:25"},"nodeType":"YulFunctionCall","src":"7470:17:25"},{"name":"length","nodeType":"YulIdentifier","src":"7489:6:25"},{"name":"end","nodeType":"YulIdentifier","src":"7497:3:25"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7407:62:25"},"nodeType":"YulFunctionCall","src":"7407:94:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7398:5:25"}]}]},"name":"abi_decode_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7192:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"7200:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7208:5:25","type":""}],"src":"7137:370:25"},{"body":{"nodeType":"YulBlock","src":"7595:229:25","statements":[{"body":{"nodeType":"YulBlock","src":"7700:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7702:16:25"},"nodeType":"YulFunctionCall","src":"7702:18:25"},"nodeType":"YulExpressionStatement","src":"7702:18:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7672:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7680:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7669:2:25"},"nodeType":"YulFunctionCall","src":"7669:30:25"},"nodeType":"YulIf","src":"7666:56:25"},{"nodeType":"YulAssignment","src":"7732:25:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7744:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"7752:4:25","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7740:3:25"},"nodeType":"YulFunctionCall","src":"7740:17:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7732:4:25"}]},{"nodeType":"YulAssignment","src":"7794:23:25","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7806:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"7812:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7802:3:25"},"nodeType":"YulFunctionCall","src":"7802:15:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7794:4:25"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7579:6:25","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7590:4:25","type":""}],"src":"7513:311:25"},{"body":{"nodeType":"YulBlock","src":"7949:608:25","statements":[{"nodeType":"YulAssignment","src":"7959:90:25","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8041:6:25"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7984:56:25"},"nodeType":"YulFunctionCall","src":"7984:64:25"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"7968:15:25"},"nodeType":"YulFunctionCall","src":"7968:81:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7959:5:25"}]},{"nodeType":"YulVariableDeclaration","src":"8058:16:25","value":{"name":"array","nodeType":"YulIdentifier","src":"8069:5:25"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8062:3:25","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8091:5:25"},{"name":"length","nodeType":"YulIdentifier","src":"8098:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8084:6:25"},"nodeType":"YulFunctionCall","src":"8084:21:25"},"nodeType":"YulExpressionStatement","src":"8084:21:25"},{"nodeType":"YulAssignment","src":"8114:23:25","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8125:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"8132:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8121:3:25"},"nodeType":"YulFunctionCall","src":"8121:16:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"8114:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"8147:44:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8165:6:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8177:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"8185:4:25","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8173:3:25"},"nodeType":"YulFunctionCall","src":"8173:17:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8161:3:25"},"nodeType":"YulFunctionCall","src":"8161:30:25"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"8151:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"8219:103:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"8233:77:25"},"nodeType":"YulFunctionCall","src":"8233:79:25"},"nodeType":"YulExpressionStatement","src":"8233:79:25"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"8206:6:25"},{"name":"end","nodeType":"YulIdentifier","src":"8214:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8203:2:25"},"nodeType":"YulFunctionCall","src":"8203:15:25"},"nodeType":"YulIf","src":"8200:122:25"},{"body":{"nodeType":"YulBlock","src":"8407:144:25","statements":[{"nodeType":"YulVariableDeclaration","src":"8422:21:25","value":{"name":"src","nodeType":"YulIdentifier","src":"8440:3:25"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"8426:10:25","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8464:3:25"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"8490:10:25"},{"name":"end","nodeType":"YulIdentifier","src":"8502:3:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"8469:20:25"},"nodeType":"YulFunctionCall","src":"8469:37:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8457:6:25"},"nodeType":"YulFunctionCall","src":"8457:50:25"},"nodeType":"YulExpressionStatement","src":"8457:50:25"},{"nodeType":"YulAssignment","src":"8520:21:25","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8531:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"8536:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8527:3:25"},"nodeType":"YulFunctionCall","src":"8527:14:25"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"8520:3:25"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8360:3:25"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"8365:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8357:2:25"},"nodeType":"YulFunctionCall","src":"8357:15:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8373:25:25","statements":[{"nodeType":"YulAssignment","src":"8375:21:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8386:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"8391:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8382:3:25"},"nodeType":"YulFunctionCall","src":"8382:14:25"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"8375:3:25"}]}]},"pre":{"nodeType":"YulBlock","src":"8335:21:25","statements":[{"nodeType":"YulVariableDeclaration","src":"8337:17:25","value":{"name":"offset","nodeType":"YulIdentifier","src":"8348:6:25"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"8341:3:25","type":""}]}]},"src":"8331:220:25"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7919:6:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"7927:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"7935:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7943:5:25","type":""}],"src":"7847:710:25"},{"body":{"nodeType":"YulBlock","src":"8657:293:25","statements":[{"body":{"nodeType":"YulBlock","src":"8706:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8708:77:25"},"nodeType":"YulFunctionCall","src":"8708:79:25"},"nodeType":"YulExpressionStatement","src":"8708:79:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8685:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"8693:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8681:3:25"},"nodeType":"YulFunctionCall","src":"8681:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"8700:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8677:3:25"},"nodeType":"YulFunctionCall","src":"8677:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8670:6:25"},"nodeType":"YulFunctionCall","src":"8670:35:25"},"nodeType":"YulIf","src":"8667:122:25"},{"nodeType":"YulVariableDeclaration","src":"8798:34:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8825:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8812:12:25"},"nodeType":"YulFunctionCall","src":"8812:20:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8802:6:25","type":""}]},{"nodeType":"YulAssignment","src":"8841:103:25","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8917:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"8925:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8913:3:25"},"nodeType":"YulFunctionCall","src":"8913:17:25"},{"name":"length","nodeType":"YulIdentifier","src":"8932:6:25"},{"name":"end","nodeType":"YulIdentifier","src":"8940:3:25"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"8850:62:25"},"nodeType":"YulFunctionCall","src":"8850:94:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8841:5:25"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8635:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"8643:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8651:5:25","type":""}],"src":"8580:370:25"},{"body":{"nodeType":"YulBlock","src":"9089:761:25","statements":[{"body":{"nodeType":"YulBlock","src":"9135:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9137:77:25"},"nodeType":"YulFunctionCall","src":"9137:79:25"},"nodeType":"YulExpressionStatement","src":"9137:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9110:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"9119:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9106:3:25"},"nodeType":"YulFunctionCall","src":"9106:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"9131:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9102:3:25"},"nodeType":"YulFunctionCall","src":"9102:32:25"},"nodeType":"YulIf","src":"9099:119:25"},{"nodeType":"YulBlock","src":"9228:302:25","statements":[{"nodeType":"YulVariableDeclaration","src":"9243:45:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9274:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9285:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9270:3:25"},"nodeType":"YulFunctionCall","src":"9270:17:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9257:12:25"},"nodeType":"YulFunctionCall","src":"9257:31:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9247:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"9335:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9337:77:25"},"nodeType":"YulFunctionCall","src":"9337:79:25"},"nodeType":"YulExpressionStatement","src":"9337:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9307:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"9315:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9304:2:25"},"nodeType":"YulFunctionCall","src":"9304:30:25"},"nodeType":"YulIf","src":"9301:117:25"},{"nodeType":"YulAssignment","src":"9432:88:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9492:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"9503:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9488:3:25"},"nodeType":"YulFunctionCall","src":"9488:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9512:7:25"}],"functionName":{"name":"abi_decode_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"9442:45:25"},"nodeType":"YulFunctionCall","src":"9442:78:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9432:6:25"}]}]},{"nodeType":"YulBlock","src":"9540:303:25","statements":[{"nodeType":"YulVariableDeclaration","src":"9555:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9586:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"9597:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9582:3:25"},"nodeType":"YulFunctionCall","src":"9582:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9569:12:25"},"nodeType":"YulFunctionCall","src":"9569:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9559:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"9648:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9650:77:25"},"nodeType":"YulFunctionCall","src":"9650:79:25"},"nodeType":"YulExpressionStatement","src":"9650:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9620:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"9628:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9617:2:25"},"nodeType":"YulFunctionCall","src":"9617:30:25"},"nodeType":"YulIf","src":"9614:117:25"},{"nodeType":"YulAssignment","src":"9745:88:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9805:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"9816:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9801:3:25"},"nodeType":"YulFunctionCall","src":"9801:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9825:7:25"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"9755:45:25"},"nodeType":"YulFunctionCall","src":"9755:78:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9745:6:25"}]}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9051:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9062:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9074:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9082:6:25","type":""}],"src":"8956:894:25"},{"body":{"nodeType":"YulBlock","src":"9922:263:25","statements":[{"body":{"nodeType":"YulBlock","src":"9968:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9970:77:25"},"nodeType":"YulFunctionCall","src":"9970:79:25"},"nodeType":"YulExpressionStatement","src":"9970:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9943:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"9952:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9939:3:25"},"nodeType":"YulFunctionCall","src":"9939:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"9964:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9935:3:25"},"nodeType":"YulFunctionCall","src":"9935:32:25"},"nodeType":"YulIf","src":"9932:119:25"},{"nodeType":"YulBlock","src":"10061:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"10076:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"10090:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10080:6:25","type":""}]},{"nodeType":"YulAssignment","src":"10105:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10140:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"10151:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10136:3:25"},"nodeType":"YulFunctionCall","src":"10136:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10160:7:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10115:20:25"},"nodeType":"YulFunctionCall","src":"10115:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10105:6:25"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9892:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9903:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9915:6:25","type":""}],"src":"9856:329:25"},{"body":{"nodeType":"YulBlock","src":"10250:40:25","statements":[{"nodeType":"YulAssignment","src":"10261:22:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10277:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10271:5:25"},"nodeType":"YulFunctionCall","src":"10271:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10261:6:25"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10233:5:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10243:6:25","type":""}],"src":"10191:99:25"},{"body":{"nodeType":"YulBlock","src":"10392:73:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10409:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"10414:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10402:6:25"},"nodeType":"YulFunctionCall","src":"10402:19:25"},"nodeType":"YulExpressionStatement","src":"10402:19:25"},{"nodeType":"YulAssignment","src":"10430:29:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10449:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"10454:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10445:3:25"},"nodeType":"YulFunctionCall","src":"10445:14:25"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"10430:11:25"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10364:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"10369:6:25","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"10380:11:25","type":""}],"src":"10296:169:25"},{"body":{"nodeType":"YulBlock","src":"10533:184:25","statements":[{"nodeType":"YulVariableDeclaration","src":"10543:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"10552:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10547:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"10612:63:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10637:3:25"},{"name":"i","nodeType":"YulIdentifier","src":"10642:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10633:3:25"},"nodeType":"YulFunctionCall","src":"10633:11:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10656:3:25"},{"name":"i","nodeType":"YulIdentifier","src":"10661:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10652:3:25"},"nodeType":"YulFunctionCall","src":"10652:11:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10646:5:25"},"nodeType":"YulFunctionCall","src":"10646:18:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10626:6:25"},"nodeType":"YulFunctionCall","src":"10626:39:25"},"nodeType":"YulExpressionStatement","src":"10626:39:25"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10573:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"10576:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10570:2:25"},"nodeType":"YulFunctionCall","src":"10570:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10584:19:25","statements":[{"nodeType":"YulAssignment","src":"10586:15:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10595:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"10598:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10591:3:25"},"nodeType":"YulFunctionCall","src":"10591:10:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"10586:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"10566:3:25","statements":[]},"src":"10562:113:25"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10695:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"10700:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10691:3:25"},"nodeType":"YulFunctionCall","src":"10691:16:25"},{"kind":"number","nodeType":"YulLiteral","src":"10709:1:25","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10684:6:25"},"nodeType":"YulFunctionCall","src":"10684:27:25"},"nodeType":"YulExpressionStatement","src":"10684:27:25"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"10515:3:25","type":""},{"name":"dst","nodeType":"YulTypedName","src":"10520:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"10525:6:25","type":""}],"src":"10471:246:25"},{"body":{"nodeType":"YulBlock","src":"10815:285:25","statements":[{"nodeType":"YulVariableDeclaration","src":"10825:53:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10872:5:25"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"10839:32:25"},"nodeType":"YulFunctionCall","src":"10839:39:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10829:6:25","type":""}]},{"nodeType":"YulAssignment","src":"10887:78:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10953:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"10958:6:25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10894:58:25"},"nodeType":"YulFunctionCall","src":"10894:71:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10887:3:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11013:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"11020:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11009:3:25"},"nodeType":"YulFunctionCall","src":"11009:16:25"},{"name":"pos","nodeType":"YulIdentifier","src":"11027:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"11032:6:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10974:34:25"},"nodeType":"YulFunctionCall","src":"10974:65:25"},"nodeType":"YulExpressionStatement","src":"10974:65:25"},{"nodeType":"YulAssignment","src":"11048:46:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11059:3:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"11086:6:25"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"11064:21:25"},"nodeType":"YulFunctionCall","src":"11064:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11055:3:25"},"nodeType":"YulFunctionCall","src":"11055:39:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11048:3:25"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10796:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10803:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10811:3:25","type":""}],"src":"10723:377:25"},{"body":{"nodeType":"YulBlock","src":"11224:195:25","statements":[{"nodeType":"YulAssignment","src":"11234:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11246:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11257:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11242:3:25"},"nodeType":"YulFunctionCall","src":"11242:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11234:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11281:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"11292:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11277:3:25"},"nodeType":"YulFunctionCall","src":"11277:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11300:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"11306:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11296:3:25"},"nodeType":"YulFunctionCall","src":"11296:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11270:6:25"},"nodeType":"YulFunctionCall","src":"11270:47:25"},"nodeType":"YulExpressionStatement","src":"11270:47:25"},{"nodeType":"YulAssignment","src":"11326:86:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11398:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"11407:4:25"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11334:63:25"},"nodeType":"YulFunctionCall","src":"11334:78:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11326:4:25"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11196:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11208:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11219:4:25","type":""}],"src":"11106:313:25"},{"body":{"nodeType":"YulBlock","src":"11491:263:25","statements":[{"body":{"nodeType":"YulBlock","src":"11537:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11539:77:25"},"nodeType":"YulFunctionCall","src":"11539:79:25"},"nodeType":"YulExpressionStatement","src":"11539:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11512:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"11521:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11508:3:25"},"nodeType":"YulFunctionCall","src":"11508:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"11533:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11504:3:25"},"nodeType":"YulFunctionCall","src":"11504:32:25"},"nodeType":"YulIf","src":"11501:119:25"},{"nodeType":"YulBlock","src":"11630:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"11645:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"11659:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11649:6:25","type":""}]},{"nodeType":"YulAssignment","src":"11674:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11709:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"11720:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11705:3:25"},"nodeType":"YulFunctionCall","src":"11705:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11729:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11684:20:25"},"nodeType":"YulFunctionCall","src":"11684:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11674:6:25"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11461:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11472:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11484:6:25","type":""}],"src":"11425:329:25"},{"body":{"nodeType":"YulBlock","src":"11843:391:25","statements":[{"body":{"nodeType":"YulBlock","src":"11889:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11891:77:25"},"nodeType":"YulFunctionCall","src":"11891:79:25"},"nodeType":"YulExpressionStatement","src":"11891:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11864:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"11873:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11860:3:25"},"nodeType":"YulFunctionCall","src":"11860:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"11885:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11856:3:25"},"nodeType":"YulFunctionCall","src":"11856:32:25"},"nodeType":"YulIf","src":"11853:119:25"},{"nodeType":"YulBlock","src":"11982:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"11997:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"12011:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12001:6:25","type":""}]},{"nodeType":"YulAssignment","src":"12026:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12061:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"12072:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12057:3:25"},"nodeType":"YulFunctionCall","src":"12057:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12081:7:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"12036:20:25"},"nodeType":"YulFunctionCall","src":"12036:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12026:6:25"}]}]},{"nodeType":"YulBlock","src":"12109:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"12124:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"12138:2:25","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12128:6:25","type":""}]},{"nodeType":"YulAssignment","src":"12154:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12189:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"12200:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12185:3:25"},"nodeType":"YulFunctionCall","src":"12185:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12209:7:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"12164:20:25"},"nodeType":"YulFunctionCall","src":"12164:53:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12154:6:25"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11805:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11816:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11828:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11836:6:25","type":""}],"src":"11760:474:25"},{"body":{"nodeType":"YulBlock","src":"12306:241:25","statements":[{"body":{"nodeType":"YulBlock","src":"12411:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"12413:16:25"},"nodeType":"YulFunctionCall","src":"12413:18:25"},"nodeType":"YulExpressionStatement","src":"12413:18:25"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12383:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"12391:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12380:2:25"},"nodeType":"YulFunctionCall","src":"12380:30:25"},"nodeType":"YulIf","src":"12377:56:25"},{"nodeType":"YulAssignment","src":"12443:37:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12473:6:25"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"12451:21:25"},"nodeType":"YulFunctionCall","src":"12451:29:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"12443:4:25"}]},{"nodeType":"YulAssignment","src":"12517:23:25","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"12529:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"12535:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12525:3:25"},"nodeType":"YulFunctionCall","src":"12525:15:25"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"12517:4:25"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"12290:6:25","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"12301:4:25","type":""}],"src":"12240:307:25"},{"body":{"nodeType":"YulBlock","src":"12636:340:25","statements":[{"nodeType":"YulAssignment","src":"12646:74:25","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12712:6:25"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"12671:40:25"},"nodeType":"YulFunctionCall","src":"12671:48:25"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"12655:15:25"},"nodeType":"YulFunctionCall","src":"12655:65:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"12646:5:25"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"12736:5:25"},{"name":"length","nodeType":"YulIdentifier","src":"12743:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12729:6:25"},"nodeType":"YulFunctionCall","src":"12729:21:25"},"nodeType":"YulExpressionStatement","src":"12729:21:25"},{"nodeType":"YulVariableDeclaration","src":"12759:27:25","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"12774:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"12781:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12770:3:25"},"nodeType":"YulFunctionCall","src":"12770:16:25"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"12763:3:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"12824:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"12826:77:25"},"nodeType":"YulFunctionCall","src":"12826:79:25"},"nodeType":"YulExpressionStatement","src":"12826:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12805:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"12810:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12801:3:25"},"nodeType":"YulFunctionCall","src":"12801:16:25"},{"name":"end","nodeType":"YulIdentifier","src":"12819:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12798:2:25"},"nodeType":"YulFunctionCall","src":"12798:25:25"},"nodeType":"YulIf","src":"12795:112:25"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12953:3:25"},{"name":"dst","nodeType":"YulIdentifier","src":"12958:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"12963:6:25"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"12916:36:25"},"nodeType":"YulFunctionCall","src":"12916:54:25"},"nodeType":"YulExpressionStatement","src":"12916:54:25"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"12609:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"12614:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"12622:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"12630:5:25","type":""}],"src":"12553:423:25"},{"body":{"nodeType":"YulBlock","src":"13056:277:25","statements":[{"body":{"nodeType":"YulBlock","src":"13105:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"13107:77:25"},"nodeType":"YulFunctionCall","src":"13107:79:25"},"nodeType":"YulExpressionStatement","src":"13107:79:25"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13084:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"13092:4:25","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13080:3:25"},"nodeType":"YulFunctionCall","src":"13080:17:25"},{"name":"end","nodeType":"YulIdentifier","src":"13099:3:25"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13076:3:25"},"nodeType":"YulFunctionCall","src":"13076:27:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13069:6:25"},"nodeType":"YulFunctionCall","src":"13069:35:25"},"nodeType":"YulIf","src":"13066:122:25"},{"nodeType":"YulVariableDeclaration","src":"13197:34:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13224:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13211:12:25"},"nodeType":"YulFunctionCall","src":"13211:20:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13201:6:25","type":""}]},{"nodeType":"YulAssignment","src":"13240:87:25","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13300:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"13308:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13296:3:25"},"nodeType":"YulFunctionCall","src":"13296:17:25"},{"name":"length","nodeType":"YulIdentifier","src":"13315:6:25"},{"name":"end","nodeType":"YulIdentifier","src":"13323:3:25"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"13249:46:25"},"nodeType":"YulFunctionCall","src":"13249:78:25"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"13240:5:25"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13034:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"13042:3:25","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"13050:5:25","type":""}],"src":"12995:338:25"},{"body":{"nodeType":"YulBlock","src":"13532:1316:25","statements":[{"body":{"nodeType":"YulBlock","src":"13579:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"13581:77:25"},"nodeType":"YulFunctionCall","src":"13581:79:25"},"nodeType":"YulExpressionStatement","src":"13581:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13553:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"13562:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13549:3:25"},"nodeType":"YulFunctionCall","src":"13549:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"13574:3:25","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13545:3:25"},"nodeType":"YulFunctionCall","src":"13545:33:25"},"nodeType":"YulIf","src":"13542:120:25"},{"nodeType":"YulBlock","src":"13672:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"13687:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"13701:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13691:6:25","type":""}]},{"nodeType":"YulAssignment","src":"13716:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13751:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"13762:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13747:3:25"},"nodeType":"YulFunctionCall","src":"13747:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13771:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"13726:20:25"},"nodeType":"YulFunctionCall","src":"13726:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13716:6:25"}]}]},{"nodeType":"YulBlock","src":"13799:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"13814:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"13828:2:25","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13818:6:25","type":""}]},{"nodeType":"YulAssignment","src":"13844:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13879:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"13890:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13875:3:25"},"nodeType":"YulFunctionCall","src":"13875:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13899:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"13854:20:25"},"nodeType":"YulFunctionCall","src":"13854:53:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"13844:6:25"}]}]},{"nodeType":"YulBlock","src":"13927:303:25","statements":[{"nodeType":"YulVariableDeclaration","src":"13942:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13973:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"13984:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13969:3:25"},"nodeType":"YulFunctionCall","src":"13969:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13956:12:25"},"nodeType":"YulFunctionCall","src":"13956:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13946:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"14035:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"14037:77:25"},"nodeType":"YulFunctionCall","src":"14037:79:25"},"nodeType":"YulExpressionStatement","src":"14037:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14007:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"14015:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14004:2:25"},"nodeType":"YulFunctionCall","src":"14004:30:25"},"nodeType":"YulIf","src":"14001:117:25"},{"nodeType":"YulAssignment","src":"14132:88:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14192:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"14203:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14188:3:25"},"nodeType":"YulFunctionCall","src":"14188:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14212:7:25"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"14142:45:25"},"nodeType":"YulFunctionCall","src":"14142:78:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"14132:6:25"}]}]},{"nodeType":"YulBlock","src":"14240:303:25","statements":[{"nodeType":"YulVariableDeclaration","src":"14255:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14286:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14297:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14282:3:25"},"nodeType":"YulFunctionCall","src":"14282:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14269:12:25"},"nodeType":"YulFunctionCall","src":"14269:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14259:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"14348:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"14350:77:25"},"nodeType":"YulFunctionCall","src":"14350:79:25"},"nodeType":"YulExpressionStatement","src":"14350:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14320:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"14328:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14317:2:25"},"nodeType":"YulFunctionCall","src":"14317:30:25"},"nodeType":"YulIf","src":"14314:117:25"},{"nodeType":"YulAssignment","src":"14445:88:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14505:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"14516:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14501:3:25"},"nodeType":"YulFunctionCall","src":"14501:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14525:7:25"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"14455:45:25"},"nodeType":"YulFunctionCall","src":"14455:78:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"14445:6:25"}]}]},{"nodeType":"YulBlock","src":"14553:288:25","statements":[{"nodeType":"YulVariableDeclaration","src":"14568:47:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14599:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"14610:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14595:3:25"},"nodeType":"YulFunctionCall","src":"14595:19:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14582:12:25"},"nodeType":"YulFunctionCall","src":"14582:33:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14572:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"14662:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"14664:77:25"},"nodeType":"YulFunctionCall","src":"14664:79:25"},"nodeType":"YulExpressionStatement","src":"14664:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14634:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"14642:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14631:2:25"},"nodeType":"YulFunctionCall","src":"14631:30:25"},"nodeType":"YulIf","src":"14628:117:25"},{"nodeType":"YulAssignment","src":"14759:72:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14803:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"14814:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14799:3:25"},"nodeType":"YulFunctionCall","src":"14799:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14823:7:25"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"14769:29:25"},"nodeType":"YulFunctionCall","src":"14769:62:25"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"14759:6:25"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13470:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13481:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13493:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13501:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13509:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13517:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"13525:6:25","type":""}],"src":"13339:1509:25"},{"body":{"nodeType":"YulBlock","src":"14928:40:25","statements":[{"nodeType":"YulAssignment","src":"14939:22:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14955:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14949:5:25"},"nodeType":"YulFunctionCall","src":"14949:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"14939:6:25"}]}]},"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14911:5:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"14921:6:25","type":""}],"src":"14854:114:25"},{"body":{"nodeType":"YulBlock","src":"15085:73:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15102:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"15107:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15095:6:25"},"nodeType":"YulFunctionCall","src":"15095:19:25"},"nodeType":"YulExpressionStatement","src":"15095:19:25"},{"nodeType":"YulAssignment","src":"15123:29:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15142:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"15147:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15138:3:25"},"nodeType":"YulFunctionCall","src":"15138:14:25"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"15123:11:25"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15057:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"15062:6:25","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"15073:11:25","type":""}],"src":"14974:184:25"},{"body":{"nodeType":"YulBlock","src":"15236:60:25","statements":[{"nodeType":"YulAssignment","src":"15246:11:25","value":{"name":"ptr","nodeType":"YulIdentifier","src":"15254:3:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"15246:4:25"}]},{"nodeType":"YulAssignment","src":"15267:22:25","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"15279:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"15284:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15275:3:25"},"nodeType":"YulFunctionCall","src":"15275:14:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"15267:4:25"}]}]},"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"15223:3:25","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"15231:4:25","type":""}],"src":"15164:132:25"},{"body":{"nodeType":"YulBlock","src":"15357:53:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15374:3:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15397:5:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15379:17:25"},"nodeType":"YulFunctionCall","src":"15379:24:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15367:6:25"},"nodeType":"YulFunctionCall","src":"15367:37:25"},"nodeType":"YulExpressionStatement","src":"15367:37:25"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15345:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15352:3:25","type":""}],"src":"15302:108:25"},{"body":{"nodeType":"YulBlock","src":"15496:99:25","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15540:6:25"},{"name":"pos","nodeType":"YulIdentifier","src":"15548:3:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"15506:33:25"},"nodeType":"YulFunctionCall","src":"15506:46:25"},"nodeType":"YulExpressionStatement","src":"15506:46:25"},{"nodeType":"YulAssignment","src":"15561:28:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15579:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"15584:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15575:3:25"},"nodeType":"YulFunctionCall","src":"15575:14:25"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"15561:10:25"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"15469:6:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15477:3:25","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"15485:10:25","type":""}],"src":"15416:179:25"},{"body":{"nodeType":"YulBlock","src":"15676:38:25","statements":[{"nodeType":"YulAssignment","src":"15686:22:25","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"15698:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"15703:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15694:3:25"},"nodeType":"YulFunctionCall","src":"15694:14:25"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"15686:4:25"}]}]},"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"15663:3:25","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"15671:4:25","type":""}],"src":"15601:113:25"},{"body":{"nodeType":"YulBlock","src":"15874:608:25","statements":[{"nodeType":"YulVariableDeclaration","src":"15884:68:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15946:5:25"}],"functionName":{"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"15898:47:25"},"nodeType":"YulFunctionCall","src":"15898:54:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15888:6:25","type":""}]},{"nodeType":"YulAssignment","src":"15961:93:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16042:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"16047:6:25"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15968:73:25"},"nodeType":"YulFunctionCall","src":"15968:86:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15961:3:25"}]},{"nodeType":"YulVariableDeclaration","src":"16063:71:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16128:5:25"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"16078:49:25"},"nodeType":"YulFunctionCall","src":"16078:56:25"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"16067:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16143:21:25","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"16157:7:25"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"16147:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"16233:224:25","statements":[{"nodeType":"YulVariableDeclaration","src":"16247:34:25","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"16274:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16268:5:25"},"nodeType":"YulFunctionCall","src":"16268:13:25"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"16251:13:25","type":""}]},{"nodeType":"YulAssignment","src":"16294:70:25","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"16345:13:25"},{"name":"pos","nodeType":"YulIdentifier","src":"16360:3:25"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"16301:43:25"},"nodeType":"YulFunctionCall","src":"16301:63:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16294:3:25"}]},{"nodeType":"YulAssignment","src":"16377:70:25","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"16440:6:25"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"16387:52:25"},"nodeType":"YulFunctionCall","src":"16387:60:25"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"16377:6:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16195:1:25"},{"name":"length","nodeType":"YulIdentifier","src":"16198:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16192:2:25"},"nodeType":"YulFunctionCall","src":"16192:13:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16206:18:25","statements":[{"nodeType":"YulAssignment","src":"16208:14:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16217:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"16220:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16213:3:25"},"nodeType":"YulFunctionCall","src":"16213:9:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16208:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"16177:14:25","statements":[{"nodeType":"YulVariableDeclaration","src":"16179:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"16188:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16183:1:25","type":""}]}]},"src":"16173:284:25"},{"nodeType":"YulAssignment","src":"16466:10:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"16473:3:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16466:3:25"}]}]},"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15853:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15860:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15869:3:25","type":""}],"src":"15750:732:25"},{"body":{"nodeType":"YulBlock","src":"16636:225:25","statements":[{"nodeType":"YulAssignment","src":"16646:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16658:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16669:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16654:3:25"},"nodeType":"YulFunctionCall","src":"16654:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16646:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16693:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"16704:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16689:3:25"},"nodeType":"YulFunctionCall","src":"16689:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16712:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"16718:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16708:3:25"},"nodeType":"YulFunctionCall","src":"16708:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16682:6:25"},"nodeType":"YulFunctionCall","src":"16682:47:25"},"nodeType":"YulExpressionStatement","src":"16682:47:25"},{"nodeType":"YulAssignment","src":"16738:116:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16840:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"16849:4:25"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16746:93:25"},"nodeType":"YulFunctionCall","src":"16746:108:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16738:4:25"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16608:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16620:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16631:4:25","type":""}],"src":"16488:373:25"},{"body":{"nodeType":"YulBlock","src":"16959:560:25","statements":[{"body":{"nodeType":"YulBlock","src":"17005:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"17007:77:25"},"nodeType":"YulFunctionCall","src":"17007:79:25"},"nodeType":"YulExpressionStatement","src":"17007:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16980:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"16989:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16976:3:25"},"nodeType":"YulFunctionCall","src":"16976:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"17001:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16972:3:25"},"nodeType":"YulFunctionCall","src":"16972:32:25"},"nodeType":"YulIf","src":"16969:119:25"},{"nodeType":"YulBlock","src":"17098:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"17113:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"17127:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17117:6:25","type":""}]},{"nodeType":"YulAssignment","src":"17142:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17177:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"17188:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17173:3:25"},"nodeType":"YulFunctionCall","src":"17173:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17197:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"17152:20:25"},"nodeType":"YulFunctionCall","src":"17152:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17142:6:25"}]}]},{"nodeType":"YulBlock","src":"17225:287:25","statements":[{"nodeType":"YulVariableDeclaration","src":"17240:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17271:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17282:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17267:3:25"},"nodeType":"YulFunctionCall","src":"17267:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17254:12:25"},"nodeType":"YulFunctionCall","src":"17254:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17244:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"17333:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"17335:77:25"},"nodeType":"YulFunctionCall","src":"17335:79:25"},"nodeType":"YulExpressionStatement","src":"17335:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"17305:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"17313:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17302:2:25"},"nodeType":"YulFunctionCall","src":"17302:30:25"},"nodeType":"YulIf","src":"17299:117:25"},{"nodeType":"YulAssignment","src":"17430:72:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17474:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"17485:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17470:3:25"},"nodeType":"YulFunctionCall","src":"17470:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17494:7:25"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"17440:29:25"},"nodeType":"YulFunctionCall","src":"17440:62:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"17430:6:25"}]}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16921:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16932:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16944:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16952:6:25","type":""}],"src":"16867:652:25"},{"body":{"nodeType":"YulBlock","src":"17570:32:25","statements":[{"nodeType":"YulAssignment","src":"17580:16:25","value":{"name":"value","nodeType":"YulIdentifier","src":"17591:5:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"17580:7:25"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17552:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"17562:7:25","type":""}],"src":"17525:77:25"},{"body":{"nodeType":"YulBlock","src":"17673:53:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17690:3:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17713:5:25"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"17695:17:25"},"nodeType":"YulFunctionCall","src":"17695:24:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17683:6:25"},"nodeType":"YulFunctionCall","src":"17683:37:25"},"nodeType":"YulExpressionStatement","src":"17683:37:25"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17661:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17668:3:25","type":""}],"src":"17608:118:25"},{"body":{"nodeType":"YulBlock","src":"17830:124:25","statements":[{"nodeType":"YulAssignment","src":"17840:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17852:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17863:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17848:3:25"},"nodeType":"YulFunctionCall","src":"17848:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17840:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17920:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17933:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"17944:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17929:3:25"},"nodeType":"YulFunctionCall","src":"17929:17:25"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"17876:43:25"},"nodeType":"YulFunctionCall","src":"17876:71:25"},"nodeType":"YulExpressionStatement","src":"17876:71:25"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17802:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17814:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17825:4:25","type":""}],"src":"17732:222:25"},{"body":{"nodeType":"YulBlock","src":"18025:53:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18042:3:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18065:5:25"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"18047:17:25"},"nodeType":"YulFunctionCall","src":"18047:24:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18035:6:25"},"nodeType":"YulFunctionCall","src":"18035:37:25"},"nodeType":"YulExpressionStatement","src":"18035:37:25"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18013:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18020:3:25","type":""}],"src":"17960:118:25"},{"body":{"nodeType":"YulBlock","src":"18182:124:25","statements":[{"nodeType":"YulAssignment","src":"18192:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18204:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18215:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18200:3:25"},"nodeType":"YulFunctionCall","src":"18200:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18192:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18272:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18285:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"18296:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18281:3:25"},"nodeType":"YulFunctionCall","src":"18281:17:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18228:43:25"},"nodeType":"YulFunctionCall","src":"18228:71:25"},"nodeType":"YulExpressionStatement","src":"18228:71:25"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18154:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18166:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18177:4:25","type":""}],"src":"18084:222:25"},{"body":{"nodeType":"YulBlock","src":"18395:391:25","statements":[{"body":{"nodeType":"YulBlock","src":"18441:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"18443:77:25"},"nodeType":"YulFunctionCall","src":"18443:79:25"},"nodeType":"YulExpressionStatement","src":"18443:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18416:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"18425:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18412:3:25"},"nodeType":"YulFunctionCall","src":"18412:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"18437:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18408:3:25"},"nodeType":"YulFunctionCall","src":"18408:32:25"},"nodeType":"YulIf","src":"18405:119:25"},{"nodeType":"YulBlock","src":"18534:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"18549:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"18563:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"18553:6:25","type":""}]},{"nodeType":"YulAssignment","src":"18578:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18613:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"18624:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18609:3:25"},"nodeType":"YulFunctionCall","src":"18609:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"18633:7:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"18588:20:25"},"nodeType":"YulFunctionCall","src":"18588:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18578:6:25"}]}]},{"nodeType":"YulBlock","src":"18661:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"18676:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"18690:2:25","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"18680:6:25","type":""}]},{"nodeType":"YulAssignment","src":"18706:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18741:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"18752:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18737:3:25"},"nodeType":"YulFunctionCall","src":"18737:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"18761:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"18716:20:25"},"nodeType":"YulFunctionCall","src":"18716:53:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"18706:6:25"}]}]}]},"name":"abi_decode_tuple_t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18357:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18368:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18380:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18388:6:25","type":""}],"src":"18312:474:25"},{"body":{"nodeType":"YulBlock","src":"18832:76:25","statements":[{"body":{"nodeType":"YulBlock","src":"18886:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18895:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18898:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18888:6:25"},"nodeType":"YulFunctionCall","src":"18888:12:25"},"nodeType":"YulExpressionStatement","src":"18888:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18855:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18877:5:25"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"18862:14:25"},"nodeType":"YulFunctionCall","src":"18862:21:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18852:2:25"},"nodeType":"YulFunctionCall","src":"18852:32:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18845:6:25"},"nodeType":"YulFunctionCall","src":"18845:40:25"},"nodeType":"YulIf","src":"18842:60:25"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18825:5:25","type":""}],"src":"18792:116:25"},{"body":{"nodeType":"YulBlock","src":"18963:84:25","statements":[{"nodeType":"YulAssignment","src":"18973:29:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18995:6:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"18982:12:25"},"nodeType":"YulFunctionCall","src":"18982:20:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"18973:5:25"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19035:5:25"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"19011:23:25"},"nodeType":"YulFunctionCall","src":"19011:30:25"},"nodeType":"YulExpressionStatement","src":"19011:30:25"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"18941:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"18949:3:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"18957:5:25","type":""}],"src":"18914:133:25"},{"body":{"nodeType":"YulBlock","src":"19133:388:25","statements":[{"body":{"nodeType":"YulBlock","src":"19179:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"19181:77:25"},"nodeType":"YulFunctionCall","src":"19181:79:25"},"nodeType":"YulExpressionStatement","src":"19181:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19154:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"19163:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19150:3:25"},"nodeType":"YulFunctionCall","src":"19150:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"19175:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19146:3:25"},"nodeType":"YulFunctionCall","src":"19146:32:25"},"nodeType":"YulIf","src":"19143:119:25"},{"nodeType":"YulBlock","src":"19272:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"19287:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"19301:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19291:6:25","type":""}]},{"nodeType":"YulAssignment","src":"19316:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19351:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"19362:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19347:3:25"},"nodeType":"YulFunctionCall","src":"19347:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19371:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"19326:20:25"},"nodeType":"YulFunctionCall","src":"19326:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19316:6:25"}]}]},{"nodeType":"YulBlock","src":"19399:115:25","statements":[{"nodeType":"YulVariableDeclaration","src":"19414:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"19428:2:25","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19418:6:25","type":""}]},{"nodeType":"YulAssignment","src":"19444:60:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19476:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"19487:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19472:3:25"},"nodeType":"YulFunctionCall","src":"19472:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19496:7:25"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"19454:17:25"},"nodeType":"YulFunctionCall","src":"19454:50:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"19444:6:25"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19095:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19106:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19118:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19126:6:25","type":""}],"src":"19053:468:25"},{"body":{"nodeType":"YulBlock","src":"19662:874:25","statements":[{"body":{"nodeType":"YulBlock","src":"19708:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"19710:77:25"},"nodeType":"YulFunctionCall","src":"19710:79:25"},"nodeType":"YulExpressionStatement","src":"19710:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19683:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"19692:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19679:3:25"},"nodeType":"YulFunctionCall","src":"19679:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"19704:2:25","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19675:3:25"},"nodeType":"YulFunctionCall","src":"19675:32:25"},"nodeType":"YulIf","src":"19672:119:25"},{"nodeType":"YulBlock","src":"19801:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"19816:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"19830:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19820:6:25","type":""}]},{"nodeType":"YulAssignment","src":"19845:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19880:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"19891:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19876:3:25"},"nodeType":"YulFunctionCall","src":"19876:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"19900:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"19855:20:25"},"nodeType":"YulFunctionCall","src":"19855:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19845:6:25"}]}]},{"nodeType":"YulBlock","src":"19928:303:25","statements":[{"nodeType":"YulVariableDeclaration","src":"19943:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19974:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"19985:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19970:3:25"},"nodeType":"YulFunctionCall","src":"19970:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19957:12:25"},"nodeType":"YulFunctionCall","src":"19957:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19947:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"20036:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"20038:77:25"},"nodeType":"YulFunctionCall","src":"20038:79:25"},"nodeType":"YulExpressionStatement","src":"20038:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20008:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"20016:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20005:2:25"},"nodeType":"YulFunctionCall","src":"20005:30:25"},"nodeType":"YulIf","src":"20002:117:25"},{"nodeType":"YulAssignment","src":"20133:88:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20193:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"20204:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20189:3:25"},"nodeType":"YulFunctionCall","src":"20189:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20213:7:25"}],"functionName":{"name":"abi_decode_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"20143:45:25"},"nodeType":"YulFunctionCall","src":"20143:78:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"20133:6:25"}]}]},{"nodeType":"YulBlock","src":"20241:288:25","statements":[{"nodeType":"YulVariableDeclaration","src":"20256:46:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20287:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"20298:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20283:3:25"},"nodeType":"YulFunctionCall","src":"20283:18:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20270:12:25"},"nodeType":"YulFunctionCall","src":"20270:32:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20260:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"20349:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"20351:77:25"},"nodeType":"YulFunctionCall","src":"20351:79:25"},"nodeType":"YulExpressionStatement","src":"20351:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20321:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"20329:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20318:2:25"},"nodeType":"YulFunctionCall","src":"20318:30:25"},"nodeType":"YulIf","src":"20315:117:25"},{"nodeType":"YulAssignment","src":"20446:73:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20491:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"20502:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20487:3:25"},"nodeType":"YulFunctionCall","src":"20487:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20511:7:25"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"20456:30:25"},"nodeType":"YulFunctionCall","src":"20456:63:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"20446:6:25"}]}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_address_$dyn_memory_ptrt_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19616:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19627:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19639:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19647:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19655:6:25","type":""}],"src":"19527:1009:25"},{"body":{"nodeType":"YulBlock","src":"20625:391:25","statements":[{"body":{"nodeType":"YulBlock","src":"20671:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"20673:77:25"},"nodeType":"YulFunctionCall","src":"20673:79:25"},"nodeType":"YulExpressionStatement","src":"20673:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"20646:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"20655:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20642:3:25"},"nodeType":"YulFunctionCall","src":"20642:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"20667:2:25","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20638:3:25"},"nodeType":"YulFunctionCall","src":"20638:32:25"},"nodeType":"YulIf","src":"20635:119:25"},{"nodeType":"YulBlock","src":"20764:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"20779:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"20793:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20783:6:25","type":""}]},{"nodeType":"YulAssignment","src":"20808:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20843:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"20854:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20839:3:25"},"nodeType":"YulFunctionCall","src":"20839:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20863:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"20818:20:25"},"nodeType":"YulFunctionCall","src":"20818:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"20808:6:25"}]}]},{"nodeType":"YulBlock","src":"20891:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"20906:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"20920:2:25","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20910:6:25","type":""}]},{"nodeType":"YulAssignment","src":"20936:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20971:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"20982:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20967:3:25"},"nodeType":"YulFunctionCall","src":"20967:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20991:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"20946:20:25"},"nodeType":"YulFunctionCall","src":"20946:53:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"20936:6:25"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20587:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"20598:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"20610:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20618:6:25","type":""}],"src":"20542:474:25"},{"body":{"nodeType":"YulBlock","src":"21165:946:25","statements":[{"body":{"nodeType":"YulBlock","src":"21212:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"21214:77:25"},"nodeType":"YulFunctionCall","src":"21214:79:25"},"nodeType":"YulExpressionStatement","src":"21214:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"21186:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"21195:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21182:3:25"},"nodeType":"YulFunctionCall","src":"21182:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"21207:3:25","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21178:3:25"},"nodeType":"YulFunctionCall","src":"21178:33:25"},"nodeType":"YulIf","src":"21175:120:25"},{"nodeType":"YulBlock","src":"21305:117:25","statements":[{"nodeType":"YulVariableDeclaration","src":"21320:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"21334:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21324:6:25","type":""}]},{"nodeType":"YulAssignment","src":"21349:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21384:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"21395:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21380:3:25"},"nodeType":"YulFunctionCall","src":"21380:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21404:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"21359:20:25"},"nodeType":"YulFunctionCall","src":"21359:53:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"21349:6:25"}]}]},{"nodeType":"YulBlock","src":"21432:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"21447:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"21461:2:25","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21451:6:25","type":""}]},{"nodeType":"YulAssignment","src":"21477:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21512:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"21523:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21508:3:25"},"nodeType":"YulFunctionCall","src":"21508:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21532:7:25"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"21487:20:25"},"nodeType":"YulFunctionCall","src":"21487:53:25"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"21477:6:25"}]}]},{"nodeType":"YulBlock","src":"21560:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"21575:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"21589:2:25","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21579:6:25","type":""}]},{"nodeType":"YulAssignment","src":"21605:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21640:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"21651:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21636:3:25"},"nodeType":"YulFunctionCall","src":"21636:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21660:7:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"21615:20:25"},"nodeType":"YulFunctionCall","src":"21615:53:25"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"21605:6:25"}]}]},{"nodeType":"YulBlock","src":"21688:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"21703:16:25","value":{"kind":"number","nodeType":"YulLiteral","src":"21717:2:25","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21707:6:25","type":""}]},{"nodeType":"YulAssignment","src":"21733:63:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21768:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"21779:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21764:3:25"},"nodeType":"YulFunctionCall","src":"21764:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21788:7:25"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"21743:20:25"},"nodeType":"YulFunctionCall","src":"21743:53:25"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"21733:6:25"}]}]},{"nodeType":"YulBlock","src":"21816:288:25","statements":[{"nodeType":"YulVariableDeclaration","src":"21831:47:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21862:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"21873:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21858:3:25"},"nodeType":"YulFunctionCall","src":"21858:19:25"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"21845:12:25"},"nodeType":"YulFunctionCall","src":"21845:33:25"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21835:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"21925:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"21927:77:25"},"nodeType":"YulFunctionCall","src":"21927:79:25"},"nodeType":"YulExpressionStatement","src":"21927:79:25"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"21897:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"21905:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21894:2:25"},"nodeType":"YulFunctionCall","src":"21894:30:25"},"nodeType":"YulIf","src":"21891:117:25"},{"nodeType":"YulAssignment","src":"22022:72:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22066:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"22077:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22062:3:25"},"nodeType":"YulFunctionCall","src":"22062:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22086:7:25"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"22032:29:25"},"nodeType":"YulFunctionCall","src":"22032:62:25"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"22022:6:25"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21103:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"21114:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"21126:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21134:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21142:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"21150:6:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"21158:6:25","type":""}],"src":"21022:1089:25"},{"body":{"nodeType":"YulBlock","src":"22223:65:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22245:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"22253:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22241:3:25"},"nodeType":"YulFunctionCall","src":"22241:14:25"},{"hexValue":"5468697320697320612064756d6d79206572726f72","kind":"string","nodeType":"YulLiteral","src":"22257:23:25","type":"","value":"This is a dummy error"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22234:6:25"},"nodeType":"YulFunctionCall","src":"22234:47:25"},"nodeType":"YulExpressionStatement","src":"22234:47:25"}]},"name":"store_literal_in_memory_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22215:6:25","type":""}],"src":"22117:171:25"},{"body":{"nodeType":"YulBlock","src":"22440:220:25","statements":[{"nodeType":"YulAssignment","src":"22450:74:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22516:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"22521:2:25","type":"","value":"21"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22457:58:25"},"nodeType":"YulFunctionCall","src":"22457:67:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22450:3:25"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22622:3:25"}],"functionName":{"name":"store_literal_in_memory_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d","nodeType":"YulIdentifier","src":"22533:88:25"},"nodeType":"YulFunctionCall","src":"22533:93:25"},"nodeType":"YulExpressionStatement","src":"22533:93:25"},{"nodeType":"YulAssignment","src":"22635:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22646:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"22651:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22642:3:25"},"nodeType":"YulFunctionCall","src":"22642:12:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22635:3:25"}]}]},"name":"abi_encode_t_stringliteral_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22428:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22436:3:25","type":""}],"src":"22294:366:25"},{"body":{"nodeType":"YulBlock","src":"22837:248:25","statements":[{"nodeType":"YulAssignment","src":"22847:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22859:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"22870:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22855:3:25"},"nodeType":"YulFunctionCall","src":"22855:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22847:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22894:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"22905:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22890:3:25"},"nodeType":"YulFunctionCall","src":"22890:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22913:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"22919:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22909:3:25"},"nodeType":"YulFunctionCall","src":"22909:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22883:6:25"},"nodeType":"YulFunctionCall","src":"22883:47:25"},"nodeType":"YulExpressionStatement","src":"22883:47:25"},{"nodeType":"YulAssignment","src":"22939:139:25","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23073:4:25"}],"functionName":{"name":"abi_encode_t_stringliteral_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22947:124:25"},"nodeType":"YulFunctionCall","src":"22947:131:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22939:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22817:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22832:4:25","type":""}],"src":"22666:419:25"},{"body":{"nodeType":"YulBlock","src":"23197:53:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23219:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"23227:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23215:3:25"},"nodeType":"YulFunctionCall","src":"23215:14:25"},{"hexValue":"6e6f742061646d696e","kind":"string","nodeType":"YulLiteral","src":"23231:11:25","type":"","value":"not admin"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23208:6:25"},"nodeType":"YulFunctionCall","src":"23208:35:25"},"nodeType":"YulExpressionStatement","src":"23208:35:25"}]},"name":"store_literal_in_memory_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23189:6:25","type":""}],"src":"23091:159:25"},{"body":{"nodeType":"YulBlock","src":"23402:219:25","statements":[{"nodeType":"YulAssignment","src":"23412:73:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23478:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"23483:1:25","type":"","value":"9"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23419:58:25"},"nodeType":"YulFunctionCall","src":"23419:66:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23412:3:25"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23583:3:25"}],"functionName":{"name":"store_literal_in_memory_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283","nodeType":"YulIdentifier","src":"23494:88:25"},"nodeType":"YulFunctionCall","src":"23494:93:25"},"nodeType":"YulExpressionStatement","src":"23494:93:25"},{"nodeType":"YulAssignment","src":"23596:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23607:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"23612:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23603:3:25"},"nodeType":"YulFunctionCall","src":"23603:12:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23596:3:25"}]}]},"name":"abi_encode_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23390:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23398:3:25","type":""}],"src":"23256:365:25"},{"body":{"nodeType":"YulBlock","src":"23798:248:25","statements":[{"nodeType":"YulAssignment","src":"23808:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23820:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"23831:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23816:3:25"},"nodeType":"YulFunctionCall","src":"23816:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23808:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23855:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"23866:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23851:3:25"},"nodeType":"YulFunctionCall","src":"23851:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23874:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"23880:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23870:3:25"},"nodeType":"YulFunctionCall","src":"23870:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23844:6:25"},"nodeType":"YulFunctionCall","src":"23844:47:25"},"nodeType":"YulExpressionStatement","src":"23844:47:25"},{"nodeType":"YulAssignment","src":"23900:139:25","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24034:4:25"}],"functionName":{"name":"abi_encode_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23908:124:25"},"nodeType":"YulFunctionCall","src":"23908:131:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23900:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23778:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23793:4:25","type":""}],"src":"23627:419:25"},{"body":{"nodeType":"YulBlock","src":"24080:152:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24097:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24100:77:25","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24090:6:25"},"nodeType":"YulFunctionCall","src":"24090:88:25"},"nodeType":"YulExpressionStatement","src":"24090:88:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24194:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"24197:4:25","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24187:6:25"},"nodeType":"YulFunctionCall","src":"24187:15:25"},"nodeType":"YulExpressionStatement","src":"24187:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24218:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24221:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24211:6:25"},"nodeType":"YulFunctionCall","src":"24211:15:25"},"nodeType":"YulExpressionStatement","src":"24211:15:25"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"24052:180:25"},{"body":{"nodeType":"YulBlock","src":"24364:206:25","statements":[{"nodeType":"YulAssignment","src":"24374:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24386:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24397:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24382:3:25"},"nodeType":"YulFunctionCall","src":"24382:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24374:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24454:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24467:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24478:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24463:3:25"},"nodeType":"YulFunctionCall","src":"24463:17:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"24410:43:25"},"nodeType":"YulFunctionCall","src":"24410:71:25"},"nodeType":"YulExpressionStatement","src":"24410:71:25"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24535:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24548:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"24559:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24544:3:25"},"nodeType":"YulFunctionCall","src":"24544:18:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"24491:43:25"},"nodeType":"YulFunctionCall","src":"24491:72:25"},"nodeType":"YulExpressionStatement","src":"24491:72:25"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24328:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24340:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24348:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24359:4:25","type":""}],"src":"24238:332:25"},{"body":{"nodeType":"YulBlock","src":"24604:152:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24621:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24624:77:25","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24614:6:25"},"nodeType":"YulFunctionCall","src":"24614:88:25"},"nodeType":"YulExpressionStatement","src":"24614:88:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24718:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"24721:4:25","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24711:6:25"},"nodeType":"YulFunctionCall","src":"24711:15:25"},"nodeType":"YulExpressionStatement","src":"24711:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24742:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24745:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24735:6:25"},"nodeType":"YulFunctionCall","src":"24735:15:25"},"nodeType":"YulExpressionStatement","src":"24735:15:25"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"24576:180:25"},{"body":{"nodeType":"YulBlock","src":"24805:190:25","statements":[{"nodeType":"YulAssignment","src":"24815:33:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24842:5:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24824:17:25"},"nodeType":"YulFunctionCall","src":"24824:24:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24815:5:25"}]},{"body":{"nodeType":"YulBlock","src":"24938:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"24940:16:25"},"nodeType":"YulFunctionCall","src":"24940:18:25"},"nodeType":"YulExpressionStatement","src":"24940:18:25"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24863:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"24870:66:25","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"24860:2:25"},"nodeType":"YulFunctionCall","src":"24860:77:25"},"nodeType":"YulIf","src":"24857:103:25"},{"nodeType":"YulAssignment","src":"24969:20:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24980:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"24987:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24976:3:25"},"nodeType":"YulFunctionCall","src":"24976:13:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"24969:3:25"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24791:5:25","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"24801:3:25","type":""}],"src":"24762:233:25"},{"body":{"nodeType":"YulBlock","src":"25029:152:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25046:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25049:77:25","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25039:6:25"},"nodeType":"YulFunctionCall","src":"25039:88:25"},"nodeType":"YulExpressionStatement","src":"25039:88:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25143:1:25","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25146:4:25","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25136:6:25"},"nodeType":"YulFunctionCall","src":"25136:15:25"},"nodeType":"YulExpressionStatement","src":"25136:15:25"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25167:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25170:4:25","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25160:6:25"},"nodeType":"YulFunctionCall","src":"25160:15:25"},"nodeType":"YulExpressionStatement","src":"25160:15:25"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"25001:180:25"},{"body":{"nodeType":"YulBlock","src":"25238:269:25","statements":[{"nodeType":"YulAssignment","src":"25248:22:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"25262:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"25268:1:25","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"25258:3:25"},"nodeType":"YulFunctionCall","src":"25258:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"25248:6:25"}]},{"nodeType":"YulVariableDeclaration","src":"25279:38:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"25309:4:25"},{"kind":"number","nodeType":"YulLiteral","src":"25315:1:25","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25305:3:25"},"nodeType":"YulFunctionCall","src":"25305:12:25"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"25283:18:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"25356:51:25","statements":[{"nodeType":"YulAssignment","src":"25370:27:25","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"25384:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"25392:4:25","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25380:3:25"},"nodeType":"YulFunctionCall","src":"25380:17:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"25370:6:25"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"25336:18:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"25329:6:25"},"nodeType":"YulFunctionCall","src":"25329:26:25"},"nodeType":"YulIf","src":"25326:81:25"},{"body":{"nodeType":"YulBlock","src":"25459:42:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"25473:16:25"},"nodeType":"YulFunctionCall","src":"25473:18:25"},"nodeType":"YulExpressionStatement","src":"25473:18:25"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"25423:18:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"25446:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"25454:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"25443:2:25"},"nodeType":"YulFunctionCall","src":"25443:14:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"25420:2:25"},"nodeType":"YulFunctionCall","src":"25420:38:25"},"nodeType":"YulIf","src":"25417:84:25"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"25222:4:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"25231:6:25","type":""}],"src":"25187:320:25"},{"body":{"nodeType":"YulBlock","src":"25619:115:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25641:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"25649:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25637:3:25"},"nodeType":"YulFunctionCall","src":"25637:14:25"},{"hexValue":"73656e646572206973206e6f74206f776e657220666f72207468697320746f6b","kind":"string","nodeType":"YulLiteral","src":"25653:34:25","type":"","value":"sender is not owner for this tok"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25630:6:25"},"nodeType":"YulFunctionCall","src":"25630:58:25"},"nodeType":"YulExpressionStatement","src":"25630:58:25"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25709:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"25717:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25705:3:25"},"nodeType":"YulFunctionCall","src":"25705:15:25"},{"hexValue":"656e","kind":"string","nodeType":"YulLiteral","src":"25722:4:25","type":"","value":"en"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25698:6:25"},"nodeType":"YulFunctionCall","src":"25698:29:25"},"nodeType":"YulExpressionStatement","src":"25698:29:25"}]},"name":"store_literal_in_memory_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"25611:6:25","type":""}],"src":"25513:221:25"},{"body":{"nodeType":"YulBlock","src":"25886:220:25","statements":[{"nodeType":"YulAssignment","src":"25896:74:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25962:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"25967:2:25","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25903:58:25"},"nodeType":"YulFunctionCall","src":"25903:67:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25896:3:25"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26068:3:25"}],"functionName":{"name":"store_literal_in_memory_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75","nodeType":"YulIdentifier","src":"25979:88:25"},"nodeType":"YulFunctionCall","src":"25979:93:25"},"nodeType":"YulExpressionStatement","src":"25979:93:25"},{"nodeType":"YulAssignment","src":"26081:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26092:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"26097:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26088:3:25"},"nodeType":"YulFunctionCall","src":"26088:12:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26081:3:25"}]}]},"name":"abi_encode_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25874:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25882:3:25","type":""}],"src":"25740:366:25"},{"body":{"nodeType":"YulBlock","src":"26283:248:25","statements":[{"nodeType":"YulAssignment","src":"26293:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26305:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"26316:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26301:3:25"},"nodeType":"YulFunctionCall","src":"26301:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26293:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26340:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"26351:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26336:3:25"},"nodeType":"YulFunctionCall","src":"26336:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26359:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"26365:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26355:3:25"},"nodeType":"YulFunctionCall","src":"26355:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26329:6:25"},"nodeType":"YulFunctionCall","src":"26329:47:25"},"nodeType":"YulExpressionStatement","src":"26329:47:25"},{"nodeType":"YulAssignment","src":"26385:139:25","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26519:4:25"}],"functionName":{"name":"abi_encode_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26393:124:25"},"nodeType":"YulFunctionCall","src":"26393:131:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26385:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26263:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26278:4:25","type":""}],"src":"26112:419:25"},{"body":{"nodeType":"YulBlock","src":"26581:147:25","statements":[{"nodeType":"YulAssignment","src":"26591:25:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"26614:1:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26596:17:25"},"nodeType":"YulFunctionCall","src":"26596:20:25"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"26591:1:25"}]},{"nodeType":"YulAssignment","src":"26625:25:25","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"26648:1:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"26630:17:25"},"nodeType":"YulFunctionCall","src":"26630:20:25"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"26625:1:25"}]},{"nodeType":"YulAssignment","src":"26659:16:25","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"26670:1:25"},{"name":"y","nodeType":"YulIdentifier","src":"26673:1:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26666:3:25"},"nodeType":"YulFunctionCall","src":"26666:9:25"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"26659:3:25"}]},{"body":{"nodeType":"YulBlock","src":"26699:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"26701:16:25"},"nodeType":"YulFunctionCall","src":"26701:18:25"},"nodeType":"YulExpressionStatement","src":"26701:18:25"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"26691:1:25"},{"name":"sum","nodeType":"YulIdentifier","src":"26694:3:25"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26688:2:25"},"nodeType":"YulFunctionCall","src":"26688:10:25"},"nodeType":"YulIf","src":"26685:36:25"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"26568:1:25","type":""},{"name":"y","nodeType":"YulTypedName","src":"26571:1:25","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"26577:3:25","type":""}],"src":"26537:191:25"},{"body":{"nodeType":"YulBlock","src":"26840:71:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26862:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"26870:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26858:3:25"},"nodeType":"YulFunctionCall","src":"26858:14:25"},{"hexValue":"6e657720737570706c7920776f756c6420657863656564206d6178","kind":"string","nodeType":"YulLiteral","src":"26874:29:25","type":"","value":"new supply would exceed max"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26851:6:25"},"nodeType":"YulFunctionCall","src":"26851:53:25"},"nodeType":"YulExpressionStatement","src":"26851:53:25"}]},"name":"store_literal_in_memory_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26832:6:25","type":""}],"src":"26734:177:25"},{"body":{"nodeType":"YulBlock","src":"27063:220:25","statements":[{"nodeType":"YulAssignment","src":"27073:74:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27139:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"27144:2:25","type":"","value":"27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27080:58:25"},"nodeType":"YulFunctionCall","src":"27080:67:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27073:3:25"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27245:3:25"}],"functionName":{"name":"store_literal_in_memory_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483","nodeType":"YulIdentifier","src":"27156:88:25"},"nodeType":"YulFunctionCall","src":"27156:93:25"},"nodeType":"YulExpressionStatement","src":"27156:93:25"},{"nodeType":"YulAssignment","src":"27258:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27269:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"27274:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27265:3:25"},"nodeType":"YulFunctionCall","src":"27265:12:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27258:3:25"}]}]},"name":"abi_encode_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27051:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27059:3:25","type":""}],"src":"26917:366:25"},{"body":{"nodeType":"YulBlock","src":"27460:248:25","statements":[{"nodeType":"YulAssignment","src":"27470:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27482:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"27493:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27478:3:25"},"nodeType":"YulFunctionCall","src":"27478:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27470:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27517:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"27528:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27513:3:25"},"nodeType":"YulFunctionCall","src":"27513:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27536:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"27542:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27532:3:25"},"nodeType":"YulFunctionCall","src":"27532:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27506:6:25"},"nodeType":"YulFunctionCall","src":"27506:47:25"},"nodeType":"YulExpressionStatement","src":"27506:47:25"},{"nodeType":"YulAssignment","src":"27562:139:25","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27696:4:25"}],"functionName":{"name":"abi_encode_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27570:124:25"},"nodeType":"YulFunctionCall","src":"27570:131:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27562:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27440:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27455:4:25","type":""}],"src":"27289:419:25"},{"body":{"nodeType":"YulBlock","src":"27774:77:25","statements":[{"nodeType":"YulAssignment","src":"27784:22:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"27799:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27793:5:25"},"nodeType":"YulFunctionCall","src":"27793:13:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"27784:5:25"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27839:5:25"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"27815:23:25"},"nodeType":"YulFunctionCall","src":"27815:30:25"},"nodeType":"YulExpressionStatement","src":"27815:30:25"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"27752:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"27760:3:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"27768:5:25","type":""}],"src":"27714:137:25"},{"body":{"nodeType":"YulBlock","src":"27931:271:25","statements":[{"body":{"nodeType":"YulBlock","src":"27977:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"27979:77:25"},"nodeType":"YulFunctionCall","src":"27979:79:25"},"nodeType":"YulExpressionStatement","src":"27979:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"27952:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"27961:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27948:3:25"},"nodeType":"YulFunctionCall","src":"27948:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"27973:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"27944:3:25"},"nodeType":"YulFunctionCall","src":"27944:32:25"},"nodeType":"YulIf","src":"27941:119:25"},{"nodeType":"YulBlock","src":"28070:125:25","statements":[{"nodeType":"YulVariableDeclaration","src":"28085:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"28099:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"28089:6:25","type":""}]},{"nodeType":"YulAssignment","src":"28114:71:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28157:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"28168:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28153:3:25"},"nodeType":"YulFunctionCall","src":"28153:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"28177:7:25"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"28124:28:25"},"nodeType":"YulFunctionCall","src":"28124:61:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"28114:6:25"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27901:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"27912:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"27924:6:25","type":""}],"src":"27857:345:25"},{"body":{"nodeType":"YulBlock","src":"28334:206:25","statements":[{"nodeType":"YulAssignment","src":"28344:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28356:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28367:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28352:3:25"},"nodeType":"YulFunctionCall","src":"28352:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28344:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28424:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28437:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28448:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28433:3:25"},"nodeType":"YulFunctionCall","src":"28433:17:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28380:43:25"},"nodeType":"YulFunctionCall","src":"28380:71:25"},"nodeType":"YulExpressionStatement","src":"28380:71:25"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28505:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28518:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"28529:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28514:3:25"},"nodeType":"YulFunctionCall","src":"28514:18:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28461:43:25"},"nodeType":"YulFunctionCall","src":"28461:72:25"},"nodeType":"YulExpressionStatement","src":"28461:72:25"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28298:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28310:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28318:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28329:4:25","type":""}],"src":"28208:332:25"},{"body":{"nodeType":"YulBlock","src":"28652:57:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28674:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"28682:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28670:3:25"},"nodeType":"YulFunctionCall","src":"28670:14:25"},{"hexValue":"30206e6f7420616c6c6f776564","kind":"string","nodeType":"YulLiteral","src":"28686:15:25","type":"","value":"0 not allowed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28663:6:25"},"nodeType":"YulFunctionCall","src":"28663:39:25"},"nodeType":"YulExpressionStatement","src":"28663:39:25"}]},"name":"store_literal_in_memory_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28644:6:25","type":""}],"src":"28546:163:25"},{"body":{"nodeType":"YulBlock","src":"28861:220:25","statements":[{"nodeType":"YulAssignment","src":"28871:74:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28937:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"28942:2:25","type":"","value":"13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28878:58:25"},"nodeType":"YulFunctionCall","src":"28878:67:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28871:3:25"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29043:3:25"}],"functionName":{"name":"store_literal_in_memory_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2","nodeType":"YulIdentifier","src":"28954:88:25"},"nodeType":"YulFunctionCall","src":"28954:93:25"},"nodeType":"YulExpressionStatement","src":"28954:93:25"},{"nodeType":"YulAssignment","src":"29056:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29067:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"29072:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29063:3:25"},"nodeType":"YulFunctionCall","src":"29063:12:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29056:3:25"}]}]},"name":"abi_encode_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28849:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28857:3:25","type":""}],"src":"28715:366:25"},{"body":{"nodeType":"YulBlock","src":"29258:248:25","statements":[{"nodeType":"YulAssignment","src":"29268:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29280:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"29291:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29276:3:25"},"nodeType":"YulFunctionCall","src":"29276:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29268:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29315:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"29326:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29311:3:25"},"nodeType":"YulFunctionCall","src":"29311:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29334:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"29340:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29330:3:25"},"nodeType":"YulFunctionCall","src":"29330:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29304:6:25"},"nodeType":"YulFunctionCall","src":"29304:47:25"},"nodeType":"YulExpressionStatement","src":"29304:47:25"},{"nodeType":"YulAssignment","src":"29360:139:25","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29494:4:25"}],"functionName":{"name":"abi_encode_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29368:124:25"},"nodeType":"YulFunctionCall","src":"29368:131:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29360:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29238:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29253:4:25","type":""}],"src":"29087:419:25"},{"body":{"nodeType":"YulBlock","src":"29565:32:25","statements":[{"nodeType":"YulAssignment","src":"29575:16:25","value":{"name":"value","nodeType":"YulIdentifier","src":"29586:5:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"29575:7:25"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29547:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"29557:7:25","type":""}],"src":"29512:85:25"},{"body":{"nodeType":"YulBlock","src":"29647:57:25","statements":[{"nodeType":"YulAssignment","src":"29657:41:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29672:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"29679:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"29668:3:25"},"nodeType":"YulFunctionCall","src":"29668:30:25"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"29657:7:25"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29629:5:25","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"29639:7:25","type":""}],"src":"29603:101:25"},{"body":{"nodeType":"YulBlock","src":"29742:28:25","statements":[{"nodeType":"YulAssignment","src":"29752:12:25","value":{"name":"value","nodeType":"YulIdentifier","src":"29759:5:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"29752:3:25"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29728:5:25","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"29738:3:25","type":""}],"src":"29710:60:25"},{"body":{"nodeType":"YulBlock","src":"29843:89:25","statements":[{"nodeType":"YulAssignment","src":"29853:73:25","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29918:5:25"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"29892:25:25"},"nodeType":"YulFunctionCall","src":"29892:32:25"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"29883:8:25"},"nodeType":"YulFunctionCall","src":"29883:42:25"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"29866:16:25"},"nodeType":"YulFunctionCall","src":"29866:60:25"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"29853:9:25"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29823:5:25","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"29833:9:25","type":""}],"src":"29776:156:25"},{"body":{"nodeType":"YulBlock","src":"30010:73:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30027:3:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30070:5:25"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint64","nodeType":"YulIdentifier","src":"30032:37:25"},"nodeType":"YulFunctionCall","src":"30032:44:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30020:6:25"},"nodeType":"YulFunctionCall","src":"30020:57:25"},"nodeType":"YulExpressionStatement","src":"30020:57:25"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29998:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"30005:3:25","type":""}],"src":"29938:145:25"},{"body":{"nodeType":"YulBlock","src":"30194:131:25","statements":[{"nodeType":"YulAssignment","src":"30204:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30216:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"30227:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30212:3:25"},"nodeType":"YulFunctionCall","src":"30212:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30204:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"30291:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30304:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"30315:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30300:3:25"},"nodeType":"YulFunctionCall","src":"30300:17:25"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"30240:50:25"},"nodeType":"YulFunctionCall","src":"30240:78:25"},"nodeType":"YulExpressionStatement","src":"30240:78:25"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30166:9:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"30178:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30189:4:25","type":""}],"src":"30089:236:25"},{"body":{"nodeType":"YulBlock","src":"30437:117:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30459:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"30467:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30455:3:25"},"nodeType":"YulFunctionCall","src":"30455:14:25"},{"hexValue":"6e6577206d6178696d756d20737570706c7920776f756c642065786365656420","kind":"string","nodeType":"YulLiteral","src":"30471:34:25","type":"","value":"new maximum supply would exceed "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30448:6:25"},"nodeType":"YulFunctionCall","src":"30448:58:25"},"nodeType":"YulExpressionStatement","src":"30448:58:25"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30527:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"30535:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30523:3:25"},"nodeType":"YulFunctionCall","src":"30523:15:25"},{"hexValue":"31303030","kind":"string","nodeType":"YulLiteral","src":"30540:6:25","type":"","value":"1000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30516:6:25"},"nodeType":"YulFunctionCall","src":"30516:31:25"},"nodeType":"YulExpressionStatement","src":"30516:31:25"}]},"name":"store_literal_in_memory_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30429:6:25","type":""}],"src":"30331:223:25"},{"body":{"nodeType":"YulBlock","src":"30706:220:25","statements":[{"nodeType":"YulAssignment","src":"30716:74:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30782:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"30787:2:25","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30723:58:25"},"nodeType":"YulFunctionCall","src":"30723:67:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30716:3:25"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30888:3:25"}],"functionName":{"name":"store_literal_in_memory_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae","nodeType":"YulIdentifier","src":"30799:88:25"},"nodeType":"YulFunctionCall","src":"30799:93:25"},"nodeType":"YulExpressionStatement","src":"30799:93:25"},{"nodeType":"YulAssignment","src":"30901:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30912:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"30917:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30908:3:25"},"nodeType":"YulFunctionCall","src":"30908:12:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30901:3:25"}]}]},"name":"abi_encode_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30694:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30702:3:25","type":""}],"src":"30560:366:25"},{"body":{"nodeType":"YulBlock","src":"31103:248:25","statements":[{"nodeType":"YulAssignment","src":"31113:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31125:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"31136:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31121:3:25"},"nodeType":"YulFunctionCall","src":"31121:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31113:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31160:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"31171:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31156:3:25"},"nodeType":"YulFunctionCall","src":"31156:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31179:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"31185:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31175:3:25"},"nodeType":"YulFunctionCall","src":"31175:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31149:6:25"},"nodeType":"YulFunctionCall","src":"31149:47:25"},"nodeType":"YulExpressionStatement","src":"31149:47:25"},{"nodeType":"YulAssignment","src":"31205:139:25","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31339:4:25"}],"functionName":{"name":"abi_encode_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31213:124:25"},"nodeType":"YulFunctionCall","src":"31213:131:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31205:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31083:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31098:4:25","type":""}],"src":"30932:419:25"},{"body":{"nodeType":"YulBlock","src":"31463:73:25","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31485:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"31493:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31481:3:25"},"nodeType":"YulFunctionCall","src":"31481:14:25"},{"hexValue":"617274697374206e6f742073657420666f72207468697320746f6b656e","kind":"string","nodeType":"YulLiteral","src":"31497:31:25","type":"","value":"artist not set for this token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31474:6:25"},"nodeType":"YulFunctionCall","src":"31474:55:25"},"nodeType":"YulExpressionStatement","src":"31474:55:25"}]},"name":"store_literal_in_memory_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31455:6:25","type":""}],"src":"31357:179:25"},{"body":{"nodeType":"YulBlock","src":"31688:220:25","statements":[{"nodeType":"YulAssignment","src":"31698:74:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31764:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"31769:2:25","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31705:58:25"},"nodeType":"YulFunctionCall","src":"31705:67:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31698:3:25"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31870:3:25"}],"functionName":{"name":"store_literal_in_memory_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51","nodeType":"YulIdentifier","src":"31781:88:25"},"nodeType":"YulFunctionCall","src":"31781:93:25"},"nodeType":"YulExpressionStatement","src":"31781:93:25"},{"nodeType":"YulAssignment","src":"31883:19:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31894:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"31899:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31890:3:25"},"nodeType":"YulFunctionCall","src":"31890:12:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31883:3:25"}]}]},"name":"abi_encode_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31676:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31684:3:25","type":""}],"src":"31542:366:25"},{"body":{"nodeType":"YulBlock","src":"32085:248:25","statements":[{"nodeType":"YulAssignment","src":"32095:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32107:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"32118:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32103:3:25"},"nodeType":"YulFunctionCall","src":"32103:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32095:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32142:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"32153:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32138:3:25"},"nodeType":"YulFunctionCall","src":"32138:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32161:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"32167:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32157:3:25"},"nodeType":"YulFunctionCall","src":"32157:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32131:6:25"},"nodeType":"YulFunctionCall","src":"32131:47:25"},"nodeType":"YulExpressionStatement","src":"32131:47:25"},{"nodeType":"YulAssignment","src":"32187:139:25","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32321:4:25"}],"functionName":{"name":"abi_encode_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32195:124:25"},"nodeType":"YulFunctionCall","src":"32195:131:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32187:4:25"}]}]},"name":"abi_encode_tuple_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32065:9:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32080:4:25","type":""}],"src":"31914:419:25"},{"body":{"nodeType":"YulBlock","src":"32393:87:25","statements":[{"nodeType":"YulAssignment","src":"32403:11:25","value":{"name":"ptr","nodeType":"YulIdentifier","src":"32411:3:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"32403:4:25"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32431:1:25","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"32434:3:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32424:6:25"},"nodeType":"YulFunctionCall","src":"32424:14:25"},"nodeType":"YulExpressionStatement","src":"32424:14:25"},{"nodeType":"YulAssignment","src":"32447:26:25","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32465:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32468:4:25","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"32455:9:25"},"nodeType":"YulFunctionCall","src":"32455:18:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"32447:4:25"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"32380:3:25","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"32388:4:25","type":""}],"src":"32339:141:25"},{"body":{"nodeType":"YulBlock","src":"32530:49:25","statements":[{"nodeType":"YulAssignment","src":"32540:33:25","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32558:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"32565:2:25","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32554:3:25"},"nodeType":"YulFunctionCall","src":"32554:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"32570:2:25","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"32550:3:25"},"nodeType":"YulFunctionCall","src":"32550:23:25"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"32540:6:25"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32513:5:25","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"32523:6:25","type":""}],"src":"32486:93:25"},{"body":{"nodeType":"YulBlock","src":"32638:54:25","statements":[{"nodeType":"YulAssignment","src":"32648:37:25","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"32673:4:25"},{"name":"value","nodeType":"YulIdentifier","src":"32679:5:25"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"32669:3:25"},"nodeType":"YulFunctionCall","src":"32669:16:25"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"32648:8:25"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"32613:4:25","type":""},{"name":"value","nodeType":"YulTypedName","src":"32619:5:25","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"32629:8:25","type":""}],"src":"32585:107:25"},{"body":{"nodeType":"YulBlock","src":"32774:317:25","statements":[{"nodeType":"YulVariableDeclaration","src":"32784:35:25","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"32805:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"32817:1:25","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"32801:3:25"},"nodeType":"YulFunctionCall","src":"32801:18:25"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"32788:9:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"32828:109:25","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"32859:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"32870:66:25","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"32840:18:25"},"nodeType":"YulFunctionCall","src":"32840:97:25"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"32832:4:25","type":""}]},{"nodeType":"YulAssignment","src":"32946:51:25","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"32977:9:25"},{"name":"toInsert","nodeType":"YulIdentifier","src":"32988:8:25"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"32958:18:25"},"nodeType":"YulFunctionCall","src":"32958:39:25"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"32946:8:25"}]},{"nodeType":"YulAssignment","src":"33006:30:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33019:5:25"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"33030:4:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"33026:3:25"},"nodeType":"YulFunctionCall","src":"33026:9:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"33015:3:25"},"nodeType":"YulFunctionCall","src":"33015:21:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"33006:5:25"}]},{"nodeType":"YulAssignment","src":"33045:40:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33058:5:25"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"33069:8:25"},{"name":"mask","nodeType":"YulIdentifier","src":"33079:4:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"33065:3:25"},"nodeType":"YulFunctionCall","src":"33065:19:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"33055:2:25"},"nodeType":"YulFunctionCall","src":"33055:30:25"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"33045:6:25"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32735:5:25","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"32742:10:25","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"32754:8:25","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"32767:6:25","type":""}],"src":"32698:393:25"},{"body":{"nodeType":"YulBlock","src":"33157:82:25","statements":[{"nodeType":"YulAssignment","src":"33167:66:25","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33225:5:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"33207:17:25"},"nodeType":"YulFunctionCall","src":"33207:24:25"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"33198:8:25"},"nodeType":"YulFunctionCall","src":"33198:34:25"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"33180:17:25"},"nodeType":"YulFunctionCall","src":"33180:53:25"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"33167:9:25"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33137:5:25","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"33147:9:25","type":""}],"src":"33097:142:25"},{"body":{"nodeType":"YulBlock","src":"33292:28:25","statements":[{"nodeType":"YulAssignment","src":"33302:12:25","value":{"name":"value","nodeType":"YulIdentifier","src":"33309:5:25"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"33302:3:25"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33278:5:25","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"33288:3:25","type":""}],"src":"33245:75:25"},{"body":{"nodeType":"YulBlock","src":"33402:193:25","statements":[{"nodeType":"YulVariableDeclaration","src":"33412:63:25","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"33467:7:25"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"33436:30:25"},"nodeType":"YulFunctionCall","src":"33436:39:25"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"33416:16:25","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"33491:4:25"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"33531:4:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"33525:5:25"},"nodeType":"YulFunctionCall","src":"33525:11:25"},{"name":"offset","nodeType":"YulIdentifier","src":"33538:6:25"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"33570:16:25"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"33546:23:25"},"nodeType":"YulFunctionCall","src":"33546:41:25"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"33497:27:25"},"nodeType":"YulFunctionCall","src":"33497:91:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"33484:6:25"},"nodeType":"YulFunctionCall","src":"33484:105:25"},"nodeType":"YulExpressionStatement","src":"33484:105:25"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"33379:4:25","type":""},{"name":"offset","nodeType":"YulTypedName","src":"33385:6:25","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"33393:7:25","type":""}],"src":"33326:269:25"},{"body":{"nodeType":"YulBlock","src":"33650:24:25","statements":[{"nodeType":"YulAssignment","src":"33660:8:25","value":{"kind":"number","nodeType":"YulLiteral","src":"33667:1:25","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"33660:3:25"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"33646:3:25","type":""}],"src":"33601:73:25"},{"body":{"nodeType":"YulBlock","src":"33733:136:25","statements":[{"nodeType":"YulVariableDeclaration","src":"33743:46:25","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"33757:30:25"},"nodeType":"YulFunctionCall","src":"33757:32:25"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"33747:6:25","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"33842:4:25"},{"name":"offset","nodeType":"YulIdentifier","src":"33848:6:25"},{"name":"zero_0","nodeType":"YulIdentifier","src":"33856:6:25"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"33798:43:25"},"nodeType":"YulFunctionCall","src":"33798:65:25"},"nodeType":"YulExpressionStatement","src":"33798:65:25"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"33719:4:25","type":""},{"name":"offset","nodeType":"YulTypedName","src":"33725:6:25","type":""}],"src":"33680:189:25"},{"body":{"nodeType":"YulBlock","src":"33925:136:25","statements":[{"body":{"nodeType":"YulBlock","src":"33992:63:25","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"34036:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"34043:1:25","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"34006:29:25"},"nodeType":"YulFunctionCall","src":"34006:39:25"},"nodeType":"YulExpressionStatement","src":"34006:39:25"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"33945:5:25"},{"name":"end","nodeType":"YulIdentifier","src":"33952:3:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"33942:2:25"},"nodeType":"YulFunctionCall","src":"33942:14:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"33957:26:25","statements":[{"nodeType":"YulAssignment","src":"33959:22:25","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"33972:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"33979:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33968:3:25"},"nodeType":"YulFunctionCall","src":"33968:13:25"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"33959:5:25"}]}]},"pre":{"nodeType":"YulBlock","src":"33939:2:25","statements":[]},"src":"33935:120:25"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"33913:5:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"33920:3:25","type":""}],"src":"33875:186:25"},{"body":{"nodeType":"YulBlock","src":"34146:464:25","statements":[{"body":{"nodeType":"YulBlock","src":"34172:431:25","statements":[{"nodeType":"YulVariableDeclaration","src":"34186:54:25","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"34234:5:25"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"34202:31:25"},"nodeType":"YulFunctionCall","src":"34202:38:25"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"34190:8:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"34253:63:25","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"34276:8:25"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"34304:10:25"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"34286:17:25"},"nodeType":"YulFunctionCall","src":"34286:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34272:3:25"},"nodeType":"YulFunctionCall","src":"34272:44:25"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"34257:11:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"34473:27:25","statements":[{"nodeType":"YulAssignment","src":"34475:23:25","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"34490:8:25"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"34475:11:25"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"34457:10:25"},{"kind":"number","nodeType":"YulLiteral","src":"34469:2:25","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"34454:2:25"},"nodeType":"YulFunctionCall","src":"34454:18:25"},"nodeType":"YulIf","src":"34451:49:25"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"34542:11:25"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"34559:8:25"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"34587:3:25"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"34569:17:25"},"nodeType":"YulFunctionCall","src":"34569:22:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34555:3:25"},"nodeType":"YulFunctionCall","src":"34555:37:25"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"34513:28:25"},"nodeType":"YulFunctionCall","src":"34513:80:25"},"nodeType":"YulExpressionStatement","src":"34513:80:25"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"34163:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"34168:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"34160:2:25"},"nodeType":"YulFunctionCall","src":"34160:11:25"},"nodeType":"YulIf","src":"34157:446:25"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"34122:5:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"34129:3:25","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"34134:10:25","type":""}],"src":"34067:543:25"},{"body":{"nodeType":"YulBlock","src":"34679:54:25","statements":[{"nodeType":"YulAssignment","src":"34689:37:25","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"34714:4:25"},{"name":"value","nodeType":"YulIdentifier","src":"34720:5:25"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"34710:3:25"},"nodeType":"YulFunctionCall","src":"34710:16:25"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"34689:8:25"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"34654:4:25","type":""},{"name":"value","nodeType":"YulTypedName","src":"34660:5:25","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"34670:8:25","type":""}],"src":"34616:117:25"},{"body":{"nodeType":"YulBlock","src":"34790:118:25","statements":[{"nodeType":"YulVariableDeclaration","src":"34800:68:25","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34849:1:25","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"34852:5:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"34845:3:25"},"nodeType":"YulFunctionCall","src":"34845:13:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34864:1:25","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"34860:3:25"},"nodeType":"YulFunctionCall","src":"34860:6:25"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"34816:28:25"},"nodeType":"YulFunctionCall","src":"34816:51:25"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"34812:3:25"},"nodeType":"YulFunctionCall","src":"34812:56:25"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"34804:4:25","type":""}]},{"nodeType":"YulAssignment","src":"34877:25:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"34891:4:25"},{"name":"mask","nodeType":"YulIdentifier","src":"34897:4:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34887:3:25"},"nodeType":"YulFunctionCall","src":"34887:15:25"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"34877:6:25"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"34767:4:25","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"34773:5:25","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"34783:6:25","type":""}],"src":"34739:169:25"},{"body":{"nodeType":"YulBlock","src":"34994:214:25","statements":[{"nodeType":"YulAssignment","src":"35127:37:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"35154:4:25"},{"name":"len","nodeType":"YulIdentifier","src":"35160:3:25"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"35135:18:25"},"nodeType":"YulFunctionCall","src":"35135:29:25"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"35127:4:25"}]},{"nodeType":"YulAssignment","src":"35173:29:25","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"35184:4:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35194:1:25","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"35197:3:25"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"35190:3:25"},"nodeType":"YulFunctionCall","src":"35190:11:25"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"35181:2:25"},"nodeType":"YulFunctionCall","src":"35181:21:25"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"35173:4:25"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"34975:4:25","type":""},{"name":"len","nodeType":"YulTypedName","src":"34981:3:25","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"34989:4:25","type":""}],"src":"34913:295:25"},{"body":{"nodeType":"YulBlock","src":"35305:1303:25","statements":[{"nodeType":"YulVariableDeclaration","src":"35316:51:25","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"35363:3:25"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"35330:32:25"},"nodeType":"YulFunctionCall","src":"35330:37:25"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"35320:6:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"35452:22:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"35454:16:25"},"nodeType":"YulFunctionCall","src":"35454:18:25"},"nodeType":"YulExpressionStatement","src":"35454:18:25"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"35424:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"35432:18:25","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"35421:2:25"},"nodeType":"YulFunctionCall","src":"35421:30:25"},"nodeType":"YulIf","src":"35418:56:25"},{"nodeType":"YulVariableDeclaration","src":"35484:52:25","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35530:4:25"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"35524:5:25"},"nodeType":"YulFunctionCall","src":"35524:11:25"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"35498:25:25"},"nodeType":"YulFunctionCall","src":"35498:38:25"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"35488:6:25","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35629:4:25"},{"name":"oldLen","nodeType":"YulIdentifier","src":"35635:6:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"35643:6:25"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"35583:45:25"},"nodeType":"YulFunctionCall","src":"35583:67:25"},"nodeType":"YulExpressionStatement","src":"35583:67:25"},{"nodeType":"YulVariableDeclaration","src":"35660:18:25","value":{"kind":"number","nodeType":"YulLiteral","src":"35677:1:25","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"35664:9:25","type":""}]},{"nodeType":"YulAssignment","src":"35688:17:25","value":{"kind":"number","nodeType":"YulLiteral","src":"35701:4:25","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"35688:9:25"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"35752:611:25","statements":[{"nodeType":"YulVariableDeclaration","src":"35766:37:25","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"35785:6:25"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35797:4:25","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"35793:3:25"},"nodeType":"YulFunctionCall","src":"35793:9:25"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"35781:3:25"},"nodeType":"YulFunctionCall","src":"35781:22:25"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"35770:7:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"35817:51:25","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"35863:4:25"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"35831:31:25"},"nodeType":"YulFunctionCall","src":"35831:37:25"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"35821:6:25","type":""}]},{"nodeType":"YulVariableDeclaration","src":"35881:10:25","value":{"kind":"number","nodeType":"YulLiteral","src":"35890:1:25","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"35885:1:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"35949:163:25","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"35974:6:25"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"35992:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"35997:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35988:3:25"},"nodeType":"YulFunctionCall","src":"35988:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"35982:5:25"},"nodeType":"YulFunctionCall","src":"35982:26:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"35967:6:25"},"nodeType":"YulFunctionCall","src":"35967:42:25"},"nodeType":"YulExpressionStatement","src":"35967:42:25"},{"nodeType":"YulAssignment","src":"36026:24:25","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"36040:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"36048:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36036:3:25"},"nodeType":"YulFunctionCall","src":"36036:14:25"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"36026:6:25"}]},{"nodeType":"YulAssignment","src":"36067:31:25","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"36084:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"36095:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36080:3:25"},"nodeType":"YulFunctionCall","src":"36080:18:25"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"36067:9:25"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"35915:1:25"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"35918:7:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"35912:2:25"},"nodeType":"YulFunctionCall","src":"35912:14:25"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"35927:21:25","statements":[{"nodeType":"YulAssignment","src":"35929:17:25","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"35938:1:25"},{"kind":"number","nodeType":"YulLiteral","src":"35941:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35934:3:25"},"nodeType":"YulFunctionCall","src":"35934:12:25"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"35929:1:25"}]}]},"pre":{"nodeType":"YulBlock","src":"35908:3:25","statements":[]},"src":"35904:208:25"},{"body":{"nodeType":"YulBlock","src":"36148:156:25","statements":[{"nodeType":"YulVariableDeclaration","src":"36166:43:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"36193:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"36198:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36189:3:25"},"nodeType":"YulFunctionCall","src":"36189:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"36183:5:25"},"nodeType":"YulFunctionCall","src":"36183:26:25"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"36170:9:25","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"36233:6:25"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"36260:9:25"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"36275:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"36283:4:25","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"36271:3:25"},"nodeType":"YulFunctionCall","src":"36271:17:25"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"36241:18:25"},"nodeType":"YulFunctionCall","src":"36241:48:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"36226:6:25"},"nodeType":"YulFunctionCall","src":"36226:64:25"},"nodeType":"YulExpressionStatement","src":"36226:64:25"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"36131:7:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"36140:6:25"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"36128:2:25"},"nodeType":"YulFunctionCall","src":"36128:19:25"},"nodeType":"YulIf","src":"36125:179:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"36324:4:25"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"36338:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"36346:1:25","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"36334:3:25"},"nodeType":"YulFunctionCall","src":"36334:14:25"},{"kind":"number","nodeType":"YulLiteral","src":"36350:1:25","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36330:3:25"},"nodeType":"YulFunctionCall","src":"36330:22:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"36317:6:25"},"nodeType":"YulFunctionCall","src":"36317:36:25"},"nodeType":"YulExpressionStatement","src":"36317:36:25"}]},"nodeType":"YulCase","src":"35745:618:25","value":{"kind":"number","nodeType":"YulLiteral","src":"35750:1:25","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"36380:222:25","statements":[{"nodeType":"YulVariableDeclaration","src":"36394:14:25","value":{"kind":"number","nodeType":"YulLiteral","src":"36407:1:25","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"36398:5:25","type":""}]},{"body":{"nodeType":"YulBlock","src":"36431:67:25","statements":[{"nodeType":"YulAssignment","src":"36449:35:25","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"36468:3:25"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"36473:9:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36464:3:25"},"nodeType":"YulFunctionCall","src":"36464:19:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"36458:5:25"},"nodeType":"YulFunctionCall","src":"36458:26:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"36449:5:25"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"36424:6:25"},"nodeType":"YulIf","src":"36421:77:25"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"36518:4:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36577:5:25"},{"name":"newLen","nodeType":"YulIdentifier","src":"36584:6:25"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"36524:52:25"},"nodeType":"YulFunctionCall","src":"36524:67:25"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"36511:6:25"},"nodeType":"YulFunctionCall","src":"36511:81:25"},"nodeType":"YulExpressionStatement","src":"36511:81:25"}]},"nodeType":"YulCase","src":"36372:230:25","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"35725:6:25"},{"kind":"number","nodeType":"YulLiteral","src":"35733:2:25","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"35722:2:25"},"nodeType":"YulFunctionCall","src":"35722:14:25"},"nodeType":"YulSwitch","src":"35715:887:25"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"35294:4:25","type":""},{"name":"src","nodeType":"YulTypedName","src":"35300:3:25","type":""}],"src":"35213:1395:25"},{"body":{"nodeType":"YulBlock","src":"36740:206:25","statements":[{"nodeType":"YulAssignment","src":"36750:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36762:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"36773:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36758:3:25"},"nodeType":"YulFunctionCall","src":"36758:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36750:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"36830:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36843:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"36854:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36839:3:25"},"nodeType":"YulFunctionCall","src":"36839:17:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"36786:43:25"},"nodeType":"YulFunctionCall","src":"36786:71:25"},"nodeType":"YulExpressionStatement","src":"36786:71:25"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"36911:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36924:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"36935:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36920:3:25"},"nodeType":"YulFunctionCall","src":"36920:18:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"36867:43:25"},"nodeType":"YulFunctionCall","src":"36867:72:25"},"nodeType":"YulExpressionStatement","src":"36867:72:25"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36704:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"36716:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"36724:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36735:4:25","type":""}],"src":"36614:332:25"},{"body":{"nodeType":"YulBlock","src":"36995:79:25","statements":[{"body":{"nodeType":"YulBlock","src":"37052:16:25","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37061:1:25","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"37064:1:25","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"37054:6:25"},"nodeType":"YulFunctionCall","src":"37054:12:25"},"nodeType":"YulExpressionStatement","src":"37054:12:25"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37018:5:25"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37043:5:25"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"37025:17:25"},"nodeType":"YulFunctionCall","src":"37025:24:25"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"37015:2:25"},"nodeType":"YulFunctionCall","src":"37015:35:25"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"37008:6:25"},"nodeType":"YulFunctionCall","src":"37008:43:25"},"nodeType":"YulIf","src":"37005:63:25"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"36988:5:25","type":""}],"src":"36952:122:25"},{"body":{"nodeType":"YulBlock","src":"37143:80:25","statements":[{"nodeType":"YulAssignment","src":"37153:22:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"37168:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"37162:5:25"},"nodeType":"YulFunctionCall","src":"37162:13:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"37153:5:25"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37211:5:25"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"37184:26:25"},"nodeType":"YulFunctionCall","src":"37184:33:25"},"nodeType":"YulExpressionStatement","src":"37184:33:25"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"37121:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"37129:3:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"37137:5:25","type":""}],"src":"37080:143:25"},{"body":{"nodeType":"YulBlock","src":"37306:274:25","statements":[{"body":{"nodeType":"YulBlock","src":"37352:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"37354:77:25"},"nodeType":"YulFunctionCall","src":"37354:79:25"},"nodeType":"YulExpressionStatement","src":"37354:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"37327:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"37336:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"37323:3:25"},"nodeType":"YulFunctionCall","src":"37323:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"37348:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"37319:3:25"},"nodeType":"YulFunctionCall","src":"37319:32:25"},"nodeType":"YulIf","src":"37316:119:25"},{"nodeType":"YulBlock","src":"37445:128:25","statements":[{"nodeType":"YulVariableDeclaration","src":"37460:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"37474:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"37464:6:25","type":""}]},{"nodeType":"YulAssignment","src":"37489:74:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37535:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"37546:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37531:3:25"},"nodeType":"YulFunctionCall","src":"37531:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"37555:7:25"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"37499:31:25"},"nodeType":"YulFunctionCall","src":"37499:64:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"37489:6:25"}]}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"37276:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"37287:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"37299:6:25","type":""}],"src":"37229:351:25"},{"body":{"nodeType":"YulBlock","src":"37644:40:25","statements":[{"nodeType":"YulAssignment","src":"37655:22:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37671:5:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"37665:5:25"},"nodeType":"YulFunctionCall","src":"37665:12:25"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"37655:6:25"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37627:5:25","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"37637:6:25","type":""}],"src":"37586:98:25"},{"body":{"nodeType":"YulBlock","src":"37785:73:25","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37802:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"37807:6:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37795:6:25"},"nodeType":"YulFunctionCall","src":"37795:19:25"},"nodeType":"YulExpressionStatement","src":"37795:19:25"},{"nodeType":"YulAssignment","src":"37823:29:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37842:3:25"},{"kind":"number","nodeType":"YulLiteral","src":"37847:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37838:3:25"},"nodeType":"YulFunctionCall","src":"37838:14:25"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"37823:11:25"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"37757:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"37762:6:25","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"37773:11:25","type":""}],"src":"37690:168:25"},{"body":{"nodeType":"YulBlock","src":"37954:283:25","statements":[{"nodeType":"YulVariableDeclaration","src":"37964:52:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38010:5:25"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"37978:31:25"},"nodeType":"YulFunctionCall","src":"37978:38:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"37968:6:25","type":""}]},{"nodeType":"YulAssignment","src":"38025:77:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38090:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"38095:6:25"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38032:57:25"},"nodeType":"YulFunctionCall","src":"38032:70:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"38025:3:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38150:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"38157:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38146:3:25"},"nodeType":"YulFunctionCall","src":"38146:16:25"},{"name":"pos","nodeType":"YulIdentifier","src":"38164:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"38169:6:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"38111:34:25"},"nodeType":"YulFunctionCall","src":"38111:65:25"},"nodeType":"YulExpressionStatement","src":"38111:65:25"},{"nodeType":"YulAssignment","src":"38185:46:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38196:3:25"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"38223:6:25"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"38201:21:25"},"nodeType":"YulFunctionCall","src":"38201:29:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38192:3:25"},"nodeType":"YulFunctionCall","src":"38192:39:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"38185:3:25"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37935:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"37942:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"37950:3:25","type":""}],"src":"37864:373:25"},{"body":{"nodeType":"YulBlock","src":"38471:523:25","statements":[{"nodeType":"YulAssignment","src":"38481:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38493:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"38504:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38489:3:25"},"nodeType":"YulFunctionCall","src":"38489:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38481:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"38562:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38575:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"38586:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38571:3:25"},"nodeType":"YulFunctionCall","src":"38571:17:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"38518:43:25"},"nodeType":"YulFunctionCall","src":"38518:71:25"},"nodeType":"YulExpressionStatement","src":"38518:71:25"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"38643:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38656:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"38667:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38652:3:25"},"nodeType":"YulFunctionCall","src":"38652:18:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"38599:43:25"},"nodeType":"YulFunctionCall","src":"38599:72:25"},"nodeType":"YulExpressionStatement","src":"38599:72:25"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"38725:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38738:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"38749:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38734:3:25"},"nodeType":"YulFunctionCall","src":"38734:18:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"38681:43:25"},"nodeType":"YulFunctionCall","src":"38681:72:25"},"nodeType":"YulExpressionStatement","src":"38681:72:25"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"38807:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38820:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"38831:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38816:3:25"},"nodeType":"YulFunctionCall","src":"38816:18:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"38763:43:25"},"nodeType":"YulFunctionCall","src":"38763:72:25"},"nodeType":"YulExpressionStatement","src":"38763:72:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38856:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"38867:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38852:3:25"},"nodeType":"YulFunctionCall","src":"38852:19:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38877:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"38883:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"38873:3:25"},"nodeType":"YulFunctionCall","src":"38873:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38845:6:25"},"nodeType":"YulFunctionCall","src":"38845:49:25"},"nodeType":"YulExpressionStatement","src":"38845:49:25"},{"nodeType":"YulAssignment","src":"38903:84:25","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"38973:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"38982:4:25"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38911:61:25"},"nodeType":"YulFunctionCall","src":"38911:76:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38903:4:25"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38411:9:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"38423:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"38431:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"38439:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"38447:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"38455:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38466:4:25","type":""}],"src":"38243:751:25"},{"body":{"nodeType":"YulBlock","src":"39062:79:25","statements":[{"nodeType":"YulAssignment","src":"39072:22:25","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"39087:6:25"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"39081:5:25"},"nodeType":"YulFunctionCall","src":"39081:13:25"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"39072:5:25"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"39129:5:25"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"39103:25:25"},"nodeType":"YulFunctionCall","src":"39103:32:25"},"nodeType":"YulExpressionStatement","src":"39103:32:25"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"39040:6:25","type":""},{"name":"end","nodeType":"YulTypedName","src":"39048:3:25","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"39056:5:25","type":""}],"src":"39000:141:25"},{"body":{"nodeType":"YulBlock","src":"39223:273:25","statements":[{"body":{"nodeType":"YulBlock","src":"39269:83:25","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"39271:77:25"},"nodeType":"YulFunctionCall","src":"39271:79:25"},"nodeType":"YulExpressionStatement","src":"39271:79:25"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"39244:7:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"39253:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39240:3:25"},"nodeType":"YulFunctionCall","src":"39240:23:25"},{"kind":"number","nodeType":"YulLiteral","src":"39265:2:25","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"39236:3:25"},"nodeType":"YulFunctionCall","src":"39236:32:25"},"nodeType":"YulIf","src":"39233:119:25"},{"nodeType":"YulBlock","src":"39362:127:25","statements":[{"nodeType":"YulVariableDeclaration","src":"39377:15:25","value":{"kind":"number","nodeType":"YulLiteral","src":"39391:1:25","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"39381:6:25","type":""}]},{"nodeType":"YulAssignment","src":"39406:73:25","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39451:9:25"},{"name":"offset","nodeType":"YulIdentifier","src":"39462:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39447:3:25"},"nodeType":"YulFunctionCall","src":"39447:22:25"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"39471:7:25"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"39416:30:25"},"nodeType":"YulFunctionCall","src":"39416:63:25"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"39406:6:25"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"39193:9:25","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"39204:7:25","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"39216:6:25","type":""}],"src":"39147:349:25"},{"body":{"nodeType":"YulBlock","src":"39830:725:25","statements":[{"nodeType":"YulAssignment","src":"39840:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39852:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"39863:3:25","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39848:3:25"},"nodeType":"YulFunctionCall","src":"39848:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39840:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"39921:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39934:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"39945:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39930:3:25"},"nodeType":"YulFunctionCall","src":"39930:17:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"39877:43:25"},"nodeType":"YulFunctionCall","src":"39877:71:25"},"nodeType":"YulExpressionStatement","src":"39877:71:25"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"40002:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40015:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"40026:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40011:3:25"},"nodeType":"YulFunctionCall","src":"40011:18:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"39958:43:25"},"nodeType":"YulFunctionCall","src":"39958:72:25"},"nodeType":"YulExpressionStatement","src":"39958:72:25"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40051:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"40062:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40047:3:25"},"nodeType":"YulFunctionCall","src":"40047:18:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"40071:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"40077:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40067:3:25"},"nodeType":"YulFunctionCall","src":"40067:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40040:6:25"},"nodeType":"YulFunctionCall","src":"40040:48:25"},"nodeType":"YulExpressionStatement","src":"40040:48:25"},{"nodeType":"YulAssignment","src":"40097:116:25","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"40199:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"40208:4:25"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"40105:93:25"},"nodeType":"YulFunctionCall","src":"40105:108:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40097:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40234:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"40245:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40230:3:25"},"nodeType":"YulFunctionCall","src":"40230:18:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"40254:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"40260:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40250:3:25"},"nodeType":"YulFunctionCall","src":"40250:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40223:6:25"},"nodeType":"YulFunctionCall","src":"40223:48:25"},"nodeType":"YulExpressionStatement","src":"40223:48:25"},{"nodeType":"YulAssignment","src":"40280:116:25","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"40382:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"40391:4:25"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"40288:93:25"},"nodeType":"YulFunctionCall","src":"40288:108:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40280:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40417:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"40428:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40413:3:25"},"nodeType":"YulFunctionCall","src":"40413:19:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"40438:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"40444:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40434:3:25"},"nodeType":"YulFunctionCall","src":"40434:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40406:6:25"},"nodeType":"YulFunctionCall","src":"40406:49:25"},"nodeType":"YulExpressionStatement","src":"40406:49:25"},{"nodeType":"YulAssignment","src":"40464:84:25","value":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"40534:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"40543:4:25"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"40472:61:25"},"nodeType":"YulFunctionCall","src":"40472:76:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40464:4:25"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"39770:9:25","type":""},{"name":"value4","nodeType":"YulTypedName","src":"39782:6:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"39790:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"39798:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"39806:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"39814:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"39825:4:25","type":""}],"src":"39502:1053:25"},{"body":{"nodeType":"YulBlock","src":"40674:34:25","statements":[{"nodeType":"YulAssignment","src":"40684:18:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"40699:3:25"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"40684:11:25"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"40646:3:25","type":""},{"name":"length","nodeType":"YulTypedName","src":"40651:6:25","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"40662:11:25","type":""}],"src":"40561:147:25"},{"body":{"nodeType":"YulBlock","src":"40822:278:25","statements":[{"nodeType":"YulVariableDeclaration","src":"40832:52:25","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"40878:5:25"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"40846:31:25"},"nodeType":"YulFunctionCall","src":"40846:38:25"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"40836:6:25","type":""}]},{"nodeType":"YulAssignment","src":"40893:95:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"40976:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"40981:6:25"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"40900:75:25"},"nodeType":"YulFunctionCall","src":"40900:88:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"40893:3:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"41036:5:25"},{"kind":"number","nodeType":"YulLiteral","src":"41043:4:25","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41032:3:25"},"nodeType":"YulFunctionCall","src":"41032:16:25"},{"name":"pos","nodeType":"YulIdentifier","src":"41050:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"41055:6:25"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"40997:34:25"},"nodeType":"YulFunctionCall","src":"40997:65:25"},"nodeType":"YulExpressionStatement","src":"40997:65:25"},{"nodeType":"YulAssignment","src":"41071:23:25","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"41082:3:25"},{"name":"length","nodeType":"YulIdentifier","src":"41087:6:25"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41078:3:25"},"nodeType":"YulFunctionCall","src":"41078:16:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"41071:3:25"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"40803:5:25","type":""},{"name":"pos","nodeType":"YulTypedName","src":"40810:3:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"40818:3:25","type":""}],"src":"40714:386:25"},{"body":{"nodeType":"YulBlock","src":"41240:137:25","statements":[{"nodeType":"YulAssignment","src":"41251:100:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"41338:6:25"},{"name":"pos","nodeType":"YulIdentifier","src":"41347:3:25"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"41258:79:25"},"nodeType":"YulFunctionCall","src":"41258:93:25"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"41251:3:25"}]},{"nodeType":"YulAssignment","src":"41361:10:25","value":{"name":"pos","nodeType":"YulIdentifier","src":"41368:3:25"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"41361:3:25"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"41219:3:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"41225:6:25","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"41236:3:25","type":""}],"src":"41106:271:25"},{"body":{"nodeType":"YulBlock","src":"41565:371:25","statements":[{"nodeType":"YulAssignment","src":"41575:27:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41587:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"41598:3:25","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41583:3:25"},"nodeType":"YulFunctionCall","src":"41583:19:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"41575:4:25"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"41656:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41669:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"41680:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41665:3:25"},"nodeType":"YulFunctionCall","src":"41665:17:25"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"41612:43:25"},"nodeType":"YulFunctionCall","src":"41612:71:25"},"nodeType":"YulExpressionStatement","src":"41612:71:25"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"41737:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41750:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"41761:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41746:3:25"},"nodeType":"YulFunctionCall","src":"41746:18:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"41693:43:25"},"nodeType":"YulFunctionCall","src":"41693:72:25"},"nodeType":"YulExpressionStatement","src":"41693:72:25"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"41819:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41832:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"41843:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41828:3:25"},"nodeType":"YulFunctionCall","src":"41828:18:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"41775:43:25"},"nodeType":"YulFunctionCall","src":"41775:72:25"},"nodeType":"YulExpressionStatement","src":"41775:72:25"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"41901:6:25"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"41914:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"41925:2:25","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41910:3:25"},"nodeType":"YulFunctionCall","src":"41910:18:25"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"41857:43:25"},"nodeType":"YulFunctionCall","src":"41857:72:25"},"nodeType":"YulExpressionStatement","src":"41857:72:25"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"41513:9:25","type":""},{"name":"value3","nodeType":"YulTypedName","src":"41525:6:25","type":""},{"name":"value2","nodeType":"YulTypedName","src":"41533:6:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"41541:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"41549:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"41560:4:25","type":""}],"src":"41383:553:25"},{"body":{"nodeType":"YulBlock","src":"42168:408:25","statements":[{"nodeType":"YulAssignment","src":"42178:26:25","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42190:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"42201:2:25","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42186:3:25"},"nodeType":"YulFunctionCall","src":"42186:18:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42178:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42225:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"42236:1:25","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42221:3:25"},"nodeType":"YulFunctionCall","src":"42221:17:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"42244:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"42250:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"42240:3:25"},"nodeType":"YulFunctionCall","src":"42240:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42214:6:25"},"nodeType":"YulFunctionCall","src":"42214:47:25"},"nodeType":"YulExpressionStatement","src":"42214:47:25"},{"nodeType":"YulAssignment","src":"42270:116:25","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"42372:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"42381:4:25"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42278:93:25"},"nodeType":"YulFunctionCall","src":"42278:108:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42270:4:25"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42407:9:25"},{"kind":"number","nodeType":"YulLiteral","src":"42418:2:25","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42403:3:25"},"nodeType":"YulFunctionCall","src":"42403:18:25"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"42427:4:25"},{"name":"headStart","nodeType":"YulIdentifier","src":"42433:9:25"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"42423:3:25"},"nodeType":"YulFunctionCall","src":"42423:20:25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42396:6:25"},"nodeType":"YulFunctionCall","src":"42396:48:25"},"nodeType":"YulExpressionStatement","src":"42396:48:25"},{"nodeType":"YulAssignment","src":"42453:116:25","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"42555:6:25"},{"name":"tail","nodeType":"YulIdentifier","src":"42564:4:25"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42461:93:25"},"nodeType":"YulFunctionCall","src":"42461:108:25"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42453:4:25"}]}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42132:9:25","type":""},{"name":"value1","nodeType":"YulTypedName","src":"42144:6:25","type":""},{"name":"value0","nodeType":"YulTypedName","src":"42152:6:25","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"42163:4:25","type":""}],"src":"41942:634:25"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_allocation_size_t_array$_t_address_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // address[]\n    function abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_address_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_address(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // address[]\n    function abi_decode_t_array$_t_address_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_address_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_array$_t_address_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_array$_t_address_$dyn_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_address_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d(memPtr) {\n\n        mstore(add(memPtr, 0), \"This is a dummy error\")\n\n    }\n\n    function abi_encode_t_stringliteral_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)\n        store_literal_in_memory_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7e52c6c23cbc74a1202f0b1347d0e73edcfa450196b5bbb51e878172c787547d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283(memPtr) {\n\n        mstore(add(memPtr, 0), \"not admin\")\n\n    }\n\n    function abi_encode_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 9)\n        store_literal_in_memory_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e28d3d4b0238f59994407ce2f3c10c2c3f25706d9d645a83b44428559d9ee283_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75(memPtr) {\n\n        mstore(add(memPtr, 0), \"sender is not owner for this tok\")\n\n        mstore(add(memPtr, 32), \"en\")\n\n    }\n\n    function abi_encode_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b0b9ec0108c0c67adfae3a9bd48439480e2dbd177e105bee08561433bb18ae75_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483(memPtr) {\n\n        mstore(add(memPtr, 0), \"new supply would exceed max\")\n\n    }\n\n    function abi_encode_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9340b77bcbe67485d6dd32395ee1f04f889f0b4bd3535fb90c70982903342483_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2(memPtr) {\n\n        mstore(add(memPtr, 0), \"0 not allowed\")\n\n    }\n\n    function abi_encode_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 13)\n        store_literal_in_memory_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_00e2bf98bf437f1a95ba8e041d90b6f470366e41e440d14411631ca369b93af2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint64(value) -> converted {\n        converted := cleanup_t_uint64(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae(memPtr) {\n\n        mstore(add(memPtr, 0), \"new maximum supply would exceed \")\n\n        mstore(add(memPtr, 32), \"1000\")\n\n    }\n\n    function abi_encode_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7c3251a9673f7907046bc27061b7a2da95087e4c92a5c189ee5bbdd6d33e6fae_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51(memPtr) {\n\n        mstore(add(memPtr, 0), \"artist not set for this token\")\n\n    }\n\n    function abi_encode_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0e5053b46cfad5d4ee9cfa11be704e5dc741abf6197a5e93a1bd481634f0bb51_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        mstore(add(headStart, 128), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value4,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__to_t_address_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value2,  tail)\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value3,  tail)\n\n        mstore(add(headStart, 128), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value4,  tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n}\n","id":25,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"468":[{"length":32,"start":7047},{"length":32,"start":7132},{"length":32,"start":7575}]},"linkReferences":{},"object":"6080604052600436106101d75760003560e01c806352d1902d11610102578063bb62550911610095578063e985e9c511610064578063e985e9c5146106cc578063f242432a14610709578063f2fde38b14610732578063fbe0a8921461075b576101d7565b8063bb62550914610614578063bd85b0391461063d578063c36497e51461067a578063d00e40ce146106a3576101d7565b80638da5cb5b116100d15780638da5cb5b1461056c5780639eca4b7b14610597578063a22cb465146105c0578063ad3cb1cc146105e9576101d7565b806352d1902d146104c457806370480275146104ef578063715018a614610518578063831ffd051461052f576101d7565b806318160ddd1161017a578063429b62e511610149578063429b62e5146103f15780634e1273f41461042e5780634f1ef2861461046b5780634f558e7914610487576101d7565b806318160ddd146103375780631b2ef1ca1461036257806324d7806c1461038b5780632eb2c2d6146103c8576101d7565b806306dd0419116101b657806306dd04191461027f578063077d9234146102a85780630e89341c146102d15780631785f53c1461030e576101d7565b8062fdd58e146101dc57806301ffc9a71461021957806302fe530514610256575b600080fd5b3480156101e857600080fd5b5061020360048036038101906101fe91906132f3565b610798565b6040516102109190613342565b60405180910390f35b34801561022557600080fd5b50610240600480360381019061023b91906133b5565b610801565b60405161024d91906133fd565b60405180910390f35b34801561026257600080fd5b5061027d6004803603810190610278919061355e565b61083e565b005b34801561028b57600080fd5b506102a660048036038101906102a191906132f3565b610852565b005b3480156102b457600080fd5b506102cf60048036038101906102ca9190613732565b6108ed565b005b3480156102dd57600080fd5b506102f860048036038101906102f391906137aa565b6109b2565b6040516103059190613856565b60405180910390f35b34801561031a57600080fd5b5061033560048036038101906103309190613878565b610a55565b005b34801561034357600080fd5b5061034c610aae565b6040516103599190613342565b60405180910390f35b34801561036e57600080fd5b50610389600480360381019061038491906138a5565b610ac6565b005b34801561039757600080fd5b506103b260048036038101906103ad9190613878565b610c22565b6040516103bf91906133fd565b60405180910390f35b3480156103d457600080fd5b506103ef60048036038101906103ea9190613986565b610c7e565b005b3480156103fd57600080fd5b5061041860048036038101906104139190613878565b610d4b565b60405161042591906133fd565b60405180910390f35b34801561043a57600080fd5b5061045560048036038101906104509190613732565b610d6b565b6040516104629190613b13565b60405180910390f35b61048560048036038101906104809190613b35565b610e7a565b005b34801561049357600080fd5b506104ae60048036038101906104a991906137aa565b610e99565b6040516104bb91906133fd565b60405180910390f35b3480156104d057600080fd5b506104d9610ead565b6040516104e69190613baa565b60405180910390f35b3480156104fb57600080fd5b5061051660048036038101906105119190613878565b610ee0565b005b34801561052457600080fd5b5061052d610f42565b005b34801561053b57600080fd5b50610556600480360381019061055191906137aa565b610f56565b6040516105639190613bd4565b60405180910390f35b34801561057857600080fd5b50610581610f89565b60405161058e9190613bd4565b60405180910390f35b3480156105a357600080fd5b506105be60048036038101906105b99190613bef565b610fc1565b005b3480156105cc57600080fd5b506105e760048036038101906105e29190613c5b565b6110e5565b005b3480156105f557600080fd5b506105fe6110f3565b60405161060b9190613856565b60405180910390f35b34801561062057600080fd5b5061063b60048036038101906106369190613c9b565b61112c565b005b34801561064957600080fd5b50610664600480360381019061065f91906137aa565b611367565b6040516106719190613342565b60405180910390f35b34801561068657600080fd5b506106a1600480360381019061069c91906138a5565b611392565b005b3480156106af57600080fd5b506106ca60048036038101906106c591906138a5565b6114ba565b005b3480156106d857600080fd5b506106f360048036038101906106ee9190613d26565b6116a2565b60405161070091906133fd565b60405180910390f35b34801561071557600080fd5b50610730600480360381019061072b9190613d66565b611711565b005b34801561073e57600080fd5b5061075960048036038101906107549190613878565b6117de565b005b34801561076757600080fd5b50610782600480360381019061077d91906137aa565b611864565b60405161078f9190613342565b60405180910390f35b6000806107a361187c565b905080600001600084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083590613e49565b60405180910390fd5b6108466118a4565b61084f8161192b565b50565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d490613eb5565b60405180910390fd5b6108e98282600161194d565b5050565b60005b82518110156109ad573073ffffffffffffffffffffffffffffffffffffffff166306dd041984838151811061092857610927613ed5565b5b602002602001015184848151811061094357610942613ed5565b5b60200260200101516040518363ffffffff1660e01b8152600401610968929190613f04565b600060405180830381600087803b15801561098257600080fd5b505af1158015610996573d6000803e3d6000fd5b5050505080806109a590613f5c565b9150506108f0565b505050565b606060006109be61187c565b90508060020180546109cf90613fd3565b80601f01602080910402602001604051908101604052809291908181526020018280546109fb90613fd3565b8015610a485780601f10610a1d57610100808354040283529160200191610a48565b820191906000526020600020905b815481529060010190602001808311610a2b57829003601f168201915b5050505050915050919050565b610a5d6118a4565b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff021916905550565b600080610ab96119f4565b9050806001015491505090565b3373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5e90614076565b60405180910390fd5b600260008381526020019081526020016000205481610b8584611367565b610b8f9190614096565b1115610bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc790614116565b60405180910390fd5b610c1e6001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838360405180602001604052806000815250611a1c565b5050565b6000600115156000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515149050919050565b3073ffffffffffffffffffffffffffffffffffffffff166324d7806c336040518263ffffffff1660e01b8152600401610cb79190613bd4565b602060405180830381865afa158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf8919061414b565b610d37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2e90613eb5565b60405180910390fd5b610d448585858585611ab5565b5050505050565b60006020528060005260406000206000915054906101000a900460ff1681565b60608151835114610db757815183516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401610dae929190614178565b60405180910390fd5b6000835167ffffffffffffffff811115610dd457610dd3613433565b5b604051908082528060200260200182016040528015610e025781602001602082028036833780820191505090505b50905060005b8451811015610e6f57610e3f610e278287611b5d90919063ffffffff16565b610e3a8387611b7190919063ffffffff16565b610798565b828281518110610e5257610e51613ed5565b5b60200260200101818152505080610e6890613f5c565b9050610e08565b508091505092915050565b610e82611b85565b610e8b82611c6b565b610e958282611c76565b5050565b600080610ea583611367565b119050919050565b6000610eb7611d95565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b610ee86118a4565b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610f4a6118a4565b610f546000611e1c565b565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610f94611ef3565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661104c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104390613eb5565b60405180910390fd5b6000820361108f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611086906141ed565b60405180910390fd5b806001600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6110ef8282611f1b565b5050565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b6000611136611f31565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156111845750825b9050600060018367ffffffffffffffff161480156111b9575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156111c7575080155b156111fe576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561124e5760018560000160086101000a81548160ff0219169083151502179055505b611256611f59565b61125f88611f63565b611267611f77565b6112708661192b565b60005b87518110156113005760016000808a848151811061129457611293613ed5565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806112f890613f5c565b915050611273565b50831561135d5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516113549190614266565b60405180910390a15b5050505050505050565b6000806113726119f4565b905080600001600084815260200190815260200160002054915050919050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661141d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141490613eb5565b60405180910390fd5b6103e881600260008581526020019081526020016000205461143f9190614096565b1115611480576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611477906142f3565b60405180910390fd5b80600260008481526020019081526020016000205461149f9190614096565b60026000848152602001908152602001600020819055505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153c90613eb5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036115e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115de9061435f565b60405180910390fd5b60026000838152602001908152602001600020548161160584611367565b61160f9190614096565b1115611650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164790614116565b60405180910390fd5b61169e6001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838360405180602001604052806000815250611a1c565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156116fe576001905061170b565b6117088383611f81565b90505b92915050565b3073ffffffffffffffffffffffffffffffffffffffff166324d7806c336040518263ffffffff1660e01b815260040161174a9190613bd4565b602060405180830381865afa158015611767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178b919061414b565b6117ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c190613eb5565b60405180910390fd5b6117d78585858585612023565b5050505050565b6117e66118a4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118585760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161184f9190613bd4565b60405180910390fd5b61186181611e1c565b50565b60026020528060005260406000206000915090505481565b60007f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500905090565b6118ac6120cb565b73ffffffffffffffffffffffffffffffffffffffff166118ca610f89565b73ffffffffffffffffffffffffffffffffffffffff1614611929576118ed6120cb565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016119209190613bd4565b60405180910390fd5b565b600061193561187c565b9050818160020190816119489190614521565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036119bf5760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016119b69190613bd4565b60405180910390fd5b6000806119cc84846120d3565b915091506119ed856000848460405180602001604052806000815250612103565b5050505050565b60007f4a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e2800905090565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611a8e5760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611a859190613bd4565b60405180910390fd5b600080611a9b85856120d3565b91509150611aad600087848487612103565b505050505050565b6000611abf6120cb565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015611b045750611b0286826116a2565b155b15611b485780866040517fe237d922000000000000000000000000000000000000000000000000000000008152600401611b3f9291906145f3565b60405180910390fd5b611b5586868686866121b5565b505050505050565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480611c3257507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611c196122ad565b73ffffffffffffffffffffffffffffffffffffffff1614155b15611c69576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611c736118a4565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611cde57506040513d601f19601f82011682018060405250810190611cdb9190614648565b60015b611d1f57816040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401611d169190613bd4565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114611d8657806040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600401611d7d9190613baa565b60405180910390fd5b611d908383612304565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611e1a576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000611e26611ef3565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b611f2d611f266120cb565b8383612377565b5050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b611f616124f6565b565b611f6b6124f6565b611f7481612536565b50565b611f7f6124f6565b565b600080611f8c61187c565b90508060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b600061202d6120cb565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015612072575061207086826116a2565b155b156120b65780866040517fe237d9220000000000000000000000000000000000000000000000000000000081526004016120ad9291906145f3565b60405180910390fd5b6120c386868686866125bc565b505050505050565b600033905090565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b61210f858585856126c7565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146121ae57600061214d6120cb565b9050600184510361219d57600061216e600086611b7190919063ffffffff16565b90506000612186600086611b7190919063ffffffff16565b9050612196838989858589612893565b50506121ac565b6121ab818787878787612a47565b5b505b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036122275760006040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161221e9190613bd4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036122995760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016122909190613bd4565b60405180910390fd5b6122a68585858585612103565b5050505050565b60006122db7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612bfb565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61230d82612c05565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a260008151111561236a576123648282612cd2565b50612373565b612372612d56565b5b5050565b600061238161187c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036123f55760006040517fced3e1000000000000000000000000000000000000000000000000000000000081526004016123ec9190613bd4565b60405180910390fd5b818160010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31846040516124e891906133fd565b60405180910390a350505050565b6124fe612d93565b612534576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61253e6124f6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036125b05760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016125a79190613bd4565b60405180910390fd5b6125b981611e1c565b50565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361262e5760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016126259190613bd4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036126a05760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016126979190613bd4565b60405180910390fd5b6000806126ad85856120d3565b915091506126be8787848487612103565b50505050505050565b60006126d16119f4565b90506126df85858585612db3565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036127c3576000805b84518110156127a557600084828151811061273557612734613ed5565b5b602002602001015190508084600001600088858151811061275957612758613ed5565b5b60200260200101518152602001908152602001600020600082825461277e9190614096565b9250508190555080836127919190614096565b9250508061279e90613f5c565b9050612717565b50808260010160008282546127ba9190614096565b92505081905550505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361288c576000805b845181101561287757600084828151811061281957612818613ed5565b5b602002602001015190508084600001600088858151811061283d5761283c613ed5565b5b60200260200101518152602001908152602001600020600082825403925050819055508083019250508061287090613f5c565b90506127fb565b50808260010160008282540392505081905550505b5050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115612a3f578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016128f49594939291906146ca565b6020604051808303816000875af192505050801561293057506040513d601f19601f8201168201806040525081019061292d9190614739565b60015b6129b4573d8060008114612960576040519150601f19603f3d011682016040523d82523d6000602084013e612965565b606091505b5060008151036129ac57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016129a39190613bd4565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612a3d57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612a349190613bd4565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115612bf3578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612aa8959493929190614766565b6020604051808303816000875af1925050508015612ae457506040513d601f19601f82011682018060405250810190612ae19190614739565b60015b612b68573d8060008114612b14576040519150601f19603f3d011682016040523d82523d6000602084013e612b19565b606091505b506000815103612b6057846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612b579190613bd4565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612bf157846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612be89190613bd4565b60405180910390fd5b505b505050505050565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b03612c6157806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401612c589190613bd4565b60405180910390fd5b80612c8e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612bfb565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051612cfc919061480a565b600060405180830381855af49150503d8060008114612d37576040519150601f19603f3d011682016040523d82523d6000602084013e612d3c565b606091505b5091509150612d4c858383613177565b9250505092915050565b6000341115612d91576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000612d9d611f31565b60000160089054906101000a900460ff16905090565b6000612dbd61187c565b90508151835114612e0957825182516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401612e00929190614178565b60405180910390fd5b6000612e136120cb565b905060005b8451811015613031576000612e368287611b7190919063ffffffff16565b90506000612e4d8387611b7190919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614612f8057600085600001600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612f2557898183856040517f03dee4c5000000000000000000000000000000000000000000000000000000008152600401612f1c9493929190614821565b60405180910390fd5b81810386600001600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461301e578085600001600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546130169190614096565b925050819055505b50508061302a90613f5c565b9050612e18565b5060018451036130f0576000613051600086611b7190919063ffffffff16565b90506000613069600086611b7190919063ffffffff16565b90508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6285856040516130e1929190614178565b60405180910390a4505061316f565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051613166929190614866565b60405180910390a45b505050505050565b60608261318c5761318782613206565b6131fe565b600082511480156131b4575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156131f657836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016131ed9190613bd4565b60405180910390fd5b8190506131ff565b5b9392505050565b6000815111156132195780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061328a8261325f565b9050919050565b61329a8161327f565b81146132a557600080fd5b50565b6000813590506132b781613291565b92915050565b6000819050919050565b6132d0816132bd565b81146132db57600080fd5b50565b6000813590506132ed816132c7565b92915050565b6000806040838503121561330a57613309613255565b5b6000613318858286016132a8565b9250506020613329858286016132de565b9150509250929050565b61333c816132bd565b82525050565b60006020820190506133576000830184613333565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6133928161335d565b811461339d57600080fd5b50565b6000813590506133af81613389565b92915050565b6000602082840312156133cb576133ca613255565b5b60006133d9848285016133a0565b91505092915050565b60008115159050919050565b6133f7816133e2565b82525050565b600060208201905061341260008301846133ee565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61346b82613422565b810181811067ffffffffffffffff8211171561348a57613489613433565b5b80604052505050565b600061349d61324b565b90506134a98282613462565b919050565b600067ffffffffffffffff8211156134c9576134c8613433565b5b6134d282613422565b9050602081019050919050565b82818337600083830152505050565b60006135016134fc846134ae565b613493565b90508281526020810184848401111561351d5761351c61341d565b5b6135288482856134df565b509392505050565b600082601f83011261354557613544613418565b5b81356135558482602086016134ee565b91505092915050565b60006020828403121561357457613573613255565b5b600082013567ffffffffffffffff8111156135925761359161325a565b5b61359e84828501613530565b91505092915050565b600067ffffffffffffffff8211156135c2576135c1613433565b5b602082029050602081019050919050565b600080fd5b60006135eb6135e6846135a7565b613493565b9050808382526020820190506020840283018581111561360e5761360d6135d3565b5b835b81811015613637578061362388826132a8565b845260208401935050602081019050613610565b5050509392505050565b600082601f83011261365657613655613418565b5b81356136668482602086016135d8565b91505092915050565b600067ffffffffffffffff82111561368a57613689613433565b5b602082029050602081019050919050565b60006136ae6136a98461366f565b613493565b905080838252602082019050602084028301858111156136d1576136d06135d3565b5b835b818110156136fa57806136e688826132de565b8452602084019350506020810190506136d3565b5050509392505050565b600082601f83011261371957613718613418565b5b813561372984826020860161369b565b91505092915050565b6000806040838503121561374957613748613255565b5b600083013567ffffffffffffffff8111156137675761376661325a565b5b61377385828601613641565b925050602083013567ffffffffffffffff8111156137945761379361325a565b5b6137a085828601613704565b9150509250929050565b6000602082840312156137c0576137bf613255565b5b60006137ce848285016132de565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156138115780820151818401526020810190506137f6565b60008484015250505050565b6000613828826137d7565b61383281856137e2565b93506138428185602086016137f3565b61384b81613422565b840191505092915050565b60006020820190508181036000830152613870818461381d565b905092915050565b60006020828403121561388e5761388d613255565b5b600061389c848285016132a8565b91505092915050565b600080604083850312156138bc576138bb613255565b5b60006138ca858286016132de565b92505060206138db858286016132de565b9150509250929050565b600067ffffffffffffffff821115613900576138ff613433565b5b61390982613422565b9050602081019050919050565b6000613929613924846138e5565b613493565b9050828152602081018484840111156139455761394461341d565b5b6139508482856134df565b509392505050565b600082601f83011261396d5761396c613418565b5b813561397d848260208601613916565b91505092915050565b600080600080600060a086880312156139a2576139a1613255565b5b60006139b0888289016132a8565b95505060206139c1888289016132a8565b945050604086013567ffffffffffffffff8111156139e2576139e161325a565b5b6139ee88828901613704565b935050606086013567ffffffffffffffff811115613a0f57613a0e61325a565b5b613a1b88828901613704565b925050608086013567ffffffffffffffff811115613a3c57613a3b61325a565b5b613a4888828901613958565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613a8a816132bd565b82525050565b6000613a9c8383613a81565b60208301905092915050565b6000602082019050919050565b6000613ac082613a55565b613aca8185613a60565b9350613ad583613a71565b8060005b83811015613b06578151613aed8882613a90565b9750613af883613aa8565b925050600181019050613ad9565b5085935050505092915050565b60006020820190508181036000830152613b2d8184613ab5565b905092915050565b60008060408385031215613b4c57613b4b613255565b5b6000613b5a858286016132a8565b925050602083013567ffffffffffffffff811115613b7b57613b7a61325a565b5b613b8785828601613958565b9150509250929050565b6000819050919050565b613ba481613b91565b82525050565b6000602082019050613bbf6000830184613b9b565b92915050565b613bce8161327f565b82525050565b6000602082019050613be96000830184613bc5565b92915050565b60008060408385031215613c0657613c05613255565b5b6000613c14858286016132de565b9250506020613c25858286016132a8565b9150509250929050565b613c38816133e2565b8114613c4357600080fd5b50565b600081359050613c5581613c2f565b92915050565b60008060408385031215613c7257613c71613255565b5b6000613c80858286016132a8565b9250506020613c9185828601613c46565b9150509250929050565b600080600060608486031215613cb457613cb3613255565b5b6000613cc2868287016132a8565b935050602084013567ffffffffffffffff811115613ce357613ce261325a565b5b613cef86828701613641565b925050604084013567ffffffffffffffff811115613d1057613d0f61325a565b5b613d1c86828701613530565b9150509250925092565b60008060408385031215613d3d57613d3c613255565b5b6000613d4b858286016132a8565b9250506020613d5c858286016132a8565b9150509250929050565b600080600080600060a08688031215613d8257613d81613255565b5b6000613d90888289016132a8565b9550506020613da1888289016132a8565b9450506040613db2888289016132de565b9350506060613dc3888289016132de565b925050608086013567ffffffffffffffff811115613de457613de361325a565b5b613df088828901613958565b9150509295509295909350565b7f5468697320697320612064756d6d79206572726f720000000000000000000000600082015250565b6000613e336015836137e2565b9150613e3e82613dfd565b602082019050919050565b60006020820190508181036000830152613e6281613e26565b9050919050565b7f6e6f742061646d696e0000000000000000000000000000000000000000000000600082015250565b6000613e9f6009836137e2565b9150613eaa82613e69565b602082019050919050565b60006020820190508181036000830152613ece81613e92565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050613f196000830185613bc5565b613f266020830184613333565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613f67826132bd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613f9957613f98613f2d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613feb57607f821691505b602082108103613ffe57613ffd613fa4565b5b50919050565b7f73656e646572206973206e6f74206f776e657220666f72207468697320746f6b60008201527f656e000000000000000000000000000000000000000000000000000000000000602082015250565b60006140606022836137e2565b915061406b82614004565b604082019050919050565b6000602082019050818103600083015261408f81614053565b9050919050565b60006140a1826132bd565b91506140ac836132bd565b92508282019050808211156140c4576140c3613f2d565b5b92915050565b7f6e657720737570706c7920776f756c6420657863656564206d61780000000000600082015250565b6000614100601b836137e2565b915061410b826140ca565b602082019050919050565b6000602082019050818103600083015261412f816140f3565b9050919050565b60008151905061414581613c2f565b92915050565b60006020828403121561416157614160613255565b5b600061416f84828501614136565b91505092915050565b600060408201905061418d6000830185613333565b61419a6020830184613333565b9392505050565b7f30206e6f7420616c6c6f77656400000000000000000000000000000000000000600082015250565b60006141d7600d836137e2565b91506141e2826141a1565b602082019050919050565b60006020820190508181036000830152614206816141ca565b9050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b600061425061424b6142468461420d565b61422b565b614217565b9050919050565b61426081614235565b82525050565b600060208201905061427b6000830184614257565b92915050565b7f6e6577206d6178696d756d20737570706c7920776f756c64206578636565642060008201527f3130303000000000000000000000000000000000000000000000000000000000602082015250565b60006142dd6024836137e2565b91506142e882614281565b604082019050919050565b6000602082019050818103600083015261430c816142d0565b9050919050565b7f617274697374206e6f742073657420666f72207468697320746f6b656e000000600082015250565b6000614349601d836137e2565b915061435482614313565b602082019050919050565b600060208201905081810360008301526143788161433c565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026143e17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826143a4565b6143eb86836143a4565b95508019841693508086168417925050509392505050565b600061441e614419614414846132bd565b61422b565b6132bd565b9050919050565b6000819050919050565b61443883614403565b61444c61444482614425565b8484546143b1565b825550505050565b600090565b614461614454565b61446c81848461442f565b505050565b5b8181101561449057614485600082614459565b600181019050614472565b5050565b601f8211156144d5576144a68161437f565b6144af84614394565b810160208510156144be578190505b6144d26144ca85614394565b830182614471565b50505b505050565b600082821c905092915050565b60006144f8600019846008026144da565b1980831691505092915050565b600061451183836144e7565b9150826002028217905092915050565b61452a826137d7565b67ffffffffffffffff81111561454357614542613433565b5b61454d8254613fd3565b614558828285614494565b600060209050601f83116001811461458b5760008415614579578287015190505b6145838582614505565b8655506145eb565b601f1984166145998661437f565b60005b828110156145c15784890151825560018201915060208501945060208101905061459c565b868310156145de57848901516145da601f8916826144e7565b8355505b6001600288020188555050505b505050505050565b60006040820190506146086000830185613bc5565b6146156020830184613bc5565b9392505050565b61462581613b91565b811461463057600080fd5b50565b6000815190506146428161461c565b92915050565b60006020828403121561465e5761465d613255565b5b600061466c84828501614633565b91505092915050565b600081519050919050565b600082825260208201905092915050565b600061469c82614675565b6146a68185614680565b93506146b68185602086016137f3565b6146bf81613422565b840191505092915050565b600060a0820190506146df6000830188613bc5565b6146ec6020830187613bc5565b6146f96040830186613333565b6147066060830185613333565b81810360808301526147188184614691565b90509695505050505050565b60008151905061473381613389565b92915050565b60006020828403121561474f5761474e613255565b5b600061475d84828501614724565b91505092915050565b600060a08201905061477b6000830188613bc5565b6147886020830187613bc5565b818103604083015261479a8186613ab5565b905081810360608301526147ae8185613ab5565b905081810360808301526147c28184614691565b90509695505050505050565b600081905092915050565b60006147e482614675565b6147ee81856147ce565b93506147fe8185602086016137f3565b80840191505092915050565b600061481682846147d9565b915081905092915050565b60006080820190506148366000830187613bc5565b6148436020830186613333565b6148506040830185613333565b61485d6060830184613333565b95945050505050565b600060408201905081810360008301526148808185613ab5565b905081810360208301526148948184613ab5565b9050939250505056fea26469706673582212203b58cd0c0c28308fd991d3826cabeed5c38182e9fb2b173edf2e0197b31cf34164736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x52D1902D GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xBB625509 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xE985E9C5 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x6CC JUMPI DUP1 PUSH4 0xF242432A EQ PUSH2 0x709 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x732 JUMPI DUP1 PUSH4 0xFBE0A892 EQ PUSH2 0x75B JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0xBB625509 EQ PUSH2 0x614 JUMPI DUP1 PUSH4 0xBD85B039 EQ PUSH2 0x63D JUMPI DUP1 PUSH4 0xC36497E5 EQ PUSH2 0x67A JUMPI DUP1 PUSH4 0xD00E40CE EQ PUSH2 0x6A3 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x56C JUMPI DUP1 PUSH4 0x9ECA4B7B EQ PUSH2 0x597 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x5C0 JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x5E9 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x52D1902D EQ PUSH2 0x4C4 JUMPI DUP1 PUSH4 0x70480275 EQ PUSH2 0x4EF JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x518 JUMPI DUP1 PUSH4 0x831FFD05 EQ PUSH2 0x52F JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x429B62E5 GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x429B62E5 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0x4E1273F4 EQ PUSH2 0x42E JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x46B JUMPI DUP1 PUSH4 0x4F558E79 EQ PUSH2 0x487 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x18160DDD EQ PUSH2 0x337 JUMPI DUP1 PUSH4 0x1B2EF1CA EQ PUSH2 0x362 JUMPI DUP1 PUSH4 0x24D7806C EQ PUSH2 0x38B JUMPI DUP1 PUSH4 0x2EB2C2D6 EQ PUSH2 0x3C8 JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH4 0x6DD0419 GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x6DD0419 EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0x77D9234 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0xE89341C EQ PUSH2 0x2D1 JUMPI DUP1 PUSH4 0x1785F53C EQ PUSH2 0x30E JUMPI PUSH2 0x1D7 JUMP JUMPDEST DUP1 PUSH3 0xFDD58E EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0x2FE5305 EQ PUSH2 0x256 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x32F3 JUMP JUMPDEST PUSH2 0x798 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x210 SWAP2 SWAP1 PUSH2 0x3342 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x240 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23B SWAP2 SWAP1 PUSH2 0x33B5 JUMP JUMPDEST PUSH2 0x801 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24D SWAP2 SWAP1 PUSH2 0x33FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x278 SWAP2 SWAP1 PUSH2 0x355E JUMP JUMPDEST PUSH2 0x83E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x32F3 JUMP JUMPDEST PUSH2 0x852 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CA SWAP2 SWAP1 PUSH2 0x3732 JUMP JUMPDEST PUSH2 0x8ED JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F3 SWAP2 SWAP1 PUSH2 0x37AA JUMP JUMPDEST PUSH2 0x9B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x3856 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x335 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x330 SWAP2 SWAP1 PUSH2 0x3878 JUMP JUMPDEST PUSH2 0xA55 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x34C PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x359 SWAP2 SWAP1 PUSH2 0x3342 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x389 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x384 SWAP2 SWAP1 PUSH2 0x38A5 JUMP JUMPDEST PUSH2 0xAC6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x397 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3AD SWAP2 SWAP1 PUSH2 0x3878 JUMP JUMPDEST PUSH2 0xC22 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3BF SWAP2 SWAP1 PUSH2 0x33FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3EA SWAP2 SWAP1 PUSH2 0x3986 JUMP JUMPDEST PUSH2 0xC7E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x418 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x413 SWAP2 SWAP1 PUSH2 0x3878 JUMP JUMPDEST PUSH2 0xD4B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x425 SWAP2 SWAP1 PUSH2 0x33FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x455 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x450 SWAP2 SWAP1 PUSH2 0x3732 JUMP JUMPDEST PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x462 SWAP2 SWAP1 PUSH2 0x3B13 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x485 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x480 SWAP2 SWAP1 PUSH2 0x3B35 JUMP JUMPDEST PUSH2 0xE7A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4A9 SWAP2 SWAP1 PUSH2 0x37AA JUMP JUMPDEST PUSH2 0xE99 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4BB SWAP2 SWAP1 PUSH2 0x33FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D9 PUSH2 0xEAD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4E6 SWAP2 SWAP1 PUSH2 0x3BAA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x516 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x511 SWAP2 SWAP1 PUSH2 0x3878 JUMP JUMPDEST PUSH2 0xEE0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x524 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x52D PUSH2 0xF42 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x556 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x551 SWAP2 SWAP1 PUSH2 0x37AA JUMP JUMPDEST PUSH2 0xF56 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x563 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x581 PUSH2 0xF89 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x58E SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5BE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B9 SWAP2 SWAP1 PUSH2 0x3BEF JUMP JUMPDEST PUSH2 0xFC1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5E2 SWAP2 SWAP1 PUSH2 0x3C5B JUMP JUMPDEST PUSH2 0x10E5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5FE PUSH2 0x10F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x60B SWAP2 SWAP1 PUSH2 0x3856 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x620 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x63B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x636 SWAP2 SWAP1 PUSH2 0x3C9B JUMP JUMPDEST PUSH2 0x112C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x664 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x65F SWAP2 SWAP1 PUSH2 0x37AA JUMP JUMPDEST PUSH2 0x1367 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x671 SWAP2 SWAP1 PUSH2 0x3342 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x686 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x69C SWAP2 SWAP1 PUSH2 0x38A5 JUMP JUMPDEST PUSH2 0x1392 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6C5 SWAP2 SWAP1 PUSH2 0x38A5 JUMP JUMPDEST PUSH2 0x14BA JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x6EE SWAP2 SWAP1 PUSH2 0x3D26 JUMP JUMPDEST PUSH2 0x16A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x700 SWAP2 SWAP1 PUSH2 0x33FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x730 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x72B SWAP2 SWAP1 PUSH2 0x3D66 JUMP JUMPDEST PUSH2 0x1711 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x759 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x754 SWAP2 SWAP1 PUSH2 0x3878 JUMP JUMPDEST PUSH2 0x17DE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x767 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x782 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x77D SWAP2 SWAP1 PUSH2 0x37AA JUMP JUMPDEST PUSH2 0x1864 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78F SWAP2 SWAP1 PUSH2 0x3342 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x7A3 PUSH2 0x187C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x835 SWAP1 PUSH2 0x3E49 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x846 PUSH2 0x18A4 JUMP JUMPDEST PUSH2 0x84F DUP2 PUSH2 0x192B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x8DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D4 SWAP1 PUSH2 0x3EB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E9 DUP3 DUP3 PUSH1 0x1 PUSH2 0x194D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x9AD JUMPI ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6DD0419 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x928 JUMPI PUSH2 0x927 PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x943 JUMPI PUSH2 0x942 PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x968 SWAP3 SWAP2 SWAP1 PUSH2 0x3F04 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x982 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x996 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 DUP1 PUSH2 0x9A5 SWAP1 PUSH2 0x3F5C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8F0 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x9BE PUSH2 0x187C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x9CF SWAP1 PUSH2 0x3FD3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9FB SWAP1 PUSH2 0x3FD3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA48 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA1D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA48 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA2B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA5D PUSH2 0x18A4 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAB9 PUSH2 0x19F4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD SLOAD SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB67 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB5E SWAP1 PUSH2 0x4076 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 PUSH2 0xB85 DUP5 PUSH2 0x1367 JUMP JUMPDEST PUSH2 0xB8F SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST GT ISZERO PUSH2 0xBD0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC7 SWAP1 PUSH2 0x4116 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC1E PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1A1C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 ISZERO ISZERO PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x24D7806C CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCD4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCF8 SWAP2 SWAP1 PUSH2 0x414B JUMP JUMPDEST PUSH2 0xD37 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD2E SWAP1 PUSH2 0x3EB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD44 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x1AB5 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0xDB7 JUMPI DUP2 MLOAD DUP4 MLOAD PUSH1 0x40 MLOAD PUSH32 0x5B05999100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDAE SWAP3 SWAP2 SWAP1 PUSH2 0x4178 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xDD4 JUMPI PUSH2 0xDD3 PUSH2 0x3433 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE02 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xE6F JUMPI PUSH2 0xE3F PUSH2 0xE27 DUP3 DUP8 PUSH2 0x1B5D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xE3A DUP4 DUP8 PUSH2 0x1B71 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x798 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xE52 JUMPI PUSH2 0xE51 PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 PUSH2 0xE68 SWAP1 PUSH2 0x3F5C JUMP JUMPDEST SWAP1 POP PUSH2 0xE08 JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xE82 PUSH2 0x1B85 JUMP JUMPDEST PUSH2 0xE8B DUP3 PUSH2 0x1C6B JUMP JUMPDEST PUSH2 0xE95 DUP3 DUP3 PUSH2 0x1C76 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xEA5 DUP4 PUSH2 0x1367 JUMP JUMPDEST GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB7 PUSH2 0x1D95 JUMP JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xEE8 PUSH2 0x18A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0xF4A PUSH2 0x18A4 JUMP JUMPDEST PUSH2 0xF54 PUSH1 0x0 PUSH2 0x1E1C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF94 PUSH2 0x1EF3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x104C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1043 SWAP1 PUSH2 0x3EB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SUB PUSH2 0x108F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1086 SWAP1 PUSH2 0x41ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x10EF DUP3 DUP3 PUSH2 0x1F1B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x352E302E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1136 PUSH2 0x1F31 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP1 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x1184 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x11B9 JUMPI POP PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x11C7 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x11FE JUMPI PUSH1 0x40 MLOAD PUSH32 0xF92EE8A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 ISZERO PUSH2 0x124E JUMPI PUSH1 0x1 DUP6 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 0x1256 PUSH2 0x1F59 JUMP JUMPDEST PUSH2 0x125F DUP9 PUSH2 0x1F63 JUMP JUMPDEST PUSH2 0x1267 PUSH2 0x1F77 JUMP JUMPDEST PUSH2 0x1270 DUP7 PUSH2 0x192B JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x1300 JUMPI PUSH1 0x1 PUSH1 0x0 DUP1 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1294 JUMPI PUSH2 0x1293 PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH2 0x12F8 SWAP1 PUSH2 0x3F5C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1273 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x135D JUMPI PUSH1 0x0 DUP6 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x1354 SWAP2 SWAP1 PUSH2 0x4266 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1372 PUSH2 0x19F4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x141D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1414 SWAP1 PUSH2 0x3EB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3E8 DUP2 PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x143F SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST GT ISZERO PUSH2 0x1480 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1477 SWAP1 PUSH2 0x42F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x149F SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1545 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x153C SWAP1 PUSH2 0x3EB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x15E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15DE SWAP1 PUSH2 0x435F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 PUSH2 0x1605 DUP5 PUSH2 0x1367 JUMP JUMPDEST PUSH2 0x160F SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST GT ISZERO PUSH2 0x1650 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1647 SWAP1 PUSH2 0x4116 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x169E PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1A1C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x16FE JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0x170B JUMP JUMPDEST PUSH2 0x1708 DUP4 DUP4 PUSH2 0x1F81 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x24D7806C CALLER PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x174A SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1767 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x178B SWAP2 SWAP1 PUSH2 0x414B JUMP JUMPDEST PUSH2 0x17CA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17C1 SWAP1 PUSH2 0x3EB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x17D7 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2023 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x17E6 PUSH2 0x18A4 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1858 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x184F SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1861 DUP2 PUSH2 0x1E1C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x88BE536D5240C274A3B1D3A1BE54482FD9CAA294F08C62A7CDE569F49A3C4500 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x18AC PUSH2 0x20CB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18CA PUSH2 0xF89 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1929 JUMPI PUSH2 0x18ED PUSH2 0x20CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1920 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1935 PUSH2 0x187C JUMP JUMPDEST SWAP1 POP DUP2 DUP2 PUSH1 0x2 ADD SWAP1 DUP2 PUSH2 0x1948 SWAP2 SWAP1 PUSH2 0x4521 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x19BF JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1A8351400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19B6 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x19CC DUP5 DUP5 PUSH2 0x20D3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x19ED DUP6 PUSH1 0x0 DUP5 DUP5 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2103 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4A593662EE04D27B6A00EBB31BE7FE0C102C2ADE82A7C5D764F2DF05DC4E2800 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1A8E JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A85 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1A9B DUP6 DUP6 PUSH2 0x20D3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1AAD PUSH1 0x0 DUP8 DUP5 DUP5 DUP8 PUSH2 0x2103 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ABF PUSH2 0x20CB JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1B04 JUMPI POP PUSH2 0x1B02 DUP7 DUP3 PUSH2 0x16A2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1B48 JUMPI DUP1 DUP7 PUSH1 0x40 MLOAD PUSH32 0xE237D92200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B3F SWAP3 SWAP2 SWAP1 PUSH2 0x45F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1B55 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x21B5 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MUL PUSH1 0x20 DUP5 ADD ADD MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MUL PUSH1 0x20 DUP5 ADD ADD MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1C32 JUMPI POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C19 PUSH2 0x22AD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1C69 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE07C8DBA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x1C73 PUSH2 0x18A4 JUMP JUMPDEST POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1CDE JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CDB SWAP2 SWAP1 PUSH2 0x4648 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1D1F JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x4C9C8CE300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D16 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL DUP2 EQ PUSH2 0x1D86 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xAA1D49A400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D7D SWAP2 SWAP1 PUSH2 0x3BAA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1D90 DUP4 DUP4 PUSH2 0x2304 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1E1A JUMPI PUSH1 0x40 MLOAD PUSH32 0xE07C8DBA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E26 PUSH2 0x1EF3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1F2D PUSH2 0x1F26 PUSH2 0x20CB JUMP JUMPDEST DUP4 DUP4 PUSH2 0x2377 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1F61 PUSH2 0x24F6 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1F6B PUSH2 0x24F6 JUMP JUMPDEST PUSH2 0x1F74 DUP2 PUSH2 0x2536 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1F7F PUSH2 0x24F6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1F8C PUSH2 0x187C JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202D PUSH2 0x20CB JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2072 JUMPI POP PUSH2 0x2070 DUP7 DUP3 PUSH2 0x16A2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x20B6 JUMPI DUP1 DUP7 PUSH1 0x40 MLOAD PUSH32 0xE237D92200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20AD SWAP3 SWAP2 SWAP1 PUSH2 0x45F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x20C3 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x25BC JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH1 0x1 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD PUSH1 0x40 MSTORE SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x210F DUP6 DUP6 DUP6 DUP6 PUSH2 0x26C7 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x21AE JUMPI PUSH1 0x0 PUSH2 0x214D PUSH2 0x20CB JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP5 MLOAD SUB PUSH2 0x219D JUMPI PUSH1 0x0 PUSH2 0x216E PUSH1 0x0 DUP7 PUSH2 0x1B71 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2186 PUSH1 0x0 DUP7 PUSH2 0x1B71 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x2196 DUP4 DUP10 DUP10 DUP6 DUP6 DUP10 PUSH2 0x2893 JUMP JUMPDEST POP POP PUSH2 0x21AC JUMP JUMPDEST PUSH2 0x21AB DUP2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2A47 JUMP JUMPDEST JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2227 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x221E SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2299 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1A8351400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2290 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x22A6 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH2 0x2103 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22DB PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x2BFB JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x230D DUP3 PUSH2 0x2C05 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x236A JUMPI PUSH2 0x2364 DUP3 DUP3 PUSH2 0x2CD2 JUMP JUMPDEST POP PUSH2 0x2373 JUMP JUMPDEST PUSH2 0x2372 PUSH2 0x2D56 JUMP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2381 PUSH2 0x187C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x23F5 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xCED3E10000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23EC SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x1 ADD PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP5 PUSH1 0x40 MLOAD PUSH2 0x24E8 SWAP2 SWAP1 PUSH2 0x33FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x24FE PUSH2 0x2D93 JUMP JUMPDEST PUSH2 0x2534 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD7E6BCF800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x253E PUSH2 0x24F6 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x25B0 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x25A7 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x25B9 DUP2 PUSH2 0x1E1C JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x262E JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2625 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x26A0 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1A8351400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2697 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x26AD DUP6 DUP6 PUSH2 0x20D3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x26BE DUP8 DUP8 DUP5 DUP5 DUP8 PUSH2 0x2103 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26D1 PUSH2 0x19F4 JUMP JUMPDEST SWAP1 POP PUSH2 0x26DF DUP6 DUP6 DUP6 DUP6 PUSH2 0x2DB3 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x27C3 JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x27A5 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2735 JUMPI PUSH2 0x2734 PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2759 JUMPI PUSH2 0x2758 PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x277E SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP4 PUSH2 0x2791 SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST SWAP3 POP POP DUP1 PUSH2 0x279E SWAP1 PUSH2 0x3F5C JUMP JUMPDEST SWAP1 POP PUSH2 0x2717 JUMP JUMPDEST POP DUP1 DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x27BA SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x288C JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x2877 JUMPI PUSH1 0x0 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2819 JUMPI PUSH2 0x2818 PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP1 DUP5 PUSH1 0x0 ADD PUSH1 0x0 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x283D JUMPI PUSH2 0x283C PUSH2 0x3ED5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP4 ADD SWAP3 POP POP DUP1 PUSH2 0x2870 SWAP1 PUSH2 0x3F5C JUMP JUMPDEST SWAP1 POP PUSH2 0x27FB JUMP JUMPDEST POP DUP1 DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x2A3F JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF23A6E61 DUP8 DUP8 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28F4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x46CA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2930 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x292D SWAP2 SWAP1 PUSH2 0x4739 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x29B4 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2960 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2965 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x29AC JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29A3 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x2A3D JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A34 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x2BF3 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBC197C81 DUP8 DUP8 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AA8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4766 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2AE4 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2AE1 SWAP2 SWAP1 PUSH2 0x4739 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2B68 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2B14 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2B19 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x2B60 JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B57 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x2BF1 JUMPI DUP5 PUSH1 0x40 MLOAD PUSH32 0x57F447CE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2BE8 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE SUB PUSH2 0x2C61 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x4C9C8CE300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C58 SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x2C8E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x2BFB JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x2CFC SWAP2 SWAP1 PUSH2 0x480A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2D37 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2D3C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2D4C DUP6 DUP4 DUP4 PUSH2 0x3177 JUMP JUMPDEST SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT ISZERO PUSH2 0x2D91 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB398979F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D9D PUSH2 0x1F31 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DBD PUSH2 0x187C JUMP JUMPDEST SWAP1 POP DUP2 MLOAD DUP4 MLOAD EQ PUSH2 0x2E09 JUMPI DUP3 MLOAD DUP3 MLOAD PUSH1 0x40 MLOAD PUSH32 0x5B05999100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E00 SWAP3 SWAP2 SWAP1 PUSH2 0x4178 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2E13 PUSH2 0x20CB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x3031 JUMPI PUSH1 0x0 PUSH2 0x2E36 DUP3 DUP8 PUSH2 0x1B71 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2E4D DUP4 DUP8 PUSH2 0x1B71 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2F80 JUMPI PUSH1 0x0 DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x2F25 JUMPI DUP10 DUP2 DUP4 DUP6 PUSH1 0x40 MLOAD PUSH32 0x3DEE4C500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F1C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4821 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP7 PUSH1 0x0 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x301E JUMPI DUP1 DUP6 PUSH1 0x0 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3016 SWAP2 SWAP1 PUSH2 0x4096 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST POP POP DUP1 PUSH2 0x302A SWAP1 PUSH2 0x3F5C JUMP JUMPDEST SWAP1 POP PUSH2 0x2E18 JUMP JUMPDEST POP PUSH1 0x1 DUP5 MLOAD SUB PUSH2 0x30F0 JUMPI PUSH1 0x0 PUSH2 0x3051 PUSH1 0x0 DUP7 PUSH2 0x1B71 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3069 PUSH1 0x0 DUP7 PUSH2 0x1B71 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xC3D58168C5AE7397731D063D5BBF3D657854427343F4C083240F7AACAA2D0F62 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x30E1 SWAP3 SWAP2 SWAP1 PUSH2 0x4178 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH2 0x316F JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A39DC06D4C0DBC64B70AF90FD698A233A518AA5D07E595D983B8C0526C8F7FB DUP8 DUP8 PUSH1 0x40 MLOAD PUSH2 0x3166 SWAP3 SWAP2 SWAP1 PUSH2 0x4866 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x318C JUMPI PUSH2 0x3187 DUP3 PUSH2 0x3206 JUMP JUMPDEST PUSH2 0x31FE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD EQ DUP1 ISZERO PUSH2 0x31B4 JUMPI POP PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE EQ JUMPDEST ISZERO PUSH2 0x31F6 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x9996B31500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x31ED SWAP2 SWAP1 PUSH2 0x3BD4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SWAP1 POP PUSH2 0x31FF JUMP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x3219 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1425EA4200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x328A DUP3 PUSH2 0x325F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x329A DUP2 PUSH2 0x327F JUMP JUMPDEST DUP2 EQ PUSH2 0x32A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x32B7 DUP2 PUSH2 0x3291 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32D0 DUP2 PUSH2 0x32BD JUMP JUMPDEST DUP2 EQ PUSH2 0x32DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x32ED DUP2 PUSH2 0x32C7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x330A JUMPI PUSH2 0x3309 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3318 DUP6 DUP3 DUP7 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3329 DUP6 DUP3 DUP7 ADD PUSH2 0x32DE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x333C DUP2 PUSH2 0x32BD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3357 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3333 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3392 DUP2 PUSH2 0x335D JUMP JUMPDEST DUP2 EQ PUSH2 0x339D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x33AF DUP2 PUSH2 0x3389 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33CB JUMPI PUSH2 0x33CA PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x33D9 DUP5 DUP3 DUP6 ADD PUSH2 0x33A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33F7 DUP2 PUSH2 0x33E2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3412 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x33EE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x346B DUP3 PUSH2 0x3422 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x348A JUMPI PUSH2 0x3489 PUSH2 0x3433 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x349D PUSH2 0x324B JUMP JUMPDEST SWAP1 POP PUSH2 0x34A9 DUP3 DUP3 PUSH2 0x3462 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x34C9 JUMPI PUSH2 0x34C8 PUSH2 0x3433 JUMP JUMPDEST JUMPDEST PUSH2 0x34D2 DUP3 PUSH2 0x3422 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3501 PUSH2 0x34FC DUP5 PUSH2 0x34AE JUMP JUMPDEST PUSH2 0x3493 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x351D JUMPI PUSH2 0x351C PUSH2 0x341D JUMP JUMPDEST JUMPDEST PUSH2 0x3528 DUP5 DUP3 DUP6 PUSH2 0x34DF JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3545 JUMPI PUSH2 0x3544 PUSH2 0x3418 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3555 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x34EE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3574 JUMPI PUSH2 0x3573 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3592 JUMPI PUSH2 0x3591 PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x359E DUP5 DUP3 DUP6 ADD PUSH2 0x3530 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x35C2 JUMPI PUSH2 0x35C1 PUSH2 0x3433 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x35EB PUSH2 0x35E6 DUP5 PUSH2 0x35A7 JUMP JUMPDEST PUSH2 0x3493 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x360E JUMPI PUSH2 0x360D PUSH2 0x35D3 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3637 JUMPI DUP1 PUSH2 0x3623 DUP9 DUP3 PUSH2 0x32A8 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3610 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3656 JUMPI PUSH2 0x3655 PUSH2 0x3418 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3666 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x35D8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x368A JUMPI PUSH2 0x3689 PUSH2 0x3433 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36AE PUSH2 0x36A9 DUP5 PUSH2 0x366F JUMP JUMPDEST PUSH2 0x3493 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x36D1 JUMPI PUSH2 0x36D0 PUSH2 0x35D3 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x36FA JUMPI DUP1 PUSH2 0x36E6 DUP9 DUP3 PUSH2 0x32DE JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x36D3 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3719 JUMPI PUSH2 0x3718 PUSH2 0x3418 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3729 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x369B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3749 JUMPI PUSH2 0x3748 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3767 JUMPI PUSH2 0x3766 PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x3773 DUP6 DUP3 DUP7 ADD PUSH2 0x3641 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3794 JUMPI PUSH2 0x3793 PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x37A0 DUP6 DUP3 DUP7 ADD PUSH2 0x3704 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37C0 JUMPI PUSH2 0x37BF PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x37CE DUP5 DUP3 DUP6 ADD PUSH2 0x32DE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3811 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x37F6 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3828 DUP3 PUSH2 0x37D7 JUMP JUMPDEST PUSH2 0x3832 DUP2 DUP6 PUSH2 0x37E2 JUMP JUMPDEST SWAP4 POP PUSH2 0x3842 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37F3 JUMP JUMPDEST PUSH2 0x384B DUP2 PUSH2 0x3422 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3870 DUP2 DUP5 PUSH2 0x381D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x388E JUMPI PUSH2 0x388D PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x389C DUP5 DUP3 DUP6 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38BC JUMPI PUSH2 0x38BB PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x38CA DUP6 DUP3 DUP7 ADD PUSH2 0x32DE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x38DB DUP6 DUP3 DUP7 ADD PUSH2 0x32DE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3900 JUMPI PUSH2 0x38FF PUSH2 0x3433 JUMP JUMPDEST JUMPDEST PUSH2 0x3909 DUP3 PUSH2 0x3422 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3929 PUSH2 0x3924 DUP5 PUSH2 0x38E5 JUMP JUMPDEST PUSH2 0x3493 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x3945 JUMPI PUSH2 0x3944 PUSH2 0x341D JUMP JUMPDEST JUMPDEST PUSH2 0x3950 DUP5 DUP3 DUP6 PUSH2 0x34DF JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x396D JUMPI PUSH2 0x396C PUSH2 0x3418 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x397D DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x3916 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x39A2 JUMPI PUSH2 0x39A1 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x39B0 DUP9 DUP3 DUP10 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x39C1 DUP9 DUP3 DUP10 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x39E2 JUMPI PUSH2 0x39E1 PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x39EE DUP9 DUP3 DUP10 ADD PUSH2 0x3704 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A0F JUMPI PUSH2 0x3A0E PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x3A1B DUP9 DUP3 DUP10 ADD PUSH2 0x3704 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A3C JUMPI PUSH2 0x3A3B PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x3A48 DUP9 DUP3 DUP10 ADD PUSH2 0x3958 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3A8A DUP2 PUSH2 0x32BD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A9C DUP4 DUP4 PUSH2 0x3A81 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AC0 DUP3 PUSH2 0x3A55 JUMP JUMPDEST PUSH2 0x3ACA DUP2 DUP6 PUSH2 0x3A60 JUMP JUMPDEST SWAP4 POP PUSH2 0x3AD5 DUP4 PUSH2 0x3A71 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3B06 JUMPI DUP2 MLOAD PUSH2 0x3AED DUP9 DUP3 PUSH2 0x3A90 JUMP JUMPDEST SWAP8 POP PUSH2 0x3AF8 DUP4 PUSH2 0x3AA8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3AD9 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3B2D DUP2 DUP5 PUSH2 0x3AB5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B4C JUMPI PUSH2 0x3B4B PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3B5A DUP6 DUP3 DUP7 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3B7B JUMPI PUSH2 0x3B7A PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x3B87 DUP6 DUP3 DUP7 ADD PUSH2 0x3958 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3BA4 DUP2 PUSH2 0x3B91 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3BBF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3B9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3BCE DUP2 PUSH2 0x327F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3BE9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3BC5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3C06 JUMPI PUSH2 0x3C05 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3C14 DUP6 DUP3 DUP7 ADD PUSH2 0x32DE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3C25 DUP6 DUP3 DUP7 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x3C38 DUP2 PUSH2 0x33E2 JUMP JUMPDEST DUP2 EQ PUSH2 0x3C43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3C55 DUP2 PUSH2 0x3C2F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3C72 JUMPI PUSH2 0x3C71 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3C80 DUP6 DUP3 DUP7 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3C91 DUP6 DUP3 DUP7 ADD PUSH2 0x3C46 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3CB4 JUMPI PUSH2 0x3CB3 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3CC2 DUP7 DUP3 DUP8 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CE3 JUMPI PUSH2 0x3CE2 PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x3CEF DUP7 DUP3 DUP8 ADD PUSH2 0x3641 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3D10 JUMPI PUSH2 0x3D0F PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x3D1C DUP7 DUP3 DUP8 ADD PUSH2 0x3530 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3D3D JUMPI PUSH2 0x3D3C PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3D4B DUP6 DUP3 DUP7 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3D5C DUP6 DUP3 DUP7 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3D82 JUMPI PUSH2 0x3D81 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3D90 DUP9 DUP3 DUP10 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x3DA1 DUP9 DUP3 DUP10 ADD PUSH2 0x32A8 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x3DB2 DUP9 DUP3 DUP10 ADD PUSH2 0x32DE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x3DC3 DUP9 DUP3 DUP10 ADD PUSH2 0x32DE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DE4 JUMPI PUSH2 0x3DE3 PUSH2 0x325A JUMP JUMPDEST JUMPDEST PUSH2 0x3DF0 DUP9 DUP3 DUP10 ADD PUSH2 0x3958 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH32 0x5468697320697320612064756D6D79206572726F720000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E33 PUSH1 0x15 DUP4 PUSH2 0x37E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3E3E DUP3 PUSH2 0x3DFD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3E62 DUP2 PUSH2 0x3E26 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6E6F742061646D696E0000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E9F PUSH1 0x9 DUP4 PUSH2 0x37E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x3EAA DUP3 PUSH2 0x3E69 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3ECE DUP2 PUSH2 0x3E92 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3F19 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3BC5 JUMP JUMPDEST PUSH2 0x3F26 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3333 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3F67 DUP3 PUSH2 0x32BD JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3F99 JUMPI PUSH2 0x3F98 PUSH2 0x3F2D JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3FEB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3FFE JUMPI PUSH2 0x3FFD PUSH2 0x3FA4 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x73656E646572206973206E6F74206F776E657220666F72207468697320746F6B PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x656E000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4060 PUSH1 0x22 DUP4 PUSH2 0x37E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x406B DUP3 PUSH2 0x4004 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x408F DUP2 PUSH2 0x4053 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x40A1 DUP3 PUSH2 0x32BD JUMP JUMPDEST SWAP2 POP PUSH2 0x40AC DUP4 PUSH2 0x32BD JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x40C4 JUMPI PUSH2 0x40C3 PUSH2 0x3F2D JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x6E657720737570706C7920776F756C6420657863656564206D61780000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4100 PUSH1 0x1B DUP4 PUSH2 0x37E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x410B DUP3 PUSH2 0x40CA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x412F DUP2 PUSH2 0x40F3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4145 DUP2 PUSH2 0x3C2F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4161 JUMPI PUSH2 0x4160 PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x416F DUP5 DUP3 DUP6 ADD PUSH2 0x4136 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x418D PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3333 JUMP JUMPDEST PUSH2 0x419A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3333 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x30206E6F7420616C6C6F77656400000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x41D7 PUSH1 0xD DUP4 PUSH2 0x37E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x41E2 DUP3 PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4206 DUP2 PUSH2 0x41CA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4250 PUSH2 0x424B PUSH2 0x4246 DUP5 PUSH2 0x420D JUMP JUMPDEST PUSH2 0x422B JUMP JUMPDEST PUSH2 0x4217 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4260 DUP2 PUSH2 0x4235 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x427B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4257 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x6E6577206D6178696D756D20737570706C7920776F756C642065786365656420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x3130303000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42DD PUSH1 0x24 DUP4 PUSH2 0x37E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x42E8 DUP3 PUSH2 0x4281 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x430C DUP2 PUSH2 0x42D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x617274697374206E6F742073657420666F72207468697320746F6B656E000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4349 PUSH1 0x1D DUP4 PUSH2 0x37E2 JUMP JUMPDEST SWAP2 POP PUSH2 0x4354 DUP3 PUSH2 0x4313 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4378 DUP2 PUSH2 0x433C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x43E1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x43A4 JUMP JUMPDEST PUSH2 0x43EB DUP7 DUP4 PUSH2 0x43A4 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x441E PUSH2 0x4419 PUSH2 0x4414 DUP5 PUSH2 0x32BD JUMP JUMPDEST PUSH2 0x422B JUMP JUMPDEST PUSH2 0x32BD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4438 DUP4 PUSH2 0x4403 JUMP JUMPDEST PUSH2 0x444C PUSH2 0x4444 DUP3 PUSH2 0x4425 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x43B1 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x4461 PUSH2 0x4454 JUMP JUMPDEST PUSH2 0x446C DUP2 DUP5 DUP5 PUSH2 0x442F JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4490 JUMPI PUSH2 0x4485 PUSH1 0x0 DUP3 PUSH2 0x4459 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x4472 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x44D5 JUMPI PUSH2 0x44A6 DUP2 PUSH2 0x437F JUMP JUMPDEST PUSH2 0x44AF DUP5 PUSH2 0x4394 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x44BE JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x44D2 PUSH2 0x44CA DUP6 PUSH2 0x4394 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x4471 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44F8 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x44DA JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4511 DUP4 DUP4 PUSH2 0x44E7 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x452A DUP3 PUSH2 0x37D7 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4543 JUMPI PUSH2 0x4542 PUSH2 0x3433 JUMP JUMPDEST JUMPDEST PUSH2 0x454D DUP3 SLOAD PUSH2 0x3FD3 JUMP JUMPDEST PUSH2 0x4558 DUP3 DUP3 DUP6 PUSH2 0x4494 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x458B JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x4579 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x4583 DUP6 DUP3 PUSH2 0x4505 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x45EB JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x4599 DUP7 PUSH2 0x437F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x45C1 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x459C JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x45DE JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x45DA PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x44E7 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x4608 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x3BC5 JUMP JUMPDEST PUSH2 0x4615 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3BC5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x4625 DUP2 PUSH2 0x3B91 JUMP JUMPDEST DUP2 EQ PUSH2 0x4630 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4642 DUP2 PUSH2 0x461C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x465E JUMPI PUSH2 0x465D PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x466C DUP5 DUP3 DUP6 ADD PUSH2 0x4633 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x469C DUP3 PUSH2 0x4675 JUMP JUMPDEST PUSH2 0x46A6 DUP2 DUP6 PUSH2 0x4680 JUMP JUMPDEST SWAP4 POP PUSH2 0x46B6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37F3 JUMP JUMPDEST PUSH2 0x46BF DUP2 PUSH2 0x3422 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x46DF PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3BC5 JUMP JUMPDEST PUSH2 0x46EC PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3BC5 JUMP JUMPDEST PUSH2 0x46F9 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x3333 JUMP JUMPDEST PUSH2 0x4706 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x3333 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x4718 DUP2 DUP5 PUSH2 0x4691 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x4733 DUP2 PUSH2 0x3389 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x474F JUMPI PUSH2 0x474E PUSH2 0x3255 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x475D DUP5 DUP3 DUP6 ADD PUSH2 0x4724 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x477B PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x3BC5 JUMP JUMPDEST PUSH2 0x4788 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x3BC5 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x479A DUP2 DUP7 PUSH2 0x3AB5 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x47AE DUP2 DUP6 PUSH2 0x3AB5 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x47C2 DUP2 DUP5 PUSH2 0x4691 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x47E4 DUP3 PUSH2 0x4675 JUMP JUMPDEST PUSH2 0x47EE DUP2 DUP6 PUSH2 0x47CE JUMP JUMPDEST SWAP4 POP PUSH2 0x47FE DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x37F3 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4816 DUP3 DUP5 PUSH2 0x47D9 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x4836 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x3BC5 JUMP JUMPDEST PUSH2 0x4843 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x3333 JUMP JUMPDEST PUSH2 0x4850 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x3333 JUMP JUMPDEST PUSH2 0x485D PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x3333 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4880 DUP2 DUP6 PUSH2 0x3AB5 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4894 DUP2 DUP5 PUSH2 0x3AB5 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE PC 0xCD 0xC 0xC 0x28 ADDRESS DUP16 0xD9 SWAP2 0xD3 DUP3 PUSH13 0xABEED5C38182E9FB2B173EDF2E ADD SWAP8 0xB3 SHR RETURN COINBASE PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"95:225:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3358:191:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;163:154:24;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2144:77:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4056:145;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4367:183;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3136:162:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2741:100:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2015:171:4;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3032:312:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2328:114;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4930:268;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;625:38;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3706:552:3;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4158:214:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2279:106:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3705:134:2;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2539:97:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3155:101:0;;;;;;;;;;;;;:::i;:::-;;667:50:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2441:144:0;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1311:216:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4554:130;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1819:58:2;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;778:321:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1776:182:4;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1730:310:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3541:358;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5438:205;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4688:238;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3405:215:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;721:52:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3358:191:3;3435:7;3454:24;3481:20;:18;:20::i;:::-;3454:47;;3518:1;:11;;:15;3530:2;3518:15;;;;;;;;;;;:24;3534:7;3518:24;;;;;;;;;;;;;;;;3511:31;;;3358:191;;;;:::o;163:154:24:-;269:4;281:31;;;;;;;;;;:::i;:::-;;;;;;;;2144:77:23;2334:13:0;:11;:13::i;:::-;2204:12:23::1;2212:3;2204:7;:12::i;:::-;2144:77:::0;:::o;4056:145::-;4129:6;:18;4136:10;4129:18;;;;;;;;;;;;;;;;;;;;;;;;;4121:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;4167:29;4179:4;4185:7;4194:1;4167:11;:29::i;:::-;4056:145;;:::o;4367:183::-;4461:6;4456:90;4477:4;:11;4473:1;:15;4456:90;;;4503:4;:14;;;4518:4;4523:1;4518:7;;;;;;;;:::i;:::-;;;;;;;;4527:8;4536:1;4527:11;;;;;;;;:::i;:::-;;;;;;;;4503:36;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4490:3;;;;;:::i;:::-;;;;4456:90;;;;4367:183;;:::o;3136:162:3:-;3196:13;3221:24;3248:20;:18;:20::i;:::-;3221:47;;3285:1;:6;;3278:13;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3136:162;;;:::o;2741:100:23:-;2334:13:0;:11;:13::i;:::-;2816:6:23::1;:20:::0;2823:12:::1;2816:20;;;;;;;;;;;;;;;;2809:27;;;;;;;;;;;2741:100:::0;:::o;2015:171:4:-;2067:7;2086:30;2119:26;:24;:26::i;:::-;2086:59;;2162:1;:17;;;2155:24;;;2015:171;:::o;3032:312:23:-;3129:10;3101:38;;:15;:24;3117:7;3101:24;;;;;;;;;;;;;;;;;;;;;:38;;;3093:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;3224:17;:26;3242:7;3224:26;;;;;;;;;;;;3215:5;3192:20;3204:7;3192:11;:20::i;:::-;:28;;;;:::i;:::-;:58;;3184:98;;;;;;;;;;;;:::i;:::-;;;;;;;;;3288:51;3294:15;:24;3310:7;3294:24;;;;;;;;;;;;;;;;;;;;;3320:7;3329:5;3288:51;;;;;;;;;;;;:5;:51::i;:::-;3032:312;;:::o;2328:114::-;2390:4;2433;2409:28;;:6;:20;2416:12;2409:20;;;;;;;;;;;;;;;;;;;;;;;;;:28;;;2402:35;;2328:114;;;:::o;4930:268::-;5092:4;:12;;;5105:10;5092:24;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5084:46;;;;;;;;;;;;:::i;:::-;;;;;;;;;5136:57;5164:4;5170:2;5174:3;5179:7;5188:4;5136:27;:57::i;:::-;4930:268;;;;;:::o;625:38::-;;;;;;;;;;;;;;;;;;;;;;:::o;3706:552:3:-;3830:16;3881:3;:10;3862:8;:15;:29;3858:121;;3940:3;:10;3952:8;:15;3914:54;;;;;;;;;;;;:::i;:::-;;;;;;;;3858:121;3989:30;4036:8;:15;4022:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3989:63;;4068:9;4063:158;4087:8;:15;4083:1;:19;4063:158;;;4142:68;4152:30;4180:1;4152:8;:27;;:30;;;;:::i;:::-;4184:25;4207:1;4184:3;:22;;:25;;;;:::i;:::-;4142:9;:68::i;:::-;4123:13;4137:1;4123:16;;;;;;;;:::i;:::-;;;;;;;:87;;;;;4104:3;;;;:::i;:::-;;;4063:158;;;;4238:13;4231:20;;;3706:552;;;;:::o;4158:214:2:-;2653:13;:11;:13::i;:::-;4273:36:::1;4291:17;4273;:36::i;:::-;4319:46;4341:17;4360:4;4319:21;:46::i;:::-;4158:214:::0;;:::o;2279:106:4:-;2336:4;2377:1;2359:15;2371:2;2359:11;:15::i;:::-;:19;2352:26;;2279:106;;;:::o;3705:134:2:-;3774:7;2924:20;:18;:20::i;:::-;1327:66:10::1;3800:32:2;;3793:39;;3705:134:::0;:::o;2539:97:23:-;2334:13:0;:11;:13::i;:::-;2627:4:23::1;2604:6;:20:::0;2611:12:::1;2604:20;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;2539:97:::0;:::o;3155:101:0:-;2334:13;:11;:13::i;:::-;3219:30:::1;3246:1;3219:18;:30::i;:::-;3155:101::o:0;667:50:23:-;;;;;;;;;;;;;;;;;;;;;;:::o;2441:144:0:-;2487:7;2506:24;2533:20;:18;:20::i;:::-;2506:47;;2570:1;:8;;;;;;;;;;;;2563:15;;;2441:144;:::o;1311:216:23:-;1400:6;:18;1407:10;1400:18;;;;;;;;;;;;;;;;;;;;;;;;;1392:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;1457:1;1446:7;:12;1438:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;1509:13;1482:15;:24;1498:7;1482:24;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;1311:216;;:::o;4554:130::-;4636:43;4660:8;4670;4636:23;:43::i;:::-;4554:130;;:::o;1819:58:2:-;;;;;;;;;;;;;;;;;;;:::o;778:321:23:-;4158:30:1;4191:26;:24;:26::i;:::-;4158:59;;4279:19;4302:1;:15;;;;;;;;;;;;4301:16;4279:38;;4327:18;4348:1;:14;;;;;;;;;;;;4327:35;;4706:17;4741:1;4726:11;:16;;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4805:1;4790:11;:16;;;:50;;;;;4839:1;4818:4;4810:25;;;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;;;;;;;;;;;;;4851:91;4968:1;4951;:14;;;:18;;;;;;;;;;;;;;;;;;4983:14;4979:67;;;5031:4;5013:1;:15;;;:22;;;;;;;;;;;;;;;;;;4979:67;890:22:23::1;:20;:22::i;:::-;918:28;933:12;918:14;:28::i;:::-;952:24;:22;:24::i;:::-;982:12;990:3;982:7;:12::i;:::-;1006:6;1001:94;1022:13;:20;1018:1;:24;1001:94;;;1084:4;1057:6;:24:::0;1064:13:::1;1078:1;1064:16;;;;;;;;:::i;:::-;;;;;;;;1057:24;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;1044:3;;;;;:::i;:::-;;;;1001:94;;;;5070:14:1::0;5066:101;;;5118:5;5100:1;:15;;;:23;;;;;;;;;;;;;;;;;;5142:14;5154:1;5142:14;;;;;;:::i;:::-;;;;;;;;5066:101;4092:1081;;;;;778:321:23;;;:::o;1776:182:4:-;1838:7;1857:30;1890:26;:24;:26::i;:::-;1857:59;;1933:1;:14;;:18;1948:2;1933:18;;;;;;;;;;;;1926:25;;;1776:182;;;:::o;1730:310:23:-;1825:6;:18;1832:10;1825:18;;;;;;;;;;;;;;;;;;;;;;;;;1817:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;1915:4;1900:11;1871:17;:26;1889:7;1871:26;;;;;;;;;;;;:40;;;;:::i;:::-;:48;;1863:97;;;;;;;;;;;;:::i;:::-;;;;;;;;;2024:11;1995:17;:26;2013:7;1995:26;;;;;;;;;;;;:40;;;;:::i;:::-;1966:17;:26;1984:7;1966:26;;;;;;;;;;;:69;;;;1730:310;;:::o;3541:358::-;3615:6;:18;3622:10;3615:18;;;;;;;;;;;;;;;;;;;;;;;;;3607:40;;;;;;;;;;;;:::i;:::-;;;;;;;;;3697:1;3661:38;;:15;:24;3677:7;3661:24;;;;;;;;;;;;;;;;;;;;;:38;;;3653:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;3779:17;:26;3797:7;3779:26;;;;;;;;;;;;3770:5;3747:20;3759:7;3747:11;:20::i;:::-;:28;;;;:::i;:::-;:58;;3739:98;;;;;;;;;;;;:::i;:::-;;;;;;;;;3843:51;3849:15;:24;3865:7;3849:24;;;;;;;;;;;;;;;;;;;;;3875:7;3884:5;3843:51;;;;;;;;;;;;:5;:51::i;:::-;3541:358;;:::o;5438:205::-;5527:4;5543:6;:16;5550:8;5543:16;;;;;;;;;;;;;;;;;;;;;;;;;5539:48;;;5576:4;5569:11;;;;5539:48;5599:39;5622:5;5629:8;5599:22;:39::i;:::-;5592:46;;5438:205;;;;;:::o;4688:238::-;4822:4;:12;;;4835:10;4822:24;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4814:46;;;;;;;;;;;;:::i;:::-;;;;;;;;;4866:55;4889:4;4895:2;4899:7;4908:6;4916:4;4866:22;:55::i;:::-;4688:238;;;;;:::o;3405:215:0:-;2334:13;:11;:13::i;:::-;3509:1:::1;3489:22;;:8;:22;;::::0;3485:91:::1;;3562:1;3534:31;;;;;;;;;;;:::i;:::-;;;;;;;;3485:91;3585:28;3604:8;3585:18;:28::i;:::-;3405:215:::0;:::o;721:52:23:-;;;;;;;;;;;;;;;;;:::o;1913:159:3:-;1965:24;2034:22;2024:32;;1913:159;:::o;2658:162:0:-;2728:12;:10;:12::i;:::-;2717:23;;:7;:5;:7::i;:::-;:23;;;2713:101;;2790:12;:10;:12::i;:::-;2763:40;;;;;;;;;;;:::i;:::-;;;;;;;;2713:101;2658:162::o;11574:145:3:-;11640:24;11667:20;:18;:20::i;:::-;11640:47;;11706:6;11697:1;:6;;:15;;;;;;:::i;:::-;;11630:89;11574:145;:::o;13450:329::-;13545:1;13529:18;;:4;:18;;;13525:88;;13599:1;13570:32;;;;;;;;;;;:::i;:::-;;;;;;;;13525:88;13623:20;13645:23;13672:29;13691:2;13695:5;13672:18;:29::i;:::-;13622:79;;;;13711:61;13738:4;13752:1;13756:3;13761:6;13711:61;;;;;;;;;;;;:26;:61::i;:::-;13515:264;;13450:329;;;:::o;1372:177:4:-;1430:30;1505:28;1495:38;;1372:177;:::o;12097:346:3:-;12207:1;12193:16;;:2;:16;;;12189:88;;12263:1;12232:34;;;;;;;;;;;:::i;:::-;;;;;;;;12189:88;12287:20;12309:23;12336:29;12355:2;12359:5;12336:18;:29::i;:::-;12286:79;;;;12375:61;12410:1;12414:2;12418:3;12423:6;12431:4;12375:26;:61::i;:::-;12179:264;;12097:346;;;;:::o;5243:429::-;5437:14;5454:12;:10;:12::i;:::-;5437:29;;5488:6;5480:14;;:4;:14;;;;:49;;;;;5499:30;5516:4;5522:6;5499:16;:30::i;:::-;5498:31;5480:49;5476:129;;;5581:6;5589:4;5552:42;;;;;;;;;;;;:::i;:::-;;;;;;;;5476:129;5614:51;5637:4;5643:2;5647:3;5652:6;5660:4;5614:22;:51::i;:::-;5427:245;5243:429;;;;;:::o;4603:197:17:-;4689:11;4777:4;4772:3;4768:14;4761:4;4756:3;4752:14;4748:35;4742:42;4735:49;;4603:197;;;;:::o;4204:::-;4290:11;4378:4;4373:3;4369:14;4362:4;4357:3;4353:14;4349:35;4343:42;4336:49;;4204:197;;;;:::o;4599:312:2:-;4688:6;4671:23;;4679:4;4671:23;;;:120;;;;4785:6;4749:42;;:32;:30;:32::i;:::-;:42;;;;4671:120;4654:251;;;4865:29;;;;;;;;;;;;;;4654:251;4599:312::o;5647:108:23:-;2334:13:0;:11;:13::i;:::-;5647:108:23;:::o;6052:538:2:-;6169:17;6151:50;;;:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;6147:437;;6555:17;6513:60;;;;;;;;;;;:::i;:::-;;;;;;;;6147:437;1327:66:10;6253:32:2;;6245:4;:40;6241:120;;6341:4;6312:34;;;;;;;;;;;:::i;:::-;;;;;;;;6241:120;6374:54;6404:17;6423:4;6374:29;:54::i;:::-;6204:235;6052:538;;:::o;5028:213::-;5111:6;5094:23;;5102:4;5094:23;;;5090:145;;5195:29;;;;;;;;;;;;;;5090:145;5028:213::o;3774:248:0:-;3847:24;3874:20;:18;:20::i;:::-;3847:47;;3904:16;3923:1;:8;;;;;;;;;;;;3904:27;;3952:8;3941:1;:8;;;:19;;;;;;;;;;;;;;;;;;4006:8;3975:40;;3996:8;3975:40;;;;;;;;;;;;3837:185;;3774:248;:::o;1192:159::-;1244:24;1313:22;1303:32;;1192:159;:::o;4326:144:3:-;4411:52;4430:12;:10;:12::i;:::-;4444:8;4454;4411:18;:52::i;:::-;4326:144;;:::o;8737:170:1:-;8795:30;8870:21;8860:31;;8737:170;:::o;1555:65:4:-;6931:20:1;:18;:20::i;:::-;1555:65:4:o;1847:127:0:-;6931:20:1;:18;:20::i;:::-;1929:38:0::1;1954:12;1929:24;:38::i;:::-;1847:127:::0;:::o;2968:67:2:-;6931:20:1;:18;:20::i;:::-;2968:67:2:o;4537:216:3:-;4627:4;4643:24;4670:20;:18;:20::i;:::-;4643:47;;4707:1;:20;;:29;4728:7;4707:29;;;;;;;;;;;;;;;:39;4737:8;4707:39;;;;;;;;;;;;;;;;;;;;;;;;;4700:46;;;4537:216;;;;:::o;4820:351::-;4943:14;4960:12;:10;:12::i;:::-;4943:29;;4994:6;4986:14;;:4;:14;;;;:49;;;;;5005:30;5022:4;5028:6;5005:16;:30::i;:::-;5004:31;4986:49;4982:129;;;5087:6;5095:4;5058:42;;;;;;;;;;;;:::i;:::-;;;;;;;;4982:129;5120:44;5138:4;5144:2;5148;5152:5;5159:4;5120:17;:44::i;:::-;4933:238;4820:351;;;;;:::o;887:96:5:-;940:7;966:10;959:17;;887:96;:::o;17490:849:3:-;17598:23;17623;17784:4;17778:11;17768:21;;17854:1;17846:6;17839:17;17992:8;17985:4;17977:6;17973:17;17966:35;18114:4;18106:6;18102:17;18092:27;;18147:1;18139:6;18132:17;18188:8;18181:4;18173:6;18169:17;18162:35;18317:4;18309:6;18305:17;18299:4;18292:31;17490:849;;;;;:::o;8296:690::-;8497:30;8505:4;8511:2;8515:3;8520:6;8497:7;:30::i;:::-;8555:1;8541:16;;:2;:16;;;8537:443;;8573:16;8592:12;:10;:12::i;:::-;8573:31;;8636:1;8622:3;:10;:15;8618:352;;8657:10;8670:25;8693:1;8670:3;:22;;:25;;;;:::i;:::-;8657:38;;8713:13;8729:28;8755:1;8729:6;:25;;:28;;;;:::i;:::-;8713:44;;8775:67;8806:8;8816:4;8822:2;8826;8830:5;8837:4;8775:30;:67::i;:::-;8639:218;;8618:352;;;8881:74;8917:8;8927:4;8933:2;8937:3;8942:6;8950:4;8881:35;:74::i;:::-;8618:352;8559:421;8537:443;8296:690;;;;;:::o;10307:445::-;10514:1;10500:16;;:2;:16;;;10496:88;;10570:1;10539:34;;;;;;;;;;;:::i;:::-;;;;;;;;10496:88;10613:1;10597:18;;:4;:18;;;10593:88;;10667:1;10638:32;;;;;;;;;;;:::i;:::-;;;;;;;;10593:88;10690:55;10717:4;10723:2;10727:3;10732:6;10740:4;10690:26;:55::i;:::-;10307:445;;;;;:::o;1957:138:10:-;2009:7;2035:47;1327:66;2062:19;;2035:26;:47::i;:::-;:53;;;;;;;;;;;;2028:60;;1957:138;:::o;2779:335::-;2870:37;2889:17;2870:18;:37::i;:::-;2931:17;2922:27;;;;;;;;;;;;2978:1;2964:4;:11;:15;2960:148;;;2995:53;3024:17;3043:4;2995:28;:53::i;:::-;;2960:148;;;3079:18;:16;:18::i;:::-;2960:148;2779:335;;:::o;14619:374:3:-;14722:24;14749:20;:18;:20::i;:::-;14722:47;;14803:1;14783:22;;:8;:22;;;14779:94;;14859:1;14828:34;;;;;;;;;;;:::i;:::-;;;;;;;;14779:94;14922:8;14882:1;:20;;:27;14903:5;14882:27;;;;;;;;;;;;;;;:37;14910:8;14882:37;;;;;;;;;;;;;;;;:48;;;;;;;;;;;;;;;;;;14967:8;14945:41;;14960:5;14945:41;;;14977:8;14945:41;;;;;;:::i;:::-;;;;;;;;14712:281;14619:374;;;:::o;7084:141:1:-;7151:17;:15;:17::i;:::-;7146:73;;7191:17;;;;;;;;;;;;;;7146:73;7084:141::o;1980:235:0:-;6931:20:1;:18;:20::i;:::-;2100:1:0::1;2076:26;;:12;:26;;::::0;2072:95:::1;;2153:1;2125:31;;;;;;;;;;;:::i;:::-;;;;;;;;2072:95;2176:32;2195:12;2176:18;:32::i;:::-;1980:235:::0;:::o;9443:463:3:-;9579:1;9565:16;;:2;:16;;;9561:88;;9635:1;9604:34;;;;;;;;;;;:::i;:::-;;;;;;;;9561:88;9678:1;9662:18;;:4;:18;;;9658:88;;9732:1;9703:32;;;;;;;;;;;:::i;:::-;;;;;;;;9658:88;9756:20;9778:23;9805:29;9824:2;9828:5;9805:18;:29::i;:::-;9755:79;;;;9844:55;9871:4;9877:2;9881:3;9886:6;9894:4;9844:26;:55::i;:::-;9551:355;;9443:463;;;;;:::o;2442:1595:4:-;2606:30;2639:26;:24;:26::i;:::-;2606:59;;2675:36;2689:4;2695:2;2699:3;2704:6;2675:13;:36::i;:::-;2742:1;2726:18;;:4;:18;;;2722:537;;2760:22;2805:9;2800:295;2824:3;:10;2820:1;:14;2800:295;;;2859:13;2875:6;2882:1;2875:9;;;;;;;;:::i;:::-;;;;;;;;2859:25;;3034:5;3008:1;:14;;:22;3023:3;3027:1;3023:6;;;;;;;;:::i;:::-;;;;;;;;3008:22;;;;;;;;;;;;:31;;;;;;;:::i;:::-;;;;;;;;3075:5;3057:23;;;;;:::i;:::-;;;2841:254;2836:3;;;;:::i;:::-;;;2800:295;;;;3234:14;3213:1;:17;;;:35;;;;;;;:::i;:::-;;;;;;;;2746:513;2722:537;3287:1;3273:16;;:2;:16;;;3269:762;;3305:22;3350:9;3345:461;3369:3;:10;3365:1;:14;3345:461;;;3404:13;3420:6;3427:1;3420:9;;;;;;;;:::i;:::-;;;;;;;;3404:25;;3612:5;3586:1;:14;;:22;3601:3;3605:1;3601:6;;;;;;;;:::i;:::-;;;;;;;;3586:22;;;;;;;;;;;;:31;;;;;;;;;;;3768:5;3750:23;;;;3386:420;3381:3;;;;:::i;:::-;;;3345:461;;;;3992:14;3971:1;:17;;;:35;;;;;;;;;;;3291:740;3269:762;2596:1441;2442:1595;;;;:::o;15171:974:3:-;15394:1;15377:2;:14;;;:18;15373:766;;;15432:2;15415:38;;;15454:8;15464:4;15470:2;15474:5;15481:4;15415:71;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;15411:718;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15787:1;15770:6;:13;:18;15766:349;;15897:2;15874:26;;;;;;;;;;;:::i;:::-;;;;;;;;15766:349;16067:6;16061:13;16052:6;16048:2;16044:15;16037:38;15411:718;15547:43;;;15535:55;;;:8;:55;;;;15531:174;;15683:2;15660:26;;;;;;;;;;;:::i;:::-;;;;;;;;15531:174;15487:232;15373:766;15171:974;;;;;;:::o;16333:1041::-;16581:1;16564:2;:14;;;:18;16560:808;;;16619:2;16602:43;;;16646:8;16656:4;16662:3;16667:6;16675:4;16602:78;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;16598:760;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17016:1;16999:6;:13;:18;16995:349;;17126:2;17103:26;;;;;;;;;;;:::i;:::-;;;;;;;;16995:349;17296:6;17290:13;17281:6;17277:2;17273:15;17266:38;16598:760;16771:48;;;16759:60;;;:8;:60;;;;16755:179;;16912:2;16889:26;;;;;;;;;;;:::i;:::-;;;;;;;;16755:179;16681:267;16560:808;16333:1041;;;;;;:::o;1684:190:18:-;1745:21;1854:4;1844:14;;1684:190;;;:::o;2186:281:10:-;2296:1;2263:17;:29;;;:34;2259:119;;2349:17;2320:47;;;;;;;;;;;:::i;:::-;;;;;;;;2259:119;2443:17;2387:47;1327:66;2414:19;;2387:26;:47::i;:::-;:53;;;:73;;;;;;;;;;;;;;;;;;2186:281;:::o;4106:253:16:-;4189:12;4214;4228:23;4255:6;:19;;4275:4;4255:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4213:67;;;;4297:55;4324:6;4332:7;4341:10;4297:26;:55::i;:::-;4290:62;;;;4106:253;;;;:::o;6598:122:10:-;6660:1;6648:9;:13;6644:70;;;6684:19;;;;;;;;;;;;;;6644:70;6598:122::o;8487:120:1:-;8537:4;8560:26;:24;:26::i;:::-;:40;;;;;;;;;;;;8553:47;;8487:120;:::o;6373:1344:3:-;6490:24;6517:20;:18;:20::i;:::-;6490:47;;6565:6;:13;6551:3;:10;:27;6547:117;;6627:3;:10;6639:6;:13;6601:52;;;;;;;;;;;;:::i;:::-;;;;;;;;6547:117;6674:16;6693:12;:10;:12::i;:::-;6674:31;;6721:9;6716:697;6740:3;:10;6736:1;:14;6716:697;;;6771:10;6784:25;6807:1;6784:3;:22;;:25;;;;:::i;:::-;6771:38;;6823:13;6839:28;6865:1;6839:6;:25;;:28;;;;:::i;:::-;6823:44;;6902:1;6886:18;;:4;:18;;;6882:424;;6924:19;6946:1;:11;;:15;6958:2;6946:15;;;;;;;;;;;:21;6962:4;6946:21;;;;;;;;;;;;;;;;6924:43;;7003:5;6989:11;:19;6985:129;;;7066:4;7072:11;7085:5;7092:2;7039:56;;;;;;;;;;;;;;:::i;:::-;;;;;;;;6985:129;7268:5;7254:11;:19;7230:1;:11;;:15;7242:2;7230:15;;;;;;;;;;;:21;7246:4;7230:21;;;;;;;;;;;;;;;:43;;;;6906:400;6882:424;7338:1;7324:16;;:2;:16;;;7320:83;;7383:5;7360:1;:11;;:15;7372:2;7360:15;;;;;;;;;;;:19;7376:2;7360:19;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;7320:83;6757:656;;6752:3;;;;:::i;:::-;;;6716:697;;;;7441:1;7427:3;:10;:15;7423:288;;7458:10;7471:25;7494:1;7471:3;:22;;:25;;;;:::i;:::-;7458:38;;7510:13;7526:28;7552:1;7526:6;:25;;:28;;;;:::i;:::-;7510:44;;7604:2;7573:45;;7598:4;7573:45;;7588:8;7573:45;;;7608:2;7612:5;7573:45;;;;;;;:::i;:::-;;;;;;;;7444:185;;7423:288;;;7684:2;7654:46;;7678:4;7654:46;;7668:8;7654:46;;;7688:3;7693:6;7654:46;;;;;;;:::i;:::-;;;;;;;;7423:288;6480:1237;;6373:1344;;;;:::o;4625:582:16:-;4769:12;4798:7;4793:408;;4821:19;4829:10;4821:7;:19::i;:::-;4793:408;;;5066:1;5045:10;:17;:22;:49;;;;;5093:1;5071:6;:18;;;:23;5045:49;5041:119;;;5138:6;5121:24;;;;;;;;;;;:::i;:::-;;;;;;;;5041:119;5180:10;5173:17;;;;4793:408;4625:582;;;;;;:::o;5743:516::-;5894:1;5874:10;:17;:21;5870:383;;;6102:10;6096:17;6158:15;6145:10;6141:2;6137:19;6130:44;5870:383;6225:17;;;;;;;;;;;;;;7:75:25;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:77::-;878:7;907:5;896:16;;841:77;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:474::-;1265:6;1273;1322:2;1310:9;1301:7;1297:23;1293:32;1290:119;;;1328:79;;:::i;:::-;1290:119;1448:1;1473:53;1518:7;1509:6;1498:9;1494:22;1473:53;:::i;:::-;1463:63;;1419:117;1575:2;1601:53;1646:7;1637:6;1626:9;1622:22;1601:53;:::i;:::-;1591:63;;1546:118;1197:474;;;;;:::o;1677:118::-;1764:24;1782:5;1764:24;:::i;:::-;1759:3;1752:37;1677:118;;:::o;1801:222::-;1894:4;1932:2;1921:9;1917:18;1909:26;;1945:71;2013:1;2002:9;1998:17;1989:6;1945:71;:::i;:::-;1801:222;;;;:::o;2029:149::-;2065:7;2105:66;2098:5;2094:78;2083:89;;2029:149;;;:::o;2184:120::-;2256:23;2273:5;2256:23;:::i;:::-;2249:5;2246:34;2236:62;;2294:1;2291;2284:12;2236:62;2184:120;:::o;2310:137::-;2355:5;2393:6;2380:20;2371:29;;2409:32;2435:5;2409:32;:::i;:::-;2310:137;;;;:::o;2453:327::-;2511:6;2560:2;2548:9;2539:7;2535:23;2531:32;2528:119;;;2566:79;;:::i;:::-;2528:119;2686:1;2711:52;2755:7;2746:6;2735:9;2731:22;2711:52;:::i;:::-;2701:62;;2657:116;2453:327;;;;:::o;2786:90::-;2820:7;2863:5;2856:13;2849:21;2838:32;;2786:90;;;:::o;2882:109::-;2963:21;2978:5;2963:21;:::i;:::-;2958:3;2951:34;2882:109;;:::o;2997:210::-;3084:4;3122:2;3111:9;3107:18;3099:26;;3135:65;3197:1;3186:9;3182:17;3173:6;3135:65;:::i;:::-;2997:210;;;;:::o;3213:117::-;3322:1;3319;3312:12;3336:117;3445:1;3442;3435:12;3459:102;3500:6;3551:2;3547:7;3542:2;3535:5;3531:14;3527:28;3517:38;;3459:102;;;:::o;3567:180::-;3615:77;3612:1;3605:88;3712:4;3709:1;3702:15;3736:4;3733:1;3726:15;3753:281;3836:27;3858:4;3836:27;:::i;:::-;3828:6;3824:40;3966:6;3954:10;3951:22;3930:18;3918:10;3915:34;3912:62;3909:88;;;3977:18;;:::i;:::-;3909:88;4017:10;4013:2;4006:22;3796:238;3753:281;;:::o;4040:129::-;4074:6;4101:20;;:::i;:::-;4091:30;;4130:33;4158:4;4150:6;4130:33;:::i;:::-;4040:129;;;:::o;4175:308::-;4237:4;4327:18;4319:6;4316:30;4313:56;;;4349:18;;:::i;:::-;4313:56;4387:29;4409:6;4387:29;:::i;:::-;4379:37;;4471:4;4465;4461:15;4453:23;;4175:308;;;:::o;4489:146::-;4586:6;4581:3;4576;4563:30;4627:1;4618:6;4613:3;4609:16;4602:27;4489:146;;;:::o;4641:425::-;4719:5;4744:66;4760:49;4802:6;4760:49;:::i;:::-;4744:66;:::i;:::-;4735:75;;4833:6;4826:5;4819:21;4871:4;4864:5;4860:16;4909:3;4900:6;4895:3;4891:16;4888:25;4885:112;;;4916:79;;:::i;:::-;4885:112;5006:54;5053:6;5048:3;5043;5006:54;:::i;:::-;4725:341;4641:425;;;;;:::o;5086:340::-;5142:5;5191:3;5184:4;5176:6;5172:17;5168:27;5158:122;;5199:79;;:::i;:::-;5158:122;5316:6;5303:20;5341:79;5416:3;5408:6;5401:4;5393:6;5389:17;5341:79;:::i;:::-;5332:88;;5148:278;5086:340;;;;:::o;5432:509::-;5501:6;5550:2;5538:9;5529:7;5525:23;5521:32;5518:119;;;5556:79;;:::i;:::-;5518:119;5704:1;5693:9;5689:17;5676:31;5734:18;5726:6;5723:30;5720:117;;;5756:79;;:::i;:::-;5720:117;5861:63;5916:7;5907:6;5896:9;5892:22;5861:63;:::i;:::-;5851:73;;5647:287;5432:509;;;;:::o;5947:311::-;6024:4;6114:18;6106:6;6103:30;6100:56;;;6136:18;;:::i;:::-;6100:56;6186:4;6178:6;6174:17;6166:25;;6246:4;6240;6236:15;6228:23;;5947:311;;;:::o;6264:117::-;6373:1;6370;6363:12;6404:710;6500:5;6525:81;6541:64;6598:6;6541:64;:::i;:::-;6525:81;:::i;:::-;6516:90;;6626:5;6655:6;6648:5;6641:21;6689:4;6682:5;6678:16;6671:23;;6742:4;6734:6;6730:17;6722:6;6718:30;6771:3;6763:6;6760:15;6757:122;;;6790:79;;:::i;:::-;6757:122;6905:6;6888:220;6922:6;6917:3;6914:15;6888:220;;;6997:3;7026:37;7059:3;7047:10;7026:37;:::i;:::-;7021:3;7014:50;7093:4;7088:3;7084:14;7077:21;;6964:144;6948:4;6943:3;6939:14;6932:21;;6888:220;;;6892:21;6506:608;;6404:710;;;;;:::o;7137:370::-;7208:5;7257:3;7250:4;7242:6;7238:17;7234:27;7224:122;;7265:79;;:::i;:::-;7224:122;7382:6;7369:20;7407:94;7497:3;7489:6;7482:4;7474:6;7470:17;7407:94;:::i;:::-;7398:103;;7214:293;7137:370;;;;:::o;7513:311::-;7590:4;7680:18;7672:6;7669:30;7666:56;;;7702:18;;:::i;:::-;7666:56;7752:4;7744:6;7740:17;7732:25;;7812:4;7806;7802:15;7794:23;;7513:311;;;:::o;7847:710::-;7943:5;7968:81;7984:64;8041:6;7984:64;:::i;:::-;7968:81;:::i;:::-;7959:90;;8069:5;8098:6;8091:5;8084:21;8132:4;8125:5;8121:16;8114:23;;8185:4;8177:6;8173:17;8165:6;8161:30;8214:3;8206:6;8203:15;8200:122;;;8233:79;;:::i;:::-;8200:122;8348:6;8331:220;8365:6;8360:3;8357:15;8331:220;;;8440:3;8469:37;8502:3;8490:10;8469:37;:::i;:::-;8464:3;8457:50;8536:4;8531:3;8527:14;8520:21;;8407:144;8391:4;8386:3;8382:14;8375:21;;8331:220;;;8335:21;7949:608;;7847:710;;;;;:::o;8580:370::-;8651:5;8700:3;8693:4;8685:6;8681:17;8677:27;8667:122;;8708:79;;:::i;:::-;8667:122;8825:6;8812:20;8850:94;8940:3;8932:6;8925:4;8917:6;8913:17;8850:94;:::i;:::-;8841:103;;8657:293;8580:370;;;;:::o;8956:894::-;9074:6;9082;9131:2;9119:9;9110:7;9106:23;9102:32;9099:119;;;9137:79;;:::i;:::-;9099:119;9285:1;9274:9;9270:17;9257:31;9315:18;9307:6;9304:30;9301:117;;;9337:79;;:::i;:::-;9301:117;9442:78;9512:7;9503:6;9492:9;9488:22;9442:78;:::i;:::-;9432:88;;9228:302;9597:2;9586:9;9582:18;9569:32;9628:18;9620:6;9617:30;9614:117;;;9650:79;;:::i;:::-;9614:117;9755:78;9825:7;9816:6;9805:9;9801:22;9755:78;:::i;:::-;9745:88;;9540:303;8956:894;;;;;:::o;9856:329::-;9915:6;9964:2;9952:9;9943:7;9939:23;9935:32;9932:119;;;9970:79;;:::i;:::-;9932:119;10090:1;10115:53;10160:7;10151:6;10140:9;10136:22;10115:53;:::i;:::-;10105:63;;10061:117;9856:329;;;;:::o;10191:99::-;10243:6;10277:5;10271:12;10261:22;;10191:99;;;:::o;10296:169::-;10380:11;10414:6;10409:3;10402:19;10454:4;10449:3;10445:14;10430:29;;10296:169;;;;:::o;10471:246::-;10552:1;10562:113;10576:6;10573:1;10570:13;10562:113;;;10661:1;10656:3;10652:11;10646:18;10642:1;10637:3;10633:11;10626:39;10598:2;10595:1;10591:10;10586:15;;10562:113;;;10709:1;10700:6;10695:3;10691:16;10684:27;10533:184;10471:246;;;:::o;10723:377::-;10811:3;10839:39;10872:5;10839:39;:::i;:::-;10894:71;10958:6;10953:3;10894:71;:::i;:::-;10887:78;;10974:65;11032:6;11027:3;11020:4;11013:5;11009:16;10974:65;:::i;:::-;11064:29;11086:6;11064:29;:::i;:::-;11059:3;11055:39;11048:46;;10815:285;10723:377;;;;:::o;11106:313::-;11219:4;11257:2;11246:9;11242:18;11234:26;;11306:9;11300:4;11296:20;11292:1;11281:9;11277:17;11270:47;11334:78;11407:4;11398:6;11334:78;:::i;:::-;11326:86;;11106:313;;;;:::o;11425:329::-;11484:6;11533:2;11521:9;11512:7;11508:23;11504:32;11501:119;;;11539:79;;:::i;:::-;11501:119;11659:1;11684:53;11729:7;11720:6;11709:9;11705:22;11684:53;:::i;:::-;11674:63;;11630:117;11425:329;;;;:::o;11760:474::-;11828:6;11836;11885:2;11873:9;11864:7;11860:23;11856:32;11853:119;;;11891:79;;:::i;:::-;11853:119;12011:1;12036:53;12081:7;12072:6;12061:9;12057:22;12036:53;:::i;:::-;12026:63;;11982:117;12138:2;12164:53;12209:7;12200:6;12189:9;12185:22;12164:53;:::i;:::-;12154:63;;12109:118;11760:474;;;;;:::o;12240:307::-;12301:4;12391:18;12383:6;12380:30;12377:56;;;12413:18;;:::i;:::-;12377:56;12451:29;12473:6;12451:29;:::i;:::-;12443:37;;12535:4;12529;12525:15;12517:23;;12240:307;;;:::o;12553:423::-;12630:5;12655:65;12671:48;12712:6;12671:48;:::i;:::-;12655:65;:::i;:::-;12646:74;;12743:6;12736:5;12729:21;12781:4;12774:5;12770:16;12819:3;12810:6;12805:3;12801:16;12798:25;12795:112;;;12826:79;;:::i;:::-;12795:112;12916:54;12963:6;12958:3;12953;12916:54;:::i;:::-;12636:340;12553:423;;;;;:::o;12995:338::-;13050:5;13099:3;13092:4;13084:6;13080:17;13076:27;13066:122;;13107:79;;:::i;:::-;13066:122;13224:6;13211:20;13249:78;13323:3;13315:6;13308:4;13300:6;13296:17;13249:78;:::i;:::-;13240:87;;13056:277;12995:338;;;;:::o;13339:1509::-;13493:6;13501;13509;13517;13525;13574:3;13562:9;13553:7;13549:23;13545:33;13542:120;;;13581:79;;:::i;:::-;13542:120;13701:1;13726:53;13771:7;13762:6;13751:9;13747:22;13726:53;:::i;:::-;13716:63;;13672:117;13828:2;13854:53;13899:7;13890:6;13879:9;13875:22;13854:53;:::i;:::-;13844:63;;13799:118;13984:2;13973:9;13969:18;13956:32;14015:18;14007:6;14004:30;14001:117;;;14037:79;;:::i;:::-;14001:117;14142:78;14212:7;14203:6;14192:9;14188:22;14142:78;:::i;:::-;14132:88;;13927:303;14297:2;14286:9;14282:18;14269:32;14328:18;14320:6;14317:30;14314:117;;;14350:79;;:::i;:::-;14314:117;14455:78;14525:7;14516:6;14505:9;14501:22;14455:78;:::i;:::-;14445:88;;14240:303;14610:3;14599:9;14595:19;14582:33;14642:18;14634:6;14631:30;14628:117;;;14664:79;;:::i;:::-;14628:117;14769:62;14823:7;14814:6;14803:9;14799:22;14769:62;:::i;:::-;14759:72;;14553:288;13339:1509;;;;;;;;:::o;14854:114::-;14921:6;14955:5;14949:12;14939:22;;14854:114;;;:::o;14974:184::-;15073:11;15107:6;15102:3;15095:19;15147:4;15142:3;15138:14;15123:29;;14974:184;;;;:::o;15164:132::-;15231:4;15254:3;15246:11;;15284:4;15279:3;15275:14;15267:22;;15164:132;;;:::o;15302:108::-;15379:24;15397:5;15379:24;:::i;:::-;15374:3;15367:37;15302:108;;:::o;15416:179::-;15485:10;15506:46;15548:3;15540:6;15506:46;:::i;:::-;15584:4;15579:3;15575:14;15561:28;;15416:179;;;;:::o;15601:113::-;15671:4;15703;15698:3;15694:14;15686:22;;15601:113;;;:::o;15750:732::-;15869:3;15898:54;15946:5;15898:54;:::i;:::-;15968:86;16047:6;16042:3;15968:86;:::i;:::-;15961:93;;16078:56;16128:5;16078:56;:::i;:::-;16157:7;16188:1;16173:284;16198:6;16195:1;16192:13;16173:284;;;16274:6;16268:13;16301:63;16360:3;16345:13;16301:63;:::i;:::-;16294:70;;16387:60;16440:6;16387:60;:::i;:::-;16377:70;;16233:224;16220:1;16217;16213:9;16208:14;;16173:284;;;16177:14;16473:3;16466:10;;15874:608;;;15750:732;;;;:::o;16488:373::-;16631:4;16669:2;16658:9;16654:18;16646:26;;16718:9;16712:4;16708:20;16704:1;16693:9;16689:17;16682:47;16746:108;16849:4;16840:6;16746:108;:::i;:::-;16738:116;;16488:373;;;;:::o;16867:652::-;16944:6;16952;17001:2;16989:9;16980:7;16976:23;16972:32;16969:119;;;17007:79;;:::i;:::-;16969:119;17127:1;17152:53;17197:7;17188:6;17177:9;17173:22;17152:53;:::i;:::-;17142:63;;17098:117;17282:2;17271:9;17267:18;17254:32;17313:18;17305:6;17302:30;17299:117;;;17335:79;;:::i;:::-;17299:117;17440:62;17494:7;17485:6;17474:9;17470:22;17440:62;:::i;:::-;17430:72;;17225:287;16867:652;;;;;:::o;17525:77::-;17562:7;17591:5;17580:16;;17525:77;;;:::o;17608:118::-;17695:24;17713:5;17695:24;:::i;:::-;17690:3;17683:37;17608:118;;:::o;17732:222::-;17825:4;17863:2;17852:9;17848:18;17840:26;;17876:71;17944:1;17933:9;17929:17;17920:6;17876:71;:::i;:::-;17732:222;;;;:::o;17960:118::-;18047:24;18065:5;18047:24;:::i;:::-;18042:3;18035:37;17960:118;;:::o;18084:222::-;18177:4;18215:2;18204:9;18200:18;18192:26;;18228:71;18296:1;18285:9;18281:17;18272:6;18228:71;:::i;:::-;18084:222;;;;:::o;18312:474::-;18380:6;18388;18437:2;18425:9;18416:7;18412:23;18408:32;18405:119;;;18443:79;;:::i;:::-;18405:119;18563:1;18588:53;18633:7;18624:6;18613:9;18609:22;18588:53;:::i;:::-;18578:63;;18534:117;18690:2;18716:53;18761:7;18752:6;18741:9;18737:22;18716:53;:::i;:::-;18706:63;;18661:118;18312:474;;;;;:::o;18792:116::-;18862:21;18877:5;18862:21;:::i;:::-;18855:5;18852:32;18842:60;;18898:1;18895;18888:12;18842:60;18792:116;:::o;18914:133::-;18957:5;18995:6;18982:20;18973:29;;19011:30;19035:5;19011:30;:::i;:::-;18914:133;;;;:::o;19053:468::-;19118:6;19126;19175:2;19163:9;19154:7;19150:23;19146:32;19143:119;;;19181:79;;:::i;:::-;19143:119;19301:1;19326:53;19371:7;19362:6;19351:9;19347:22;19326:53;:::i;:::-;19316:63;;19272:117;19428:2;19454:50;19496:7;19487:6;19476:9;19472:22;19454:50;:::i;:::-;19444:60;;19399:115;19053:468;;;;;:::o;19527:1009::-;19639:6;19647;19655;19704:2;19692:9;19683:7;19679:23;19675:32;19672:119;;;19710:79;;:::i;:::-;19672:119;19830:1;19855:53;19900:7;19891:6;19880:9;19876:22;19855:53;:::i;:::-;19845:63;;19801:117;19985:2;19974:9;19970:18;19957:32;20016:18;20008:6;20005:30;20002:117;;;20038:79;;:::i;:::-;20002:117;20143:78;20213:7;20204:6;20193:9;20189:22;20143:78;:::i;:::-;20133:88;;19928:303;20298:2;20287:9;20283:18;20270:32;20329:18;20321:6;20318:30;20315:117;;;20351:79;;:::i;:::-;20315:117;20456:63;20511:7;20502:6;20491:9;20487:22;20456:63;:::i;:::-;20446:73;;20241:288;19527:1009;;;;;:::o;20542:474::-;20610:6;20618;20667:2;20655:9;20646:7;20642:23;20638:32;20635:119;;;20673:79;;:::i;:::-;20635:119;20793:1;20818:53;20863:7;20854:6;20843:9;20839:22;20818:53;:::i;:::-;20808:63;;20764:117;20920:2;20946:53;20991:7;20982:6;20971:9;20967:22;20946:53;:::i;:::-;20936:63;;20891:118;20542:474;;;;;:::o;21022:1089::-;21126:6;21134;21142;21150;21158;21207:3;21195:9;21186:7;21182:23;21178:33;21175:120;;;21214:79;;:::i;:::-;21175:120;21334:1;21359:53;21404:7;21395:6;21384:9;21380:22;21359:53;:::i;:::-;21349:63;;21305:117;21461:2;21487:53;21532:7;21523:6;21512:9;21508:22;21487:53;:::i;:::-;21477:63;;21432:118;21589:2;21615:53;21660:7;21651:6;21640:9;21636:22;21615:53;:::i;:::-;21605:63;;21560:118;21717:2;21743:53;21788:7;21779:6;21768:9;21764:22;21743:53;:::i;:::-;21733:63;;21688:118;21873:3;21862:9;21858:19;21845:33;21905:18;21897:6;21894:30;21891:117;;;21927:79;;:::i;:::-;21891:117;22032:62;22086:7;22077:6;22066:9;22062:22;22032:62;:::i;:::-;22022:72;;21816:288;21022:1089;;;;;;;;:::o;22117:171::-;22257:23;22253:1;22245:6;22241:14;22234:47;22117:171;:::o;22294:366::-;22436:3;22457:67;22521:2;22516:3;22457:67;:::i;:::-;22450:74;;22533:93;22622:3;22533:93;:::i;:::-;22651:2;22646:3;22642:12;22635:19;;22294:366;;;:::o;22666:419::-;22832:4;22870:2;22859:9;22855:18;22847:26;;22919:9;22913:4;22909:20;22905:1;22894:9;22890:17;22883:47;22947:131;23073:4;22947:131;:::i;:::-;22939:139;;22666:419;;;:::o;23091:159::-;23231:11;23227:1;23219:6;23215:14;23208:35;23091:159;:::o;23256:365::-;23398:3;23419:66;23483:1;23478:3;23419:66;:::i;:::-;23412:73;;23494:93;23583:3;23494:93;:::i;:::-;23612:2;23607:3;23603:12;23596:19;;23256:365;;;:::o;23627:419::-;23793:4;23831:2;23820:9;23816:18;23808:26;;23880:9;23874:4;23870:20;23866:1;23855:9;23851:17;23844:47;23908:131;24034:4;23908:131;:::i;:::-;23900:139;;23627:419;;;:::o;24052:180::-;24100:77;24097:1;24090:88;24197:4;24194:1;24187:15;24221:4;24218:1;24211:15;24238:332;24359:4;24397:2;24386:9;24382:18;24374:26;;24410:71;24478:1;24467:9;24463:17;24454:6;24410:71;:::i;:::-;24491:72;24559:2;24548:9;24544:18;24535:6;24491:72;:::i;:::-;24238:332;;;;;:::o;24576:180::-;24624:77;24621:1;24614:88;24721:4;24718:1;24711:15;24745:4;24742:1;24735:15;24762:233;24801:3;24824:24;24842:5;24824:24;:::i;:::-;24815:33;;24870:66;24863:5;24860:77;24857:103;;24940:18;;:::i;:::-;24857:103;24987:1;24980:5;24976:13;24969:20;;24762:233;;;:::o;25001:180::-;25049:77;25046:1;25039:88;25146:4;25143:1;25136:15;25170:4;25167:1;25160:15;25187:320;25231:6;25268:1;25262:4;25258:12;25248:22;;25315:1;25309:4;25305:12;25336:18;25326:81;;25392:4;25384:6;25380:17;25370:27;;25326:81;25454:2;25446:6;25443:14;25423:18;25420:38;25417:84;;25473:18;;:::i;:::-;25417:84;25238:269;25187:320;;;:::o;25513:221::-;25653:34;25649:1;25641:6;25637:14;25630:58;25722:4;25717:2;25709:6;25705:15;25698:29;25513:221;:::o;25740:366::-;25882:3;25903:67;25967:2;25962:3;25903:67;:::i;:::-;25896:74;;25979:93;26068:3;25979:93;:::i;:::-;26097:2;26092:3;26088:12;26081:19;;25740:366;;;:::o;26112:419::-;26278:4;26316:2;26305:9;26301:18;26293:26;;26365:9;26359:4;26355:20;26351:1;26340:9;26336:17;26329:47;26393:131;26519:4;26393:131;:::i;:::-;26385:139;;26112:419;;;:::o;26537:191::-;26577:3;26596:20;26614:1;26596:20;:::i;:::-;26591:25;;26630:20;26648:1;26630:20;:::i;:::-;26625:25;;26673:1;26670;26666:9;26659:16;;26694:3;26691:1;26688:10;26685:36;;;26701:18;;:::i;:::-;26685:36;26537:191;;;;:::o;26734:177::-;26874:29;26870:1;26862:6;26858:14;26851:53;26734:177;:::o;26917:366::-;27059:3;27080:67;27144:2;27139:3;27080:67;:::i;:::-;27073:74;;27156:93;27245:3;27156:93;:::i;:::-;27274:2;27269:3;27265:12;27258:19;;26917:366;;;:::o;27289:419::-;27455:4;27493:2;27482:9;27478:18;27470:26;;27542:9;27536:4;27532:20;27528:1;27517:9;27513:17;27506:47;27570:131;27696:4;27570:131;:::i;:::-;27562:139;;27289:419;;;:::o;27714:137::-;27768:5;27799:6;27793:13;27784:22;;27815:30;27839:5;27815:30;:::i;:::-;27714:137;;;;:::o;27857:345::-;27924:6;27973:2;27961:9;27952:7;27948:23;27944:32;27941:119;;;27979:79;;:::i;:::-;27941:119;28099:1;28124:61;28177:7;28168:6;28157:9;28153:22;28124:61;:::i;:::-;28114:71;;28070:125;27857:345;;;;:::o;28208:332::-;28329:4;28367:2;28356:9;28352:18;28344:26;;28380:71;28448:1;28437:9;28433:17;28424:6;28380:71;:::i;:::-;28461:72;28529:2;28518:9;28514:18;28505:6;28461:72;:::i;:::-;28208:332;;;;;:::o;28546:163::-;28686:15;28682:1;28674:6;28670:14;28663:39;28546:163;:::o;28715:366::-;28857:3;28878:67;28942:2;28937:3;28878:67;:::i;:::-;28871:74;;28954:93;29043:3;28954:93;:::i;:::-;29072:2;29067:3;29063:12;29056:19;;28715:366;;;:::o;29087:419::-;29253:4;29291:2;29280:9;29276:18;29268:26;;29340:9;29334:4;29330:20;29326:1;29315:9;29311:17;29304:47;29368:131;29494:4;29368:131;:::i;:::-;29360:139;;29087:419;;;:::o;29512:85::-;29557:7;29586:5;29575:16;;29512:85;;;:::o;29603:101::-;29639:7;29679:18;29672:5;29668:30;29657:41;;29603:101;;;:::o;29710:60::-;29738:3;29759:5;29752:12;;29710:60;;;:::o;29776:156::-;29833:9;29866:60;29883:42;29892:32;29918:5;29892:32;:::i;:::-;29883:42;:::i;:::-;29866:60;:::i;:::-;29853:73;;29776:156;;;:::o;29938:145::-;30032:44;30070:5;30032:44;:::i;:::-;30027:3;30020:57;29938:145;;:::o;30089:236::-;30189:4;30227:2;30216:9;30212:18;30204:26;;30240:78;30315:1;30304:9;30300:17;30291:6;30240:78;:::i;:::-;30089:236;;;;:::o;30331:223::-;30471:34;30467:1;30459:6;30455:14;30448:58;30540:6;30535:2;30527:6;30523:15;30516:31;30331:223;:::o;30560:366::-;30702:3;30723:67;30787:2;30782:3;30723:67;:::i;:::-;30716:74;;30799:93;30888:3;30799:93;:::i;:::-;30917:2;30912:3;30908:12;30901:19;;30560:366;;;:::o;30932:419::-;31098:4;31136:2;31125:9;31121:18;31113:26;;31185:9;31179:4;31175:20;31171:1;31160:9;31156:17;31149:47;31213:131;31339:4;31213:131;:::i;:::-;31205:139;;30932:419;;;:::o;31357:179::-;31497:31;31493:1;31485:6;31481:14;31474:55;31357:179;:::o;31542:366::-;31684:3;31705:67;31769:2;31764:3;31705:67;:::i;:::-;31698:74;;31781:93;31870:3;31781:93;:::i;:::-;31899:2;31894:3;31890:12;31883:19;;31542:366;;;:::o;31914:419::-;32080:4;32118:2;32107:9;32103:18;32095:26;;32167:9;32161:4;32157:20;32153:1;32142:9;32138:17;32131:47;32195:131;32321:4;32195:131;:::i;:::-;32187:139;;31914:419;;;:::o;32339:141::-;32388:4;32411:3;32403:11;;32434:3;32431:1;32424:14;32468:4;32465:1;32455:18;32447:26;;32339:141;;;:::o;32486:93::-;32523:6;32570:2;32565;32558:5;32554:14;32550:23;32540:33;;32486:93;;;:::o;32585:107::-;32629:8;32679:5;32673:4;32669:16;32648:37;;32585:107;;;;:::o;32698:393::-;32767:6;32817:1;32805:10;32801:18;32840:97;32870:66;32859:9;32840:97;:::i;:::-;32958:39;32988:8;32977:9;32958:39;:::i;:::-;32946:51;;33030:4;33026:9;33019:5;33015:21;33006:30;;33079:4;33069:8;33065:19;33058:5;33055:30;33045:40;;32774:317;;32698:393;;;;;:::o;33097:142::-;33147:9;33180:53;33198:34;33207:24;33225:5;33207:24;:::i;:::-;33198:34;:::i;:::-;33180:53;:::i;:::-;33167:66;;33097:142;;;:::o;33245:75::-;33288:3;33309:5;33302:12;;33245:75;;;:::o;33326:269::-;33436:39;33467:7;33436:39;:::i;:::-;33497:91;33546:41;33570:16;33546:41;:::i;:::-;33538:6;33531:4;33525:11;33497:91;:::i;:::-;33491:4;33484:105;33402:193;33326:269;;;:::o;33601:73::-;33646:3;33601:73;:::o;33680:189::-;33757:32;;:::i;:::-;33798:65;33856:6;33848;33842:4;33798:65;:::i;:::-;33733:136;33680:189;;:::o;33875:186::-;33935:120;33952:3;33945:5;33942:14;33935:120;;;34006:39;34043:1;34036:5;34006:39;:::i;:::-;33979:1;33972:5;33968:13;33959:22;;33935:120;;;33875:186;;:::o;34067:543::-;34168:2;34163:3;34160:11;34157:446;;;34202:38;34234:5;34202:38;:::i;:::-;34286:29;34304:10;34286:29;:::i;:::-;34276:8;34272:44;34469:2;34457:10;34454:18;34451:49;;;34490:8;34475:23;;34451:49;34513:80;34569:22;34587:3;34569:22;:::i;:::-;34559:8;34555:37;34542:11;34513:80;:::i;:::-;34172:431;;34157:446;34067:543;;;:::o;34616:117::-;34670:8;34720:5;34714:4;34710:16;34689:37;;34616:117;;;;:::o;34739:169::-;34783:6;34816:51;34864:1;34860:6;34852:5;34849:1;34845:13;34816:51;:::i;:::-;34812:56;34897:4;34891;34887:15;34877:25;;34790:118;34739:169;;;;:::o;34913:295::-;34989:4;35135:29;35160:3;35154:4;35135:29;:::i;:::-;35127:37;;35197:3;35194:1;35190:11;35184:4;35181:21;35173:29;;34913:295;;;;:::o;35213:1395::-;35330:37;35363:3;35330:37;:::i;:::-;35432:18;35424:6;35421:30;35418:56;;;35454:18;;:::i;:::-;35418:56;35498:38;35530:4;35524:11;35498:38;:::i;:::-;35583:67;35643:6;35635;35629:4;35583:67;:::i;:::-;35677:1;35701:4;35688:17;;35733:2;35725:6;35722:14;35750:1;35745:618;;;;36407:1;36424:6;36421:77;;;36473:9;36468:3;36464:19;36458:26;36449:35;;36421:77;36524:67;36584:6;36577:5;36524:67;:::i;:::-;36518:4;36511:81;36380:222;35715:887;;35745:618;35797:4;35793:9;35785:6;35781:22;35831:37;35863:4;35831:37;:::i;:::-;35890:1;35904:208;35918:7;35915:1;35912:14;35904:208;;;35997:9;35992:3;35988:19;35982:26;35974:6;35967:42;36048:1;36040:6;36036:14;36026:24;;36095:2;36084:9;36080:18;36067:31;;35941:4;35938:1;35934:12;35929:17;;35904:208;;;36140:6;36131:7;36128:19;36125:179;;;36198:9;36193:3;36189:19;36183:26;36241:48;36283:4;36275:6;36271:17;36260:9;36241:48;:::i;:::-;36233:6;36226:64;36148:156;36125:179;36350:1;36346;36338:6;36334:14;36330:22;36324:4;36317:36;35752:611;;;35715:887;;35305:1303;;;35213:1395;;:::o;36614:332::-;36735:4;36773:2;36762:9;36758:18;36750:26;;36786:71;36854:1;36843:9;36839:17;36830:6;36786:71;:::i;:::-;36867:72;36935:2;36924:9;36920:18;36911:6;36867:72;:::i;:::-;36614:332;;;;;:::o;36952:122::-;37025:24;37043:5;37025:24;:::i;:::-;37018:5;37015:35;37005:63;;37064:1;37061;37054:12;37005:63;36952:122;:::o;37080:143::-;37137:5;37168:6;37162:13;37153:22;;37184:33;37211:5;37184:33;:::i;:::-;37080:143;;;;:::o;37229:351::-;37299:6;37348:2;37336:9;37327:7;37323:23;37319:32;37316:119;;;37354:79;;:::i;:::-;37316:119;37474:1;37499:64;37555:7;37546:6;37535:9;37531:22;37499:64;:::i;:::-;37489:74;;37445:128;37229:351;;;;:::o;37586:98::-;37637:6;37671:5;37665:12;37655:22;;37586:98;;;:::o;37690:168::-;37773:11;37807:6;37802:3;37795:19;37847:4;37842:3;37838:14;37823:29;;37690:168;;;;:::o;37864:373::-;37950:3;37978:38;38010:5;37978:38;:::i;:::-;38032:70;38095:6;38090:3;38032:70;:::i;:::-;38025:77;;38111:65;38169:6;38164:3;38157:4;38150:5;38146:16;38111:65;:::i;:::-;38201:29;38223:6;38201:29;:::i;:::-;38196:3;38192:39;38185:46;;37954:283;37864:373;;;;:::o;38243:751::-;38466:4;38504:3;38493:9;38489:19;38481:27;;38518:71;38586:1;38575:9;38571:17;38562:6;38518:71;:::i;:::-;38599:72;38667:2;38656:9;38652:18;38643:6;38599:72;:::i;:::-;38681;38749:2;38738:9;38734:18;38725:6;38681:72;:::i;:::-;38763;38831:2;38820:9;38816:18;38807:6;38763:72;:::i;:::-;38883:9;38877:4;38873:20;38867:3;38856:9;38852:19;38845:49;38911:76;38982:4;38973:6;38911:76;:::i;:::-;38903:84;;38243:751;;;;;;;;:::o;39000:141::-;39056:5;39087:6;39081:13;39072:22;;39103:32;39129:5;39103:32;:::i;:::-;39000:141;;;;:::o;39147:349::-;39216:6;39265:2;39253:9;39244:7;39240:23;39236:32;39233:119;;;39271:79;;:::i;:::-;39233:119;39391:1;39416:63;39471:7;39462:6;39451:9;39447:22;39416:63;:::i;:::-;39406:73;;39362:127;39147:349;;;;:::o;39502:1053::-;39825:4;39863:3;39852:9;39848:19;39840:27;;39877:71;39945:1;39934:9;39930:17;39921:6;39877:71;:::i;:::-;39958:72;40026:2;40015:9;40011:18;40002:6;39958:72;:::i;:::-;40077:9;40071:4;40067:20;40062:2;40051:9;40047:18;40040:48;40105:108;40208:4;40199:6;40105:108;:::i;:::-;40097:116;;40260:9;40254:4;40250:20;40245:2;40234:9;40230:18;40223:48;40288:108;40391:4;40382:6;40288:108;:::i;:::-;40280:116;;40444:9;40438:4;40434:20;40428:3;40417:9;40413:19;40406:49;40472:76;40543:4;40534:6;40472:76;:::i;:::-;40464:84;;39502:1053;;;;;;;;:::o;40561:147::-;40662:11;40699:3;40684:18;;40561:147;;;;:::o;40714:386::-;40818:3;40846:38;40878:5;40846:38;:::i;:::-;40900:88;40981:6;40976:3;40900:88;:::i;:::-;40893:95;;40997:65;41055:6;41050:3;41043:4;41036:5;41032:16;40997:65;:::i;:::-;41087:6;41082:3;41078:16;41071:23;;40822:278;40714:386;;;;:::o;41106:271::-;41236:3;41258:93;41347:3;41338:6;41258:93;:::i;:::-;41251:100;;41368:3;41361:10;;41106:271;;;;:::o;41383:553::-;41560:4;41598:3;41587:9;41583:19;41575:27;;41612:71;41680:1;41669:9;41665:17;41656:6;41612:71;:::i;:::-;41693:72;41761:2;41750:9;41746:18;41737:6;41693:72;:::i;:::-;41775;41843:2;41832:9;41828:18;41819:6;41775:72;:::i;:::-;41857;41925:2;41914:9;41910:18;41901:6;41857:72;:::i;:::-;41383:553;;;;;;;:::o;41942:634::-;42163:4;42201:2;42190:9;42186:18;42178:26;;42250:9;42244:4;42240:20;42236:1;42225:9;42221:17;42214:47;42278:108;42381:4;42372:6;42278:108;:::i;:::-;42270:116;;42433:9;42427:4;42423:20;42418:2;42407:9;42403:18;42396:48;42461:108;42564:4;42555:6;42461:108;:::i;:::-;42453:116;;41942:634;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3728600","executionCost":"infinite","totalCost":"infinite"},"external":{"UPGRADE_INTERFACE_VERSION()":"infinite","addAdmin(address)":"infinite","adminBurn(address,uint256)":"infinite","adminBurnBatch(address[],uint256[])":"infinite","adminMint(uint256,uint256)":"infinite","admins(address)":"2890","artistAddresses(uint256)":"2951","balanceOf(address,uint256)":"infinite","balanceOfBatch(address[],uint256[])":"infinite","exists(uint256)":"3000","increaseTokenSupplyLimit(uint256,uint256)":"infinite","init(address,address[],string)":"infinite","isAdmin(address)":"2991","isApprovedForAll(address,address)":"infinite","mint(uint256,uint256)":"infinite","owner()":"2621","proxiableUUID()":"infinite","removeAdmin(address)":"infinite","renounceOwnership()":"infinite","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"infinite","safeTransferFrom(address,address,uint256,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","setArtistAddress(uint256,address)":"27305","setURI(string)":"infinite","supportsInterface(bytes4)":"772","tokenSupplyLimits(uint256)":"infinite","totalSupply()":"2537","totalSupply(uint256)":"infinite","transferOwnership(address)":"infinite","upgradeToAndCall(address,bytes)":"infinite","uri(uint256)":"infinite"}},"methodIdentifiers":{"UPGRADE_INTERFACE_VERSION()":"ad3cb1cc","addAdmin(address)":"70480275","adminBurn(address,uint256)":"06dd0419","adminBurnBatch(address[],uint256[])":"077d9234","adminMint(uint256,uint256)":"d00e40ce","admins(address)":"429b62e5","artistAddresses(uint256)":"831ffd05","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","exists(uint256)":"4f558e79","increaseTokenSupplyLimit(uint256,uint256)":"c36497e5","init(address,address[],string)":"bb625509","isAdmin(address)":"24d7806c","isApprovedForAll(address,address)":"e985e9c5","mint(uint256,uint256)":"1b2ef1ca","owner()":"8da5cb5b","proxiableUUID()":"52d1902d","removeAdmin(address)":"1785f53c","renounceOwnership()":"715018a6","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","setArtistAddress(uint256,address)":"9eca4b7b","setURI(string)":"02fe5305","supportsInterface(bytes4)":"01ffc9a7","tokenSupplyLimits(uint256)":"fbe0a892","totalSupply()":"18160ddd","totalSupply(uint256)":"bd85b039","transferOwnership(address)":"f2fde38b","upgradeToAndCall(address,bytes)":"4f1ef286","uri(uint256)":"0e89341c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"adminBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"adminBurnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"adminMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artistAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraSupply\",\"type\":\"uint256\"}],\"name\":\"increaseTokenSupplyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"initialAdmins\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"artistAddress\",\"type\":\"address\"}],\"name\":\"setArtistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupplyLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"Add an admin Params: _adminAddress: the new address\"},\"adminBurn(address,uint256)\":{\"details\":\"The admin burn function for burning a user's token Params: from: the owner of the token tokenId: the token id\"},\"adminBurnBatch(address[],uint256[])\":{\"details\":\"The admin burn batch function for burning a user's token Params: from: the owners of the token tokenIds: the token ids\"},\"adminMint(uint256,uint256)\":{\"details\":\"The admin mint function (mints new tokens of a particular id) Params: tokenId: the token id to be minted count: the number of new tokens to mint\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"increaseTokenSupplyLimit(uint256,uint256)\":{\"details\":\"Increase the max allowed supply of an artist token Params: tokenId: the id of the token being updated extraSupply: the additional supply to be allowed\"},\"isAdmin(address)\":{\"details\":\"Check address is admin Params: _address: the address to check\"},\"mint(uint256,uint256)\":{\"details\":\"The mint function (mints new tokens of a particular id) Params: tokenId: the token id to be minted count: the number of new tokens to mint\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"removeAdmin(address)\":{\"details\":\"Remove an admin Params: adminAddress: the address to remove\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setArtistAddress(uint256,address)\":{\"details\":\"Update the artist address for a particular token Params: tokenId: the id of the token being updated artistAddress: the new address of the artist for this token\"},\"setURI(string)\":{\"details\":\"Update the uri template Params: _uri: the new uri template\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply()\":{\"details\":\"Total value of tokens.\"},\"totalSupply(uint256)\":{\"details\":\"Total value of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HoldrArtistsERC1155UpgradeTest.sol\":\"HoldrArtistsERC1155UpgradeTest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Arrays} from \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155\\n    struct ERC1155Storage {\\n        mapping(uint256 id => mapping(address account => uint256)) _balances;\\n\\n        mapping(address account => mapping(address operator => bool)) _operatorApprovals;\\n\\n        // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n        string _uri;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC1155\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC1155StorageLocation = 0x88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500;\\n\\n    function _getERC1155Storage() private pure returns (ERC1155Storage storage $) {\\n        assembly {\\n            $.slot := ERC1155StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = $._balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    $._balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                $._balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        $._uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x070826217a19b56724fe97adc7e5daef1d614e45b98ab964bda02b3be01e9870\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155Upgradeable} from \\\"../ERC1155Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n *\\n * NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens\\n * that can be minted.\\n *\\n * CAUTION: This extension should not be added in an upgrade to an already deployed contract.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155Supply\\n    struct ERC1155SupplyStorage {\\n        mapping(uint256 id => uint256) _totalSupply;\\n        uint256 _totalSupplyAll;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC1155Supply\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC1155SupplyStorageLocation = 0x4a593662ee04d27b6a00ebb31be7fe0c102c2ade82a7c5d764f2df05dc4e2800;\\n\\n    function _getERC1155SupplyStorage() private pure returns (ERC1155SupplyStorage storage $) {\\n        assembly {\\n            $.slot := ERC1155SupplyStorageLocation\\n        }\\n    }\\n\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Total value of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        return $._totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Total value of tokens.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        return $._totalSupplyAll;\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_update}.\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) internal virtual override {\\n        ERC1155SupplyStorage storage $ = _getERC1155SupplyStorage();\\n        super._update(from, to, ids, values);\\n\\n        if (from == address(0)) {\\n            uint256 totalMintValue = 0;\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 value = values[i];\\n                // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n                $._totalSupply[ids[i]] += value;\\n                totalMintValue += value;\\n            }\\n            // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\\n            $._totalSupplyAll += totalMintValue;\\n        }\\n\\n        if (to == address(0)) {\\n            uint256 totalBurnValue = 0;\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 value = values[i];\\n\\n                unchecked {\\n                    // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\\n                    $._totalSupply[ids[i]] -= value;\\n                    // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\\n                    totalBurnValue += value;\\n                }\\n            }\\n            unchecked {\\n                // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\\n                $._totalSupplyAll -= totalBurnValue;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x734e28bc55a4939ff5b831d733f6d6414b35251cd85b1155cefb66e73ae844f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x72d47aebad24c59f6e78d0c3e827440173419a333fd910a37fa1e532c98f7e4c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x89b84f7b1b2d6c294cd6b9a9f661c1cfb1b9b10ca7bac5b3445850a8ce96dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC2981} from \\\"../../interfaces/IERC2981.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 tokenId => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev The default royalty set is invalid (eg. (numerator / denominator) >= 1).\\n     */\\n    error ERC2981InvalidDefaultRoyalty(uint256 numerator, uint256 denominator);\\n\\n    /**\\n     * @dev The default royalty receiver is invalid.\\n     */\\n    error ERC2981InvalidDefaultRoyaltyReceiver(address receiver);\\n\\n    /**\\n     * @dev The royalty set for an specific `tokenId` is invalid (eg. (numerator / denominator) >= 1).\\n     */\\n    error ERC2981InvalidTokenRoyalty(uint256 tokenId, uint256 numerator, uint256 denominator);\\n\\n    /**\\n     * @dev The royalty receiver for `tokenId` is invalid.\\n     */\\n    error ERC2981InvalidTokenRoyaltyReceiver(uint256 tokenId, address receiver);\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        uint256 denominator = _feeDenominator();\\n        if (feeNumerator > denominator) {\\n            // Royalty fee will exceed the sale price\\n            revert ERC2981InvalidDefaultRoyalty(feeNumerator, denominator);\\n        }\\n        if (receiver == address(0)) {\\n            revert ERC2981InvalidDefaultRoyaltyReceiver(address(0));\\n        }\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        uint256 denominator = _feeDenominator();\\n        if (feeNumerator > denominator) {\\n            // Royalty fee will exceed the sale price\\n            revert ERC2981InvalidTokenRoyalty(tokenId, feeNumerator, denominator);\\n        }\\n        if (receiver == address(0)) {\\n            revert ERC2981InvalidTokenRoyaltyReceiver(tokenId, address(0));\\n        }\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x87e4eac873515f713e858d72150a7d2a69ddd531967e60a5d6ba77127db1fd54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/HoldrArtistsERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts/token/common/ERC2981.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract HoldrArtistsERC1155 is Initializable, ERC1155SupplyUpgradeable, OwnableUpgradeable, UUPSUpgradeable {\\n\\n  mapping(address => bool) public admins;\\n  mapping(uint256 => address) public artistAddresses;\\n  mapping(uint256 => uint256) public tokenSupplyLimits;\\n\\n  function init(address initialOwner, address[] memory initialAdmins, string memory uri) public initializer {\\n    __ERC1155Supply_init();\\n    __Ownable_init(initialOwner);\\n    __UUPSUpgradeable_init();\\n    _setURI(uri);\\n\\n    for (uint i = 0; i < initialAdmins.length; i++) {\\n      admins[initialAdmins[i]] = true;\\n    }\\n  }\\n\\n  /**\\n     * @dev Update the artist address for a particular token\\n\\n     * Params:\\n     * tokenId: the id of the token being updated\\n     * artistAddress: the new address of the artist for this token\\n     */\\n  function setArtistAddress(uint256 tokenId, address artistAddress) external {\\n    require(admins[msg.sender], \\\"not admin\\\");\\n    require(tokenId != 0, \\\"0 not allowed\\\");\\n    artistAddresses[tokenId] = artistAddress;\\n  }\\n\\n  /**\\n     * @dev Increase the max allowed supply of an artist token\\n\\n     * Params:\\n     * tokenId: the id of the token being updated\\n     * extraSupply: the additional supply to be allowed\\n     */\\n  function increaseTokenSupplyLimit(uint256 tokenId, uint256 extraSupply) external {\\n    require(admins[msg.sender], \\\"not admin\\\");\\n    require(tokenSupplyLimits[tokenId] + extraSupply <= 1000, \\\"new maximum supply would exceed 1000\\\");\\n    tokenSupplyLimits[tokenId] = tokenSupplyLimits[tokenId] + extraSupply;\\n  }\\n\\n  /**\\n     * @dev Update the uri template\\n\\n     * Params:\\n     * _uri: the new uri template\\n     */\\n  function setURI(string memory uri) external onlyOwner {\\n    _setURI(uri);\\n  }\\n\\n  /**\\n     * @dev Check address is admin\\n\\n     * Params:\\n     * _address: the address to check\\n     */\\n  function isAdmin(address adminAddress) view external returns (bool) {\\n    return admins[adminAddress] == true;\\n  }\\n\\n  /**\\n     * @dev Add an admin\\n\\n     * Params:\\n     * _adminAddress: the new address\\n     */\\n  function addAdmin(address adminAddress) external onlyOwner {\\n    admins[adminAddress] = true;\\n  }\\n\\n  /**\\n     * @dev Remove an admin\\n\\n     * Params:\\n     * adminAddress: the address to remove\\n     */\\n  function removeAdmin(address adminAddress) external onlyOwner {\\n    delete admins[adminAddress];\\n  }\\n\\n  /**\\n     * @dev The mint function (mints new tokens of a particular id)\\n\\n     * Params:\\n     * tokenId: the token id to be minted\\n     * count: the number of new tokens to mint\\n     */\\n  function mint(uint256 tokenId, uint256 count) external {\\n    require(artistAddresses[tokenId] == msg.sender, \\\"sender is not owner for this token\\\");\\n    require(totalSupply(tokenId) + count <= tokenSupplyLimits[tokenId], \\\"new supply would exceed max\\\");\\n    _mint(artistAddresses[tokenId], tokenId, count, \\\"\\\");\\n  }\\n\\n  /**\\n     * @dev The admin mint function (mints new tokens of a particular id)\\n\\n     * Params:\\n     * tokenId: the token id to be minted\\n     * count: the number of new tokens to mint\\n     */\\n  function adminMint(uint256 tokenId, uint256 count) external {\\n    require(admins[msg.sender], \\\"not admin\\\");\\n    require(artistAddresses[tokenId] != address(0), \\\"artist not set for this token\\\");\\n    require(totalSupply(tokenId) + count <= tokenSupplyLimits[tokenId], \\\"new supply would exceed max\\\");\\n    _mint(artistAddresses[tokenId], tokenId, count, \\\"\\\");\\n  }\\n\\n  /**\\n    * @dev The admin burn function for burning a user's token\\n\\n    * Params:\\n    * from: the owner of the token\\n    * tokenId: the token id\\n    */\\n  function adminBurn(address from, uint256 tokenId) external {\\n    require(admins[msg.sender], \\\"not admin\\\");\\n    super._burn(from, tokenId, 1);\\n  }\\n\\n  /**\\n    * @dev The admin burn batch function for burning a user's token\\n\\n    * Params:\\n    * from: the owners of the token\\n    * tokenIds: the token ids\\n    */\\n  function adminBurnBatch(address[] memory from, uint256[] memory tokenIds) external {\\n    for (uint i = 0; i < from.length; i++) {\\n      this.adminBurn(from[i], tokenIds[i]);\\n    }\\n  }\\n\\n  function setApprovalForAll(address operator, bool approved) public override {\\n    super.setApprovalForAll(operator, approved);\\n  }\\n\\n  function safeTransferFrom(address from, address to, uint256 tokenId, uint256 amount, bytes memory data) public override {\\n    require(this.isAdmin(msg.sender), \\\"not admin\\\");\\n    super.safeTransferFrom(from, to, tokenId, amount, data);\\n  }\\n\\n  function safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public virtual override {\\n    require(this.isAdmin(msg.sender), \\\"not admin\\\");\\n    super.safeBatchTransferFrom(from, to, ids, amounts, data);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155Upgradeable) returns (bool) {\\n    return (\\n      interfaceId == type(IERC2981).interfaceId ||\\n        super.supportsInterface(interfaceId)\\n    );\\n  }\\n\\n  function isApprovedForAll(address owner, address operator) public view override returns (bool) {\\n    if (admins[operator]) {\\n      return true;\\n    }\\n    return super.isApprovedForAll(owner, operator);\\n  }\\n\\n  function _authorizeUpgrade(address newImplementation) override internal virtual onlyOwner {\\n    // no op\\n  }\\n\\n}\\n\",\"keccak256\":\"0xa86d16344799696cf85cc66be32e0754ffc742518945541c7c1f007c9075bcee\",\"license\":\"MIT\"},\"contracts/HoldrArtistsERC1155UpgradeTest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./HoldrArtistsERC1155.sol\\\";\\n\\ncontract HoldrArtistsERC1155UpgradeTest is HoldrArtistsERC1155 {\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(HoldrArtistsERC1155) returns (bool) {\\n    revert(\\\"This is a dummy error\\\");\\n  }\\n\\n}\\n\",\"keccak256\":\"0xbdfd182e6c3d699753538304b0b476c0396db4aebac6b9536b2df3f041839955\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4987,"contract":"contracts/HoldrArtistsERC1155UpgradeTest.sol:HoldrArtistsERC1155UpgradeTest","label":"admins","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":4991,"contract":"contracts/HoldrArtistsERC1155UpgradeTest.sol:HoldrArtistsERC1155UpgradeTest","label":"artistAddresses","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_address)"},{"astId":4995,"contract":"contracts/HoldrArtistsERC1155UpgradeTest.sol:HoldrArtistsERC1155UpgradeTest","label":"tokenSupplyLimits","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}